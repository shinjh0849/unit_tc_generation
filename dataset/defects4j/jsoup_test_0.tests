@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void is() { [EOL]     String h = "<p>Hello<p title=foo>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.is("[title=foo]")); [EOL]     assertFalse(ps.is("[title=bar]")); [EOL] } 
@Test [EOL] public void is() { [EOL]     String h = "<p>Hello<p title=foo>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.is("[title=foo]")); [EOL]     assertFalse(ps.is("[title=bar]")); [EOL] } 
@Test [EOL] public void is() { [EOL]     String h = "<p>Hello<p title=foo>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.is("[title=foo]")); [EOL]     assertFalse(ps.is("[title=bar]")); [EOL] } 
@Test [EOL] public void is() { [EOL]     String h = "<p>Hello<p title=foo>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.is("[title=foo]")); [EOL]     assertFalse(ps.is("[title=bar]")); [EOL] } 
@Test [EOL] public void is() { [EOL]     String h = "<p>Hello<p title=foo>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.is("[title=foo]")); [EOL]     assertFalse(ps.is("[title=bar]")); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void testTextBean() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     TextNode tn = (TextNode) p.childNode(2); [EOL]     assertEquals(" three", tn.text()); [EOL]     tn.text(" POW!"); [EOL]     assertEquals("One <span>two</span> POW!", p.html()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void testPrependElement() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependElement("p").text("Before"); [EOL]     assertEquals("Before", div.child(0).text()); [EOL]     assertEquals("Hello", div.child(1).text()); [EOL] } 
@Test [EOL] public void testPrependElement() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependElement("p").text("Before"); [EOL]     assertEquals("Before", div.child(0).text()); [EOL]     assertEquals("Hello", div.child(1).text()); [EOL] } 
@Test [EOL] public void testPrependElement() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependElement("p").text("Before"); [EOL]     assertEquals("Before", div.child(0).text()); [EOL]     assertEquals("Hello", div.child(1).text()); [EOL] } 
@Test [EOL] public void testPrependElement() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependElement("p").text("Before"); [EOL]     assertEquals("Before", div.child(0).text()); [EOL]     assertEquals("Hello", div.child(1).text()); [EOL] } 
@Test [EOL] public void testPrependElement() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependElement("p").text("Before"); [EOL]     assertEquals("Before", div.child(0).text()); [EOL]     assertEquals("Hello", div.child(1).text()); [EOL] } 
@Test [EOL] public void testPrependElement() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependElement("p").text("Before"); [EOL]     assertEquals("Before", div.child(0).text()); [EOL]     assertEquals("Hello", div.child(1).text()); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } 
@Test [EOL] public void is() { [EOL]     String h = "<p>Hello<p title=foo>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.is("[title=foo]")); [EOL]     assertFalse(ps.is("[title=bar]")); [EOL] } 
@Test [EOL] public void is() { [EOL]     String h = "<p>Hello<p title=foo>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.is("[title=foo]")); [EOL]     assertFalse(ps.is("[title=bar]")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesFrames() { [EOL]     String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset><body></body></html>", TextUtil.stripNewlines(doc.html())); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesBaseWithoutHref() { [EOL]     String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>"; [EOL]     Document doc = Jsoup.parse(h, "http://example.com/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://example.com/foo", a.attr("abs:href")); [EOL] } 
@Test [EOL] public void handlesBaseWithoutHref() { [EOL]     String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>"; [EOL]     Document doc = Jsoup.parse(h, "http://example.com/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://example.com/foo", a.attr("abs:href")); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesBaseWithoutHref() { [EOL]     String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>"; [EOL]     Document doc = Jsoup.parse(h, "http://example.com/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://example.com/foo", a.attr("abs:href")); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesFrames() { [EOL]     String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset><body></body></html>", TextUtil.stripNewlines(doc.html())); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesBaseWithoutHref() { [EOL]     String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>"; [EOL]     Document doc = Jsoup.parse(h, "http://example.com/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://example.com/foo", a.attr("abs:href")); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } 
@Test [EOL] public void simpleBehaviourTest2() { [EOL]     String h = "Hello <b>there</b>!"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.simpleText()); [EOL]     assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml)); [EOL] } 
@Test [EOL] public void simpleBehaviourTest2() { [EOL]     String h = "Hello <b>there</b>!"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.simpleText()); [EOL]     assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml)); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void testCleanJavascriptHref() { [EOL]     String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<a>XSS</a>", cleanHtml); [EOL] } 
@Test [EOL] public void handlesFrames() { [EOL]     String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset><body></body></html>", TextUtil.stripNewlines(doc.html())); [EOL] } 
@Test [EOL] public void handlesFrames() { [EOL]     String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset><body></body></html>", TextUtil.stripNewlines(doc.html())); [EOL] } 
@Test [EOL] public void handlesFrames() { [EOL]     String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset><body></body></html>", TextUtil.stripNewlines(doc.html())); [EOL] } 
@Test [EOL] public void handlesFrames() { [EOL]     String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset><body></body></html>", TextUtil.stripNewlines(doc.html())); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void testDropXmlProc() { [EOL]     String h = "<?import namespace=\"xss\"><p>Hello</p>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); [EOL]     assertEquals("<p>Hello</p>", cleanHtml); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
@Test [EOL] public void handlesInvalidStartTags() { [EOL]     String h = "<div>Hello < There <&amp;></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello < There <&>", doc.select("div").first().text()); [EOL] } 
