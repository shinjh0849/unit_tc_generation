public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testRelativeContextRelativePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "int", new Integer(1), "/nestedBean/int"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisPreceding() { [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::boolean)", new Double(2)); [EOL] }
public void testAxisPreceding() { [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::boolean)", new Double(2)); [EOL] }
public void testAxisPreceding() { [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::boolean)", new Double(2)); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testDoPredicateIndex() { [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings'][2]", bean.getNestedBean().getStrings()[1], "/nestedBean/strings[2]", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/nestedBean[@name='foo'][3]", "/nestedBean[@name='foo'][3]", "BbBn"); [EOL]     assertNullPointer("/nestedBean[@name='strings'][5]", "/nestedBean/strings[5]", "BbBbE"); [EOL]     assertValueAndPointer("/map[@name='Key3'][2]", new Integer(2), "/map[@name='Key3'][2]", "BbDd", "BbDdB"); [EOL]     assertNullPointer("/map[@name='Key3'][5]", "/map[@name='Key3'][5]", "BbDdE"); [EOL]     assertNullPointer("/map[@name='Key3'][5]/foo", "/map[@name='Key3'][5]/foo", "BbDdENn"); [EOL]     assertValueAndPointer("/map[@name='Key5'][@name='strings'][2]", "String 2", "/map[@name='Key5'][@name='strings'][2]", "BbDdDd", "BbDdDdB"); [EOL]     assertNullPointer("/map[@name='Key5'][@name='strings'][5]", "/map[@name='Key5'][@name='strings'][5]", "BbDdDdE"); [EOL]     assertValueAndPointer("/map[@name='Key3'][2]", new Integer(2), "/map[@name='Key3'][2]", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/map[@name='Key3'][1]/name", "some", "/map[@name='Key3'][1]/name", "BbDdBb", "BbDdBbB"); [EOL]     assertNullPointer("/map[@name='foo'][3]", "/map[@name='foo'][3]", "BbDdE"); [EOL]     assertValueAndPointer("/integers[2]", new Integer(2), "/integers[2]", "Bb", "BbB"); [EOL]     assertValueAndPointer("/nestedBean/strings[2]", bean.getNestedBean().getStrings()[1], "/nestedBean/strings[2]", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/list[3]/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list[6]", "/list[6]", "BbE"); [EOL]     assertNullPointer("/nestedBean/foo[3]", "/nestedBean/foo[3]", "BbBn"); [EOL]     assertNullPointer("/map/foo[3]", "/map[@name='foo'][3]", "BbDdE"); [EOL]     assertNullPointer("/nestedBean/strings[5]", "/nestedBean/strings[5]", "BbBbE"); [EOL]     assertNullPointer("/map/Key3[5]/foo", "/map[@name='Key3'][5]/foo", "BbDdENn"); [EOL]     assertValueAndPointer("/map[@name='Key5']/strings[2]", "String 2", "/map[@name='Key5'][@name='strings'][2]", "BbDdDd", "BbDdDdB"); [EOL]     assertNullPointer("/map[@name='Key5']/strings[5]", "/map[@name='Key5'][@name='strings'][5]", "BbDdDdE"); [EOL]     assertValueAndPointer("/int[1]", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer(".[1]/int", new Integer(1), "/int", "Bb", "BbB"); [EOL] }
public void testDoPredicateIndex() { [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings'][2]", bean.getNestedBean().getStrings()[1], "/nestedBean/strings[2]", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/nestedBean[@name='foo'][3]", "/nestedBean[@name='foo'][3]", "BbBn"); [EOL]     assertNullPointer("/nestedBean[@name='strings'][5]", "/nestedBean/strings[5]", "BbBbE"); [EOL]     assertValueAndPointer("/map[@name='Key3'][2]", new Integer(2), "/map[@name='Key3'][2]", "BbDd", "BbDdB"); [EOL]     assertNullPointer("/map[@name='Key3'][5]", "/map[@name='Key3'][5]", "BbDdE"); [EOL]     assertNullPointer("/map[@name='Key3'][5]/foo", "/map[@name='Key3'][5]/foo", "BbDdENn"); [EOL]     assertValueAndPointer("/map[@name='Key5'][@name='strings'][2]", "String 2", "/map[@name='Key5'][@name='strings'][2]", "BbDdDd", "BbDdDdB"); [EOL]     assertNullPointer("/map[@name='Key5'][@name='strings'][5]", "/map[@name='Key5'][@name='strings'][5]", "BbDdDdE"); [EOL]     assertValueAndPointer("/map[@name='Key3'][2]", new Integer(2), "/map[@name='Key3'][2]", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/map[@name='Key3'][1]/name", "some", "/map[@name='Key3'][1]/name", "BbDdBb", "BbDdBbB"); [EOL]     assertNullPointer("/map[@name='foo'][3]", "/map[@name='foo'][3]", "BbDdE"); [EOL]     assertValueAndPointer("/integers[2]", new Integer(2), "/integers[2]", "Bb", "BbB"); [EOL]     assertValueAndPointer("/nestedBean/strings[2]", bean.getNestedBean().getStrings()[1], "/nestedBean/strings[2]", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/list[3]/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list[6]", "/list[6]", "BbE"); [EOL]     assertNullPointer("/nestedBean/foo[3]", "/nestedBean/foo[3]", "BbBn"); [EOL]     assertNullPointer("/map/foo[3]", "/map[@name='foo'][3]", "BbDdE"); [EOL]     assertNullPointer("/nestedBean/strings[5]", "/nestedBean/strings[5]", "BbBbE"); [EOL]     assertNullPointer("/map/Key3[5]/foo", "/map[@name='Key3'][5]/foo", "BbDdENn"); [EOL]     assertValueAndPointer("/map[@name='Key5']/strings[2]", "String 2", "/map[@name='Key5'][@name='strings'][2]", "BbDdDd", "BbDdDdB"); [EOL]     assertNullPointer("/map[@name='Key5']/strings[5]", "/map[@name='Key5'][@name='strings'][5]", "BbDdDdE"); [EOL]     assertValueAndPointer("/int[1]", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer(".[1]/int", new Integer(1), "/int", "Bb", "BbB"); [EOL] }
public void testDoStepPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/contact[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL]     assertValueAndPointer("/vendor/contact[2]", "Jack", "/vendor/contact[2]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[5]", "/vendor/contact[5]", "BbMn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testRemovePathArrayElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey2", new String[] { "temp1", "temp2" }); [EOL]     context.removePath("map[@name = 'TestKey2'][1]"); [EOL]     assertEquals("Remove dynamic property collection element", "temp2", context.getValue("map[@name = 'TestKey2'][1]")); [EOL] }
public void testRemovePathArrayElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey2", new String[] { "temp1", "temp2" }); [EOL]     context.removePath("map[@name = 'TestKey2'][1]"); [EOL]     assertEquals("Remove dynamic property collection element", "temp2", context.getValue("map[@name = 'TestKey2'][1]")); [EOL] }
public void testRemovePathArrayElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey2", new String[] { "temp1", "temp2" }); [EOL]     context.removePath("map[@name = 'TestKey2'][1]"); [EOL]     assertEquals("Remove dynamic property collection element", "temp2", context.getValue("map[@name = 'TestKey2'][1]")); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCoreOperationAnd() { [EOL]     assertXPathExpression("2 and 4", CoreOperationAnd.class); [EOL]     assertXPathExpression("2 > 1 and 4 < 5", CoreOperationAnd.class); [EOL] }
public void testCoreOperationAnd() { [EOL]     assertXPathExpression("2 and 4", CoreOperationAnd.class); [EOL]     assertXPathExpression("2 > 1 and 4 < 5", CoreOperationAnd.class); [EOL] }
public void testCoreOperationAnd() { [EOL]     assertXPathExpression("2 and 4", CoreOperationAnd.class); [EOL]     assertXPathExpression("2 > 1 and 4 < 5", CoreOperationAnd.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testCoreOperationAnd() { [EOL]     assertXPathExpression("2 and 4", CoreOperationAnd.class); [EOL]     assertXPathExpression("2 > 1 and 4 < 5", CoreOperationAnd.class); [EOL] }
public void testCoreOperationAnd() { [EOL]     assertXPathExpression("2 and 4", CoreOperationAnd.class); [EOL]     assertXPathExpression("2 > 1 and 4 < 5", CoreOperationAnd.class); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/int", new Integer(2), "/nestedBean/int"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/int", new Integer(2), "/nestedBean/int"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/int", new Integer(2), "/nestedBean/int"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/int", new Integer(2), "/nestedBean/int"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/int", new Integer(2), "/nestedBean/int"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/int", new Integer(2), "/nestedBean/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/int", new Integer(2), "/nestedBean/int"); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testAxisPreceding() { [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::boolean)", new Double(2)); [EOL] }
public void testAxisPreceding() { [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::boolean)", new Double(2)); [EOL] }
public void testAxisPreceding() { [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::boolean)", new Double(2)); [EOL] }
public void testAxisPreceding() { [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::boolean)", new Double(2)); [EOL] }
public void testAxisPreceding() { [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::boolean)", new Double(2)); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testLocationPathAxisChild() { [EOL]     assertXPathExpression("child::foo:bar", LocationPath.class, "foo:bar"); [EOL]     assertXPathExpression("foo:bar", LocationPath.class); [EOL]     assertXPathExpression("/foo:bar", LocationPath.class); [EOL]     assertXPathExpression("/foo/bar", LocationPath.class); [EOL]     assertXPathExpression("*", LocationPath.class); [EOL]     assertXPathExpression("foo:*", LocationPath.class); [EOL] }
public void testLocationPathAxisChild() { [EOL]     assertXPathExpression("child::foo:bar", LocationPath.class, "foo:bar"); [EOL]     assertXPathExpression("foo:bar", LocationPath.class); [EOL]     assertXPathExpression("/foo:bar", LocationPath.class); [EOL]     assertXPathExpression("/foo/bar", LocationPath.class); [EOL]     assertXPathExpression("*", LocationPath.class); [EOL]     assertXPathExpression("foo:*", LocationPath.class); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCreatePath() { [EOL]     context = JXPathContext.newContext(new TestBean()); [EOL]     context.setFactory(new TestMixedModelFactory()); [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map[@name='TestKey5']/nestedBean/int", new Integer(1), "/map[@name='TestKey5']/nestedBean/int"); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map[@name='TestKey5']/beans[2]/int", new Integer(1), "/map[@name='TestKey5']/beans[2]/int"); [EOL] }
public void testCreatePath() { [EOL]     context = JXPathContext.newContext(new TestBean()); [EOL]     context.setFactory(new TestMixedModelFactory()); [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map[@name='TestKey5']/nestedBean/int", new Integer(1), "/map[@name='TestKey5']/nestedBean/int"); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map[@name='TestKey5']/beans[2]/int", new Integer(1), "/map[@name='TestKey5']/beans[2]/int"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testContextDependency() { [EOL]     testContextDependency("1", false); [EOL]     testContextDependency("$x", false); [EOL]     testContextDependency("/foo", false); [EOL]     testContextDependency("foo", true); [EOL]     testContextDependency("/foo[3]", false); [EOL]     testContextDependency("/foo[$x]", false); [EOL]     testContextDependency("/foo[bar]", true); [EOL]     testContextDependency("3 + 5", false); [EOL]     testContextDependency("test:func(3, 5)", true); [EOL]     testContextDependency("test:func(3, foo)", true); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testCreatePathAndSetValueDeclareVariable() { [EOL]     assertXPathCreatePathAndSetValue(context, "$string", "Value", "$string"); [EOL] }
public void testCreatePathAndSetValueDeclareVariable() { [EOL]     assertXPathCreatePathAndSetValue(context, "$string", "Value", "$string"); [EOL] }
public void testCreatePathAndSetValueDeclareVariable() { [EOL]     assertXPathCreatePathAndSetValue(context, "$string", "Value", "$string"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testCreatePathAndSetValueDeclareVariable() { [EOL]     assertXPathCreatePathAndSetValue(context, "$string", "Value", "$string"); [EOL] }
public void testCreatePathAndSetValueDeclareVariable() { [EOL]     assertXPathCreatePathAndSetValue(context, "$string", "Value", "$string"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testVariables() { [EOL]     assertXPathValueAndPointer(context, "$a", new Double(1), "$a"); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testContainer() { [EOL]     assertXPathValue(context, "$container/vendor//street", "Orchard Road"); [EOL]     assertXPathValue(context, "$container//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$container//street", "$container/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "number(vendor/location/employeeCount)", new Double(10)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testGetNode() { [EOL]     assertXPathNodeType(context, "/", Document.class); [EOL]     assertXPathNodeType(context, "/vendor/location", Element.class); [EOL]     assertXPathNodeType(context, "//location/@name", Attribute.class); [EOL]     assertXPathNodeType(context, "//vendor", Element.class); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisNamespace() { [EOL]     assertXPathValueAndPointer(context, "vendor/product/prix/namespace::price", "priceNS", "/vendor[1]/product[1]/prix[1]/namespace::price"); [EOL]     assertXPathValue(context, "count(vendor/product/namespace::*)", new Double(3)); [EOL]     assertXPathValue(context, "name(vendor/product/prix/namespace::price)", "price"); [EOL]     assertXPathValue(context, "local-name(vendor/product/prix/namespace::price)", "price"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testListList() { [EOL]     assertXPathValueAndPointer(context, "list[4]/.[1]", "string2", "/list[4]/.[1]"); [EOL] }
public void testListList() { [EOL]     assertXPathValueAndPointer(context, "list[4]/.[1]", "string2", "/list[4]/.[1]"); [EOL] }
public void testListList() { [EOL]     assertXPathValueAndPointer(context, "list[4]/.[1]", "string2", "/list[4]/.[1]"); [EOL] }
public void testListList() { [EOL]     assertXPathValueAndPointer(context, "list[4]/.[1]", "string2", "/list[4]/.[1]"); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInvalidVariableName() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         context.getValue("$none"); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Evaluating '$none', expected exception - did not get it", exception); [EOL]     exception = false; [EOL]     try { [EOL]         context.setValue("$none", new Integer(1)); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Setting '$none = 1', expected exception - did not get it", exception); [EOL] }
public void testInvalidVariableName() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         context.getValue("$none"); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Evaluating '$none', expected exception - did not get it", exception); [EOL]     exception = false; [EOL]     try { [EOL]         context.setValue("$none", new Integer(1)); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Setting '$none = 1', expected exception - did not get it", exception); [EOL] }
public void testInvalidVariableName() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         context.getValue("$none"); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Evaluating '$none', expected exception - did not get it", exception); [EOL]     exception = false; [EOL]     try { [EOL]         context.setValue("$none", new Integer(1)); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Setting '$none = 1', expected exception - did not get it", exception); [EOL] }
public void testInvalidVariableName() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         context.getValue("$none"); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Evaluating '$none', expected exception - did not get it", exception); [EOL]     exception = false; [EOL]     try { [EOL]         context.setValue("$none", new Integer(1)); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Setting '$none = 1', expected exception - did not get it", exception); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testInvalidVariableName() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         context.getValue("$none"); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Evaluating '$none', expected exception - did not get it", exception); [EOL]     exception = false; [EOL]     try { [EOL]         context.setValue("$none", new Integer(1)); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Setting '$none = 1', expected exception - did not get it", exception); [EOL] }
public void testInvalidVariableName() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         context.getValue("$none"); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Evaluating '$none', expected exception - did not get it", exception); [EOL]     exception = false; [EOL]     try { [EOL]         context.setValue("$none", new Integer(1)); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Setting '$none = 1', expected exception - did not get it", exception); [EOL] }
public void testInvalidVariableName() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         context.getValue("$none"); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Evaluating '$none', expected exception - did not get it", exception); [EOL]     exception = false; [EOL]     try { [EOL]         context.setValue("$none", new Integer(1)); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Setting '$none = 1', expected exception - did not get it", exception); [EOL] }
public void testInvalidVariableName() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         context.getValue("$none"); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Evaluating '$none', expected exception - did not get it", exception); [EOL]     exception = false; [EOL]     try { [EOL]         context.setValue("$none", new Integer(1)); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Setting '$none = 1', expected exception - did not get it", exception); [EOL] }
public void testInvalidVariableName() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         context.getValue("$none"); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Evaluating '$none', expected exception - did not get it", exception); [EOL]     exception = false; [EOL]     try { [EOL]         context.setValue("$none", new Integer(1)); [EOL]     } catch (Exception ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Setting '$none = 1', expected exception - did not get it", exception); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testInfoSetTypes() { [EOL]     assertXPathValue(context, "1", new Double(1.0)); [EOL]     assertXPathPointer(context, "1", "1"); [EOL]     assertXPathValueIterator(context, "1", list(new Double(1.0))); [EOL]     assertXPathPointerIterator(context, "1", list("1")); [EOL]     assertXPathValue(context, "-1", new Double(-1.0)); [EOL]     assertXPathValue(context, "2 + 2", new Double(4.0)); [EOL]     assertXPathValue(context, "3 - 2", new Double(1.0)); [EOL]     assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0)); [EOL]     assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0)); [EOL]     assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0)); [EOL]     assertXPathValue(context, "5 mod 2", new Double(1.0)); [EOL]     assertXPathValue(context, "5.9 mod 2.1", new Double(1.0)); [EOL]     assertXPathValue(context, "5 mod -2", new Double(1.0)); [EOL]     assertXPathValue(context, "-5 mod 2", new Double(-1.0)); [EOL]     assertXPathValue(context, "-5 mod -2", new Double(-1.0)); [EOL]     assertXPathValue(context, "1 < 2", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 <= 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 >= 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 > 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 > 2 and 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 > 2 and 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "3 < 2 or 2 > 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "3 < 2 or 2 < 1", Boolean.FALSE); [EOL]     assertXPathValue(context, "1 = 1", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = '1'", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 2 > 3", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 > 2 = 0", Boolean.TRUE); [EOL]     assertXPathValue(context, "1 = 2", Boolean.FALSE); [EOL]     assertXPathValue(context, "$integer", new Double(1), Double.class); [EOL]     assertXPathValue(context, "2 + 3", "5.0", String.class); [EOL]     assertXPathValue(context, "2 + 3", Boolean.TRUE, boolean.class); [EOL]     assertXPathValue(context, "'true'", Boolean.TRUE, Boolean.class); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testAxisChild() { [EOL]     assertXPathValue(context, "vendor/location/address/street", "Orchard Road"); [EOL]     assertXPathValue(context, "vendor/location/address/city", "Fruit Market"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount)", "amount"); [EOL]     assertXPathValue(context, "local-name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount)", "value:amount"); [EOL]     assertXPathValue(context, "name(vendor/location)", "location"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount)", "priceNS"); [EOL]     assertXPathValue(context, "vendor/product/prix", "934.99"); [EOL]     assertXPathValue(context, "/vendor/contact[@name='jim']", "Jim"); [EOL]     boolean nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jim']", nsv); [EOL]     nsv = false; [EOL]     try { [EOL]         context.setLenient(false); [EOL]         context.getValue("/vendor/contact[@name='jane']/*"); [EOL]     } catch (JXPathException ex) { [EOL]         nsv = true; [EOL]     } [EOL]     assertTrue("No such value: /vendor/contact[@name='jane']/*", nsv); [EOL]     assertXPathValue(context, "count(vendor/product/price:*)", new Double(2)); [EOL]     assertXPathValue(context, "count(vendor/product/*)", new Double(4)); [EOL]     assertXPathValue(context, "vendor/product/price:amount", "45.95"); [EOL]     context.registerNamespace("x", "temp"); [EOL]     assertXPathValue(context, "vendor/x:pos//number", "109"); [EOL] }
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] }
