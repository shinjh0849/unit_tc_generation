@Test [EOL] public void test_toBooleanObject_int_int_int() { [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); [EOL] }
@Test [EOL] public void test_toBooleanObject_int_int_int() { [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); [EOL] }
@Test [EOL] public void test_toBooleanObject_int_int_int() { [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); [EOL] }
@Test [EOL] public void test_toBooleanObject_int_int_int() { [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); [EOL] }
@Test [EOL] public void test_toIntegerObject_boolean_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven)); [EOL]     assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven)); [EOL] }
@Test [EOL] public void test_toBoolean_String_String_String() { [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, "N")); [EOL]     assertFalse(BooleanUtils.toBoolean((String) null, "Y", null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "N")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("N"))); [EOL]     assertFalse(BooleanUtils.toBoolean("N", "Y", "N")); [EOL]     assertFalse(BooleanUtils.toBoolean("N", new String("Y"), new String("N"))); [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("Y"))); [EOL] }
@Test [EOL] public void test_toBoolean_String_String_String() { [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, "N")); [EOL]     assertFalse(BooleanUtils.toBoolean((String) null, "Y", null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "N")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("N"))); [EOL]     assertFalse(BooleanUtils.toBoolean("N", "Y", "N")); [EOL]     assertFalse(BooleanUtils.toBoolean("N", new String("Y"), new String("N"))); [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("Y"))); [EOL] }
@Test [EOL] public void test_toBoolean_String_String_String() { [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, "N")); [EOL]     assertFalse(BooleanUtils.toBoolean((String) null, "Y", null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "N")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("N"))); [EOL]     assertFalse(BooleanUtils.toBoolean("N", "Y", "N")); [EOL]     assertFalse(BooleanUtils.toBoolean("N", new String("Y"), new String("N"))); [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("Y"))); [EOL] }
@Test [EOL] public void test_toBoolean_String_String_String() { [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, "N")); [EOL]     assertFalse(BooleanUtils.toBoolean((String) null, "Y", null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "N")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("N"))); [EOL]     assertFalse(BooleanUtils.toBoolean("N", "Y", "N")); [EOL]     assertFalse(BooleanUtils.toBoolean("N", new String("Y"), new String("N"))); [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("Y"))); [EOL] }
@Test [EOL] public void test_toBoolean_String_String_String() { [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, "N")); [EOL]     assertFalse(BooleanUtils.toBoolean((String) null, "Y", null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "N")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("N"))); [EOL]     assertFalse(BooleanUtils.toBoolean("N", "Y", "N")); [EOL]     assertFalse(BooleanUtils.toBoolean("N", new String("Y"), new String("N"))); [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("Y"))); [EOL] }
@Test [EOL] public void test_toBoolean_String_String_String() { [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, "N")); [EOL]     assertFalse(BooleanUtils.toBoolean((String) null, "Y", null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "N")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("N"))); [EOL]     assertFalse(BooleanUtils.toBoolean("N", "Y", "N")); [EOL]     assertFalse(BooleanUtils.toBoolean("N", new String("Y"), new String("N"))); [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("Y"))); [EOL] }
@Test [EOL] public void test_toStringOnOff_Boolean() { [EOL]     assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null)); [EOL]     assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE)); [EOL]     assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE)); [EOL] }
@Test [EOL] public void test_toStringOnOff_Boolean() { [EOL]     assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null)); [EOL]     assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE)); [EOL]     assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE)); [EOL] }
@Test [EOL] public void test_toStringOnOff_Boolean() { [EOL]     assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null)); [EOL]     assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE)); [EOL]     assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullElementInput() { [EOL]     BooleanUtils.and(new Boolean[] { null }); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullElementInput() { [EOL]     BooleanUtils.and(new Boolean[] { null }); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullElementInput() { [EOL]     BooleanUtils.and(new Boolean[] { null }); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullElementInput() { [EOL]     BooleanUtils.and(new Boolean[] { null }); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullElementInput() { [EOL]     BooleanUtils.and(new Boolean[] { null }); [EOL] }
@Test [EOL] public void testOr_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new boolean[] { false, false })); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new boolean[] { true, false })); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new boolean[] { false, true })); [EOL] }
@Test [EOL] public void testOr_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new boolean[] { false, false })); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new boolean[] { true, false })); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new boolean[] { false, true })); [EOL] }
@Test [EOL] public void testOr_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new boolean[] { false, false })); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new boolean[] { true, false })); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new boolean[] { false, true })); [EOL] }
@Test [EOL] public void testOr_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new boolean[] { false, false })); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new boolean[] { true, false })); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new boolean[] { false, true })); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullElementInput() { [EOL]     BooleanUtils.or(new Boolean[] { null }); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullElementInput() { [EOL]     BooleanUtils.or(new Boolean[] { null }); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullElementInput() { [EOL]     BooleanUtils.or(new Boolean[] { null }); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullElementInput() { [EOL]     BooleanUtils.or(new Boolean[] { null }); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullElementInput() { [EOL]     BooleanUtils.or(new Boolean[] { null }); [EOL] }
@Test [EOL] public void testXor_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testXor_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testXor_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testXor_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testXor_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testXor_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testXor_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testXor_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testUnfinishedEntity() { [EOL]     NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]     String input = "Test &#x30 not test"; [EOL]     String expected = "Test \u0030 not test"; [EOL]     String result = neu.translate(input); [EOL]     assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(); [EOL]     input = "Test &#x30 not test"; [EOL]     expected = input; [EOL]     result = neu.translate(input); [EOL]     assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]     input = "Test &#x30 not test"; [EOL]     try { [EOL]         result = neu.translate(input); [EOL]         fail("IllegalArgumentException expected"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testUnfinishedEntity() { [EOL]     NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]     String input = "Test &#x30 not test"; [EOL]     String expected = "Test \u0030 not test"; [EOL]     String result = neu.translate(input); [EOL]     assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(); [EOL]     input = "Test &#x30 not test"; [EOL]     expected = input; [EOL]     result = neu.translate(input); [EOL]     assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]     input = "Test &#x30 not test"; [EOL]     try { [EOL]         result = neu.translate(input); [EOL]         fail("IllegalArgumentException expected"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testUnfinishedEntity() { [EOL]     NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]     String input = "Test &#x30 not test"; [EOL]     String expected = "Test \u0030 not test"; [EOL]     String result = neu.translate(input); [EOL]     assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(); [EOL]     input = "Test &#x30 not test"; [EOL]     expected = input; [EOL]     result = neu.translate(input); [EOL]     assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]     input = "Test &#x30 not test"; [EOL]     try { [EOL]         result = neu.translate(input); [EOL]         fail("IllegalArgumentException expected"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testUnfinishedEntity() { [EOL]     NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]     String input = "Test &#x30 not test"; [EOL]     String expected = "Test \u0030 not test"; [EOL]     String result = neu.translate(input); [EOL]     assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(); [EOL]     input = "Test &#x30 not test"; [EOL]     expected = input; [EOL]     result = neu.translate(input); [EOL]     assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]     input = "Test &#x30 not test"; [EOL]     try { [EOL]         result = neu.translate(input); [EOL]         fail("IllegalArgumentException expected"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testUnfinishedEntity() { [EOL]     NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]     String input = "Test &#x30 not test"; [EOL]     String expected = "Test \u0030 not test"; [EOL]     String result = neu.translate(input); [EOL]     assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(); [EOL]     input = "Test &#x30 not test"; [EOL]     expected = input; [EOL]     result = neu.translate(input); [EOL]     assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]     input = "Test &#x30 not test"; [EOL]     try { [EOL]         result = neu.translate(input); [EOL]         fail("IllegalArgumentException expected"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testUnfinishedEntity() { [EOL]     NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]     String input = "Test &#x30 not test"; [EOL]     String expected = "Test \u0030 not test"; [EOL]     String result = neu.translate(input); [EOL]     assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(); [EOL]     input = "Test &#x30 not test"; [EOL]     expected = input; [EOL]     result = neu.translate(input); [EOL]     assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]     input = "Test &#x30 not test"; [EOL]     try { [EOL]         result = neu.translate(input); [EOL]         fail("IllegalArgumentException expected"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testUnfinishedEntity() { [EOL]     NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]     String input = "Test &#x30 not test"; [EOL]     String expected = "Test \u0030 not test"; [EOL]     String result = neu.translate(input); [EOL]     assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(); [EOL]     input = "Test &#x30 not test"; [EOL]     expected = input; [EOL]     result = neu.translate(input); [EOL]     assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]     input = "Test &#x30 not test"; [EOL]     try { [EOL]         result = neu.translate(input); [EOL]         fail("IllegalArgumentException expected"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testUnfinishedEntity() { [EOL]     NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]     String input = "Test &#x30 not test"; [EOL]     String expected = "Test \u0030 not test"; [EOL]     String result = neu.translate(input); [EOL]     assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(); [EOL]     input = "Test &#x30 not test"; [EOL]     expected = input; [EOL]     result = neu.translate(input); [EOL]     assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]     neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]     input = "Test &#x30 not test"; [EOL]     try { [EOL]         result = neu.translate(input); [EOL]         fail("IllegalArgumentException expected"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testAddEventListenerWithPrivateAddMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCountingInvociationHandler handler = new EventCountingInvociationHandler(); [EOL]     final VetoableChangeListener listener = handler.createListener(VetoableChangeListener.class); [EOL]     try { [EOL]         EventUtils.addEventListener(src, VetoableChangeListener.class, listener); [EOL]         fail("Should not be allowed to add a listener to an object that doesn't support it."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Class " + src.getClass().getName() + " does not have a public add" + VetoableChangeListener.class.getSimpleName() + " method which takes a parameter of type " + VetoableChangeListener.class.getName() + ".", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddEventListenerWithPrivateAddMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCountingInvociationHandler handler = new EventCountingInvociationHandler(); [EOL]     final VetoableChangeListener listener = handler.createListener(VetoableChangeListener.class); [EOL]     try { [EOL]         EventUtils.addEventListener(src, VetoableChangeListener.class, listener); [EOL]         fail("Should not be allowed to add a listener to an object that doesn't support it."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Class " + src.getClass().getName() + " does not have a public add" + VetoableChangeListener.class.getSimpleName() + " method which takes a parameter of type " + VetoableChangeListener.class.getName() + ".", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddEventListenerWithPrivateAddMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCountingInvociationHandler handler = new EventCountingInvociationHandler(); [EOL]     final VetoableChangeListener listener = handler.createListener(VetoableChangeListener.class); [EOL]     try { [EOL]         EventUtils.addEventListener(src, VetoableChangeListener.class, listener); [EOL]         fail("Should not be allowed to add a listener to an object that doesn't support it."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Class " + src.getClass().getName() + " does not have a public add" + VetoableChangeListener.class.getSimpleName() + " method which takes a parameter of type " + VetoableChangeListener.class.getName() + ".", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testStringToDoubleString() { [EOL]     assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); [EOL]     assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); [EOL]     assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); [EOL]     assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE + "") == Double.MAX_VALUE); [EOL]     assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE + "") == Double.MIN_VALUE); [EOL]     assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); [EOL]     assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); [EOL] }
@Test [EOL] public void testStringToDoubleString() { [EOL]     assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); [EOL]     assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); [EOL]     assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); [EOL]     assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE + "") == Double.MAX_VALUE); [EOL]     assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE + "") == Double.MIN_VALUE); [EOL]     assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); [EOL]     assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); [EOL] }
@Test [EOL] public void testStringToDoubleString() { [EOL]     assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); [EOL]     assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); [EOL]     assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); [EOL]     assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE + "") == Double.MAX_VALUE); [EOL]     assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE + "") == Double.MIN_VALUE); [EOL]     assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); [EOL]     assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); [EOL] }
@Test [EOL] public void testStringToDoubleString() { [EOL]     assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); [EOL]     assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); [EOL]     assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); [EOL]     assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE + "") == Double.MAX_VALUE); [EOL]     assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE + "") == Double.MIN_VALUE); [EOL]     assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); [EOL]     assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); [EOL] }
@Test [EOL] public void testStringToDoubleString() { [EOL]     assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); [EOL]     assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); [EOL]     assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); [EOL]     assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE + "") == Double.MAX_VALUE); [EOL]     assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE + "") == Double.MIN_VALUE); [EOL]     assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); [EOL]     assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); [EOL] }
@Test [EOL] public void testStringToDoubleString() { [EOL]     assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); [EOL]     assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); [EOL]     assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); [EOL]     assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE + "") == Double.MAX_VALUE); [EOL]     assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE + "") == Double.MIN_VALUE); [EOL]     assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); [EOL]     assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); [EOL] }
@Test [EOL] public void testStringToDoubleString() { [EOL]     assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); [EOL]     assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); [EOL]     assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); [EOL]     assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE + "") == Double.MAX_VALUE); [EOL]     assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE + "") == Double.MIN_VALUE); [EOL]     assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); [EOL]     assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); [EOL] }
@Test [EOL] public void testToByteStringI() { [EOL]     assertTrue("toByte(String,byte) 1 failed", NumberUtils.toByte("123", (byte) 5) == 123); [EOL]     assertTrue("toByte(String,byte) 2 failed", NumberUtils.toByte("12.3", (byte) 5) == 5); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinByte_emptyArray() { [EOL]     NumberUtils.min(new byte[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinByte_emptyArray() { [EOL]     NumberUtils.min(new byte[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinByte_emptyArray() { [EOL]     NumberUtils.min(new byte[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinByte_emptyArray() { [EOL]     NumberUtils.min(new byte[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinDouble_nullArray() { [EOL]     NumberUtils.min((double[]) null); [EOL] }
@Test [EOL] public void testMaxLong() { [EOL]     assertEquals("max(long[]) failed for array length 1", 5, NumberUtils.max(new long[] { 5 })); [EOL]     assertEquals("max(long[]) failed for array length 2", 9, NumberUtils.max(new long[] { 6, 9 })); [EOL]     assertEquals("max(long[]) failed for array length 5", 10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxLong() { [EOL]     assertEquals("max(long[]) failed for array length 1", 5, NumberUtils.max(new long[] { 5 })); [EOL]     assertEquals("max(long[]) failed for array length 2", 9, NumberUtils.max(new long[] { 6, 9 })); [EOL]     assertEquals("max(long[]) failed for array length 5", 10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxLong() { [EOL]     assertEquals("max(long[]) failed for array length 1", 5, NumberUtils.max(new long[] { 5 })); [EOL]     assertEquals("max(long[]) failed for array length 2", 9, NumberUtils.max(new long[] { 6, 9 })); [EOL]     assertEquals("max(long[]) failed for array length 5", 10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxLong() { [EOL]     assertEquals("max(long[]) failed for array length 1", 5, NumberUtils.max(new long[] { 5 })); [EOL]     assertEquals("max(long[]) failed for array length 2", 9, NumberUtils.max(new long[] { 6, 9 })); [EOL]     assertEquals("max(long[]) failed for array length 5", 10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxByte_emptyArray() { [EOL]     NumberUtils.max(new byte[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxByte_emptyArray() { [EOL]     NumberUtils.max(new byte[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxByte_emptyArray() { [EOL]     NumberUtils.max(new byte[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxFloat_emptyArray() { [EOL]     NumberUtils.max(new float[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxFloat_emptyArray() { [EOL]     NumberUtils.max(new float[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxFloat_emptyArray() { [EOL]     NumberUtils.max(new float[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxFloat_emptyArray() { [EOL]     NumberUtils.max(new float[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxFloat_emptyArray() { [EOL]     NumberUtils.max(new float[0]); [EOL] }
@Test [EOL] public void testMaximumLong() { [EOL]     assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.max(12345L, 12345L, 12345L)); [EOL] }
@Test [EOL] public void testMaximumLong() { [EOL]     assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.max(12345L, 12345L, 12345L)); [EOL] }
@Test [EOL] public void testMaximumLong() { [EOL]     assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.max(12345L, 12345L, 12345L)); [EOL] }
@Test [EOL] public void testMaximumLong() { [EOL]     assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.max(12345L, 12345L, 12345L)); [EOL] }
@Test [EOL] public void testMaximumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMaximumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMaximumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMaximumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMaximumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMaximumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMaximumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testSetShortBoolean() { [EOL]     assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_multi.clearShort((short) -1), bf_multi.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_single.clearShort((short) -1), bf_single.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false)); [EOL] }
@Test [EOL] public void testSetShortBoolean() { [EOL]     assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_multi.clearShort((short) -1), bf_multi.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_single.clearShort((short) -1), bf_single.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false)); [EOL] }
@Test [EOL] public void testSetShortBoolean() { [EOL]     assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_multi.clearShort((short) -1), bf_multi.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_single.clearShort((short) -1), bf_single.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false)); [EOL] }
@Test [EOL] public void testSetShortBoolean() { [EOL]     assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_multi.clearShort((short) -1), bf_multi.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_single.clearShort((short) -1), bf_single.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false)); [EOL] }
@Test [EOL] public void testSetShortBoolean() { [EOL]     assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_multi.clearShort((short) -1), bf_multi.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_single.clearShort((short) -1), bf_single.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false)); [EOL] }
@Test [EOL] public void testSetShortBoolean() { [EOL]     assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_multi.clearShort((short) -1), bf_multi.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_single.clearShort((short) -1), bf_single.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false)); [EOL] }
@Test [EOL] public void testSetShortBoolean() { [EOL]     assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true)); [EOL]     assertEquals(bf_multi.clearShort((short) -1), bf_multi.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_single.clearShort((short) -1), bf_single.setShortBoolean((short) -1, false)); [EOL]     assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false)); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testBuildWrappedFactoryNull() { [EOL]     builder.wrappedFactory(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testBuildWrappedFactoryNull() { [EOL]     builder.wrappedFactory(null); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] }
@Test [EOL] public void testAcquireNoLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, TimedSemaphore.NO_LIMIT); [EOL]     final int count = 1000; [EOL]     final CountDownLatch latch = new CountDownLatch(count); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testAcquireNoLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, TimedSemaphore.NO_LIMIT); [EOL]     final int count = 1000; [EOL]     final CountDownLatch latch = new CountDownLatch(count); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testAcquireNoLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, TimedSemaphore.NO_LIMIT); [EOL]     final int count = 1000; [EOL]     final CountDownLatch latch = new CountDownLatch(count); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testAcquireNoLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, TimedSemaphore.NO_LIMIT); [EOL]     final int count = 1000; [EOL]     final CountDownLatch latch = new CountDownLatch(count); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testAcquireNoLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, TimedSemaphore.NO_LIMIT); [EOL]     final int count = 1000; [EOL]     final CountDownLatch latch = new CountDownLatch(count); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] }
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] }
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] }
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] }
@Test [EOL] public void testSerialization() throws IOException, ClassNotFoundException, PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(new VetoableChangeListener() { [EOL]  [EOL]         @Override [EOL]         public void vetoableChange(final PropertyChangeEvent e) { [EOL]         } [EOL]     }); [EOL]     listenerSupport.addListener(EasyMock.createNiceMock(VetoableChangeListener.class)); [EOL]     final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream); [EOL]     objectOutputStream.writeObject(listenerSupport); [EOL]     objectOutputStream.close(); [EOL]     @SuppressWarnings("unchecked") [EOL]     final EventListenerSupport<VetoableChangeListener> deserializedListenerSupport = (EventListenerSupport<VetoableChangeListener>) new ObjectInputStream(new ByteArrayInputStream(outputStream.toByteArray())).readObject(); [EOL]     final VetoableChangeListener[] listeners = deserializedListenerSupport.getListeners(); [EOL]     assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); [EOL]     assertEquals(1, listeners.length); [EOL]     final VetoableChangeListener listener = listeners[0]; [EOL]     final PropertyChangeEvent evt = new PropertyChangeEvent(new Date(), "Day", 7, 9); [EOL]     listener.vetoableChange(evt); [EOL]     EasyMock.replay(listener); [EOL]     deserializedListenerSupport.fire().vetoableChange(evt); [EOL]     EasyMock.verify(listener); [EOL]     deserializedListenerSupport.removeListener(listener); [EOL]     assertEquals(0, deserializedListenerSupport.getListeners().length); [EOL] }
@Test [EOL] public void testSerialization() throws IOException, ClassNotFoundException, PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(new VetoableChangeListener() { [EOL]  [EOL]         @Override [EOL]         public void vetoableChange(final PropertyChangeEvent e) { [EOL]         } [EOL]     }); [EOL]     listenerSupport.addListener(EasyMock.createNiceMock(VetoableChangeListener.class)); [EOL]     final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream); [EOL]     objectOutputStream.writeObject(listenerSupport); [EOL]     objectOutputStream.close(); [EOL]     @SuppressWarnings("unchecked") [EOL]     final EventListenerSupport<VetoableChangeListener> deserializedListenerSupport = (EventListenerSupport<VetoableChangeListener>) new ObjectInputStream(new ByteArrayInputStream(outputStream.toByteArray())).readObject(); [EOL]     final VetoableChangeListener[] listeners = deserializedListenerSupport.getListeners(); [EOL]     assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); [EOL]     assertEquals(1, listeners.length); [EOL]     final VetoableChangeListener listener = listeners[0]; [EOL]     final PropertyChangeEvent evt = new PropertyChangeEvent(new Date(), "Day", 7, 9); [EOL]     listener.vetoableChange(evt); [EOL]     EasyMock.replay(listener); [EOL]     deserializedListenerSupport.fire().vetoableChange(evt); [EOL]     EasyMock.verify(listener); [EOL]     deserializedListenerSupport.removeListener(listener); [EOL]     assertEquals(0, deserializedListenerSupport.getListeners().length); [EOL] }
@Test [EOL] public void testSerialization() throws IOException, ClassNotFoundException, PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(new VetoableChangeListener() { [EOL]  [EOL]         @Override [EOL]         public void vetoableChange(final PropertyChangeEvent e) { [EOL]         } [EOL]     }); [EOL]     listenerSupport.addListener(EasyMock.createNiceMock(VetoableChangeListener.class)); [EOL]     final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream); [EOL]     objectOutputStream.writeObject(listenerSupport); [EOL]     objectOutputStream.close(); [EOL]     @SuppressWarnings("unchecked") [EOL]     final EventListenerSupport<VetoableChangeListener> deserializedListenerSupport = (EventListenerSupport<VetoableChangeListener>) new ObjectInputStream(new ByteArrayInputStream(outputStream.toByteArray())).readObject(); [EOL]     final VetoableChangeListener[] listeners = deserializedListenerSupport.getListeners(); [EOL]     assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); [EOL]     assertEquals(1, listeners.length); [EOL]     final VetoableChangeListener listener = listeners[0]; [EOL]     final PropertyChangeEvent evt = new PropertyChangeEvent(new Date(), "Day", 7, 9); [EOL]     listener.vetoableChange(evt); [EOL]     EasyMock.replay(listener); [EOL]     deserializedListenerSupport.fire().vetoableChange(evt); [EOL]     EasyMock.verify(listener); [EOL]     deserializedListenerSupport.removeListener(listener); [EOL]     assertEquals(0, deserializedListenerSupport.getListeners().length); [EOL] }
@Test [EOL] public void testSerialization() throws IOException, ClassNotFoundException, PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(new VetoableChangeListener() { [EOL]  [EOL]         @Override [EOL]         public void vetoableChange(final PropertyChangeEvent e) { [EOL]         } [EOL]     }); [EOL]     listenerSupport.addListener(EasyMock.createNiceMock(VetoableChangeListener.class)); [EOL]     final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream); [EOL]     objectOutputStream.writeObject(listenerSupport); [EOL]     objectOutputStream.close(); [EOL]     @SuppressWarnings("unchecked") [EOL]     final EventListenerSupport<VetoableChangeListener> deserializedListenerSupport = (EventListenerSupport<VetoableChangeListener>) new ObjectInputStream(new ByteArrayInputStream(outputStream.toByteArray())).readObject(); [EOL]     final VetoableChangeListener[] listeners = deserializedListenerSupport.getListeners(); [EOL]     assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); [EOL]     assertEquals(1, listeners.length); [EOL]     final VetoableChangeListener listener = listeners[0]; [EOL]     final PropertyChangeEvent evt = new PropertyChangeEvent(new Date(), "Day", 7, 9); [EOL]     listener.vetoableChange(evt); [EOL]     EasyMock.replay(listener); [EOL]     deserializedListenerSupport.fire().vetoableChange(evt); [EOL]     EasyMock.verify(listener); [EOL]     deserializedListenerSupport.removeListener(listener); [EOL]     assertEquals(0, deserializedListenerSupport.getListeners().length); [EOL] }
@Test [EOL] public void testLessThanFour() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\0047\\u006"; [EOL]     try { [EOL]         uu.translate(input); [EOL]         fail("A lack of digits in a Unicode escape sequence failed to throw an exception"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLessThanFour() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\0047\\u006"; [EOL]     try { [EOL]         uu.translate(input); [EOL]         fail("A lack of digits in a Unicode escape sequence failed to throw an exception"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableFloat((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableFloat((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableFloat((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableFloat((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableFloat((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableFloat((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableFloat((Number) null); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.add(1.1f); [EOL]     assertEquals(2.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.add(1.1f); [EOL]     assertEquals(2.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.add(1.1f); [EOL]     assertEquals(2.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testToFloat() { [EOL]     assertEquals(Float.valueOf(0f), new MutableFloat(0f).toFloat()); [EOL]     assertEquals(Float.valueOf(12.3f), new MutableFloat(12.3f).toFloat()); [EOL] }
@Test [EOL] public void test_getSimpleName_Object() { [EOL]     assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]     assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]     assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); [EOL] }
@Test [EOL] public void test_getSimpleName_Object() { [EOL]     assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]     assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]     assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); [EOL] }
@Test [EOL] public void test_getSimpleName_Object() { [EOL]     assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]     assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]     assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); [EOL] }
@Test [EOL] public void test_getSimpleName_Object() { [EOL]     assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]     assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]     assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); [EOL] }
@Test [EOL] public void test_getPackageName_Object() { [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getPackageName(null, "<null>")); [EOL] }
@Test [EOL] public void test_getPackageName_Object() { [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getPackageName(null, "<null>")); [EOL] }
@Test [EOL] public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]     assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]     assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]     assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true)); [EOL]     assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true)); [EOL]     assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true)); [EOL]     assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true)); [EOL]     assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true)); [EOL]     assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true)); [EOL]     assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE, true)); [EOL]     assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE, true)); [EOL]     assertTrue("short -> short", ClassUtils.isAssignable(Short.class, Short.TYPE, true)); [EOL]     assertTrue("short -> int", ClassUtils.isAssignable(Short.class, Integer.TYPE, true)); [EOL]     assertTrue("short -> long", ClassUtils.isAssignable(Short.class, Long.TYPE, true)); [EOL]     assertTrue("short -> float", ClassUtils.isAssignable(Short.class, Float.TYPE, true)); [EOL]     assertTrue("short -> double", ClassUtils.isAssignable(Short.class, Double.TYPE, true)); [EOL]     assertFalse("short -> boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true)); [EOL]     assertTrue("char -> char", ClassUtils.isAssignable(Character.class, Character.TYPE, true)); [EOL]     assertFalse("char -> byte", ClassUtils.isAssignable(Character.class, Byte.TYPE, true)); [EOL]     assertFalse("char -> short", ClassUtils.isAssignable(Character.class, Short.TYPE, true)); [EOL]     assertTrue("char -> int", ClassUtils.isAssignable(Character.class, Integer.TYPE, true)); [EOL]     assertTrue("char -> long", ClassUtils.isAssignable(Character.class, Long.TYPE, true)); [EOL]     assertTrue("char -> float", ClassUtils.isAssignable(Character.class, Float.TYPE, true)); [EOL]     assertTrue("char -> double", ClassUtils.isAssignable(Character.class, Double.TYPE, true)); [EOL]     assertFalse("char -> boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true)); [EOL]     assertFalse("int -> char", ClassUtils.isAssignable(Integer.class, Character.TYPE, true)); [EOL]     assertFalse("int -> byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true)); [EOL]     assertFalse("int -> short", ClassUtils.isAssignable(Integer.class, Short.TYPE, true)); [EOL]     assertTrue("int -> int", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true)); [EOL]     assertTrue("int -> long", ClassUtils.isAssignable(Integer.class, Long.TYPE, true)); [EOL]     assertTrue("int -> float", ClassUtils.isAssignable(Integer.class, Float.TYPE, true)); [EOL]     assertTrue("int -> double", ClassUtils.isAssignable(Integer.class, Double.TYPE, true)); [EOL]     assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true)); [EOL]     assertFalse("long -> char", ClassUtils.isAssignable(Long.class, Character.TYPE, true)); [EOL]     assertFalse("long -> byte", ClassUtils.isAssignable(Long.class, Byte.TYPE, true)); [EOL]     assertFalse("long -> short", ClassUtils.isAssignable(Long.class, Short.TYPE, true)); [EOL]     assertFalse("long -> int", ClassUtils.isAssignable(Long.class, Integer.TYPE, true)); [EOL]     assertTrue("long -> long", ClassUtils.isAssignable(Long.class, Long.TYPE, true)); [EOL]     assertTrue("long -> float", ClassUtils.isAssignable(Long.class, Float.TYPE, true)); [EOL]     assertTrue("long -> double", ClassUtils.isAssignable(Long.class, Double.TYPE, true)); [EOL]     assertFalse("long -> boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true)); [EOL]     assertFalse("float -> char", ClassUtils.isAssignable(Float.class, Character.TYPE, true)); [EOL]     assertFalse("float -> byte", ClassUtils.isAssignable(Float.class, Byte.TYPE, true)); [EOL]     assertFalse("float -> short", ClassUtils.isAssignable(Float.class, Short.TYPE, true)); [EOL]     assertFalse("float -> int", ClassUtils.isAssignable(Float.class, Integer.TYPE, true)); [EOL]     assertFalse("float -> long", ClassUtils.isAssignable(Float.class, Long.TYPE, true)); [EOL]     assertTrue("float -> float", ClassUtils.isAssignable(Float.class, Float.TYPE, true)); [EOL]     assertTrue("float -> double", ClassUtils.isAssignable(Float.class, Double.TYPE, true)); [EOL]     assertFalse("float -> boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true)); [EOL]     assertFalse("double -> char", ClassUtils.isAssignable(Double.class, Character.TYPE, true)); [EOL]     assertFalse("double -> byte", ClassUtils.isAssignable(Double.class, Byte.TYPE, true)); [EOL]     assertFalse("double -> short", ClassUtils.isAssignable(Double.class, Short.TYPE, true)); [EOL]     assertFalse("double -> int", ClassUtils.isAssignable(Double.class, Integer.TYPE, true)); [EOL]     assertFalse("double -> long", ClassUtils.isAssignable(Double.class, Long.TYPE, true)); [EOL]     assertFalse("double -> float", ClassUtils.isAssignable(Double.class, Float.TYPE, true)); [EOL]     assertTrue("double -> double", ClassUtils.isAssignable(Double.class, Double.TYPE, true)); [EOL]     assertFalse("double -> boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true)); [EOL]     assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true)); [EOL]     assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true)); [EOL]     assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true)); [EOL]     assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true)); [EOL]     assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true)); [EOL]     assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true)); [EOL]     assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true)); [EOL]     assertTrue("boolean -> boolean", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true)); [EOL] }
@Test [EOL] public void testWrappersToPrimitivesNull() { [EOL]     assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives())); [EOL]     final Class<?>[] castNull = ClassUtils.wrappersToPrimitives((Class<?>) null); [EOL]     assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); [EOL] }
@Test [EOL] public void testWrappersToPrimitivesNull() { [EOL]     assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives())); [EOL]     final Class<?>[] castNull = ClassUtils.wrappersToPrimitives((Class<?>) null); [EOL]     assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); [EOL] }
@Test [EOL] public void testWrappersToPrimitivesNull() { [EOL]     assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives())); [EOL]     final Class<?>[] castNull = ClassUtils.wrappersToPrimitives((Class<?>) null); [EOL]     assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); [EOL] }
@Test [EOL] public void testGetClassRawPrimitives() throws ClassNotFoundException { [EOL]     assertEquals(int.class, ClassUtils.getClass("int")); [EOL]     assertEquals(long.class, ClassUtils.getClass("long")); [EOL]     assertEquals(short.class, ClassUtils.getClass("short")); [EOL]     assertEquals(byte.class, ClassUtils.getClass("byte")); [EOL]     assertEquals(char.class, ClassUtils.getClass("char")); [EOL]     assertEquals(float.class, ClassUtils.getClass("float")); [EOL]     assertEquals(double.class, ClassUtils.getClass("double")); [EOL]     assertEquals(boolean.class, ClassUtils.getClass("boolean")); [EOL] }
@Test [EOL] public void testGetClassRawPrimitives() throws ClassNotFoundException { [EOL]     assertEquals(int.class, ClassUtils.getClass("int")); [EOL]     assertEquals(long.class, ClassUtils.getClass("long")); [EOL]     assertEquals(short.class, ClassUtils.getClass("short")); [EOL]     assertEquals(byte.class, ClassUtils.getClass("byte")); [EOL]     assertEquals(char.class, ClassUtils.getClass("char")); [EOL]     assertEquals(float.class, ClassUtils.getClass("float")); [EOL]     assertEquals(double.class, ClassUtils.getClass("double")); [EOL]     assertEquals(boolean.class, ClassUtils.getClass("boolean")); [EOL] }
@Test [EOL] public void testGetClassRawPrimitives() throws ClassNotFoundException { [EOL]     assertEquals(int.class, ClassUtils.getClass("int")); [EOL]     assertEquals(long.class, ClassUtils.getClass("long")); [EOL]     assertEquals(short.class, ClassUtils.getClass("short")); [EOL]     assertEquals(byte.class, ClassUtils.getClass("byte")); [EOL]     assertEquals(char.class, ClassUtils.getClass("char")); [EOL]     assertEquals(float.class, ClassUtils.getClass("float")); [EOL]     assertEquals(double.class, ClassUtils.getClass("double")); [EOL]     assertEquals(boolean.class, ClassUtils.getClass("boolean")); [EOL] }
@Test [EOL] public void testGetClassRawPrimitives() throws ClassNotFoundException { [EOL]     assertEquals(int.class, ClassUtils.getClass("int")); [EOL]     assertEquals(long.class, ClassUtils.getClass("long")); [EOL]     assertEquals(short.class, ClassUtils.getClass("short")); [EOL]     assertEquals(byte.class, ClassUtils.getClass("byte")); [EOL]     assertEquals(char.class, ClassUtils.getClass("char")); [EOL]     assertEquals(float.class, ClassUtils.getClass("float")); [EOL]     assertEquals(double.class, ClassUtils.getClass("double")); [EOL]     assertEquals(boolean.class, ClassUtils.getClass("boolean")); [EOL] }
@Test [EOL] public void testGetClassRawPrimitives() throws ClassNotFoundException { [EOL]     assertEquals(int.class, ClassUtils.getClass("int")); [EOL]     assertEquals(long.class, ClassUtils.getClass("long")); [EOL]     assertEquals(short.class, ClassUtils.getClass("short")); [EOL]     assertEquals(byte.class, ClassUtils.getClass("byte")); [EOL]     assertEquals(char.class, ClassUtils.getClass("char")); [EOL]     assertEquals(float.class, ClassUtils.getClass("float")); [EOL]     assertEquals(double.class, ClassUtils.getClass("double")); [EOL]     assertEquals(boolean.class, ClassUtils.getClass("boolean")); [EOL] }
@Test [EOL] public void testGetPublicMethod() throws Exception { [EOL]     final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]     final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty", new Class[0]); [EOL]     assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); [EOL]     try { [EOL]         isEmptyMethod.invoke(set, new Object[0]); [EOL]     } catch (final java.lang.IllegalAccessException iae) { [EOL]         fail("Should not have thrown IllegalAccessException"); [EOL]     } [EOL]     final Method toStringMethod = ClassUtils.getPublicMethod(Object.class, "toString", new Class[0]); [EOL]     assertEquals(Object.class.getMethod("toString", new Class[0]), toStringMethod); [EOL] }
@Test [EOL] public void testGetPublicMethod() throws Exception { [EOL]     final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]     final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty", new Class[0]); [EOL]     assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); [EOL]     try { [EOL]         isEmptyMethod.invoke(set, new Object[0]); [EOL]     } catch (final java.lang.IllegalAccessException iae) { [EOL]         fail("Should not have thrown IllegalAccessException"); [EOL]     } [EOL]     final Method toStringMethod = ClassUtils.getPublicMethod(Object.class, "toString", new Class[0]); [EOL]     assertEquals(Object.class.getMethod("toString", new Class[0]), toStringMethod); [EOL] }
@Test [EOL] public void testGetClassClassNotFound() throws Exception { [EOL]     assertGetClassThrowsClassNotFound("bool"); [EOL]     assertGetClassThrowsClassNotFound("bool[]"); [EOL]     assertGetClassThrowsClassNotFound("integer[]"); [EOL] }
@Test [EOL] public void test_getPackageCanonicalName_Class() { [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils.class)); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[].class)); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[][].class)); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(int[].class)); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(int[][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Named.class)); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Inner.class)); [EOL] }
@Test [EOL] public void test_getPackageCanonicalName_Class() { [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils.class)); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[].class)); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[][].class)); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(int[].class)); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(int[][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Named.class)); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Inner.class)); [EOL] }
@Test [EOL] public void testGetInterruptedException() throws Exception { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(exec); [EOL]     final CountDownLatch latch1 = new CountDownLatch(1); [EOL]     init.shouldSleep = true; [EOL]     init.start(); [EOL]     final AtomicReference<InterruptedException> iex = new AtomicReference<InterruptedException>(); [EOL]     final Thread getThread = new Thread() { [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 init.get(); [EOL]             } catch (final ConcurrentException cex) { [EOL]                 if (cex.getCause() instanceof InterruptedException) { [EOL]                     iex.set((InterruptedException) cex.getCause()); [EOL]                 } [EOL]             } finally { [EOL]                 assertTrue("Thread not interrupted", isInterrupted()); [EOL]                 latch1.countDown(); [EOL]             } [EOL]         } [EOL]     }; [EOL]     getThread.start(); [EOL]     getThread.interrupt(); [EOL]     latch1.await(); [EOL]     exec.shutdownNow(); [EOL]     exec.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS); [EOL]     assertNotNull("No interrupted exception", iex.get()); [EOL] }
@Test [EOL] public void testGetInterruptedException() throws Exception { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(exec); [EOL]     final CountDownLatch latch1 = new CountDownLatch(1); [EOL]     init.shouldSleep = true; [EOL]     init.start(); [EOL]     final AtomicReference<InterruptedException> iex = new AtomicReference<InterruptedException>(); [EOL]     final Thread getThread = new Thread() { [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 init.get(); [EOL]             } catch (final ConcurrentException cex) { [EOL]                 if (cex.getCause() instanceof InterruptedException) { [EOL]                     iex.set((InterruptedException) cex.getCause()); [EOL]                 } [EOL]             } finally { [EOL]                 assertTrue("Thread not interrupted", isInterrupted()); [EOL]                 latch1.countDown(); [EOL]             } [EOL]         } [EOL]     }; [EOL]     getThread.start(); [EOL]     getThread.interrupt(); [EOL]     latch1.await(); [EOL]     exec.shutdownNow(); [EOL]     exec.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS); [EOL]     assertNotNull("No interrupted exception", iex.get()); [EOL] }
@Test [EOL] public void testGetInterruptedException() throws Exception { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(exec); [EOL]     final CountDownLatch latch1 = new CountDownLatch(1); [EOL]     init.shouldSleep = true; [EOL]     init.start(); [EOL]     final AtomicReference<InterruptedException> iex = new AtomicReference<InterruptedException>(); [EOL]     final Thread getThread = new Thread() { [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 init.get(); [EOL]             } catch (final ConcurrentException cex) { [EOL]                 if (cex.getCause() instanceof InterruptedException) { [EOL]                     iex.set((InterruptedException) cex.getCause()); [EOL]                 } [EOL]             } finally { [EOL]                 assertTrue("Thread not interrupted", isInterrupted()); [EOL]                 latch1.countDown(); [EOL]             } [EOL]         } [EOL]     }; [EOL]     getThread.start(); [EOL]     getThread.interrupt(); [EOL]     latch1.await(); [EOL]     exec.shutdownNow(); [EOL]     exec.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS); [EOL]     assertNotNull("No interrupted exception", iex.get()); [EOL] }
@Test [EOL] public void testGetInterruptedException() throws Exception { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(exec); [EOL]     final CountDownLatch latch1 = new CountDownLatch(1); [EOL]     init.shouldSleep = true; [EOL]     init.start(); [EOL]     final AtomicReference<InterruptedException> iex = new AtomicReference<InterruptedException>(); [EOL]     final Thread getThread = new Thread() { [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 init.get(); [EOL]             } catch (final ConcurrentException cex) { [EOL]                 if (cex.getCause() instanceof InterruptedException) { [EOL]                     iex.set((InterruptedException) cex.getCause()); [EOL]                 } [EOL]             } finally { [EOL]                 assertTrue("Thread not interrupted", isInterrupted()); [EOL]                 latch1.countDown(); [EOL]             } [EOL]         } [EOL]     }; [EOL]     getThread.start(); [EOL]     getThread.interrupt(); [EOL]     latch1.await(); [EOL]     exec.shutdownNow(); [EOL]     exec.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS); [EOL]     assertNotNull("No interrupted exception", iex.get()); [EOL] }
@Test [EOL] public void testGetInterruptedException() throws Exception { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(exec); [EOL]     final CountDownLatch latch1 = new CountDownLatch(1); [EOL]     init.shouldSleep = true; [EOL]     init.start(); [EOL]     final AtomicReference<InterruptedException> iex = new AtomicReference<InterruptedException>(); [EOL]     final Thread getThread = new Thread() { [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 init.get(); [EOL]             } catch (final ConcurrentException cex) { [EOL]                 if (cex.getCause() instanceof InterruptedException) { [EOL]                     iex.set((InterruptedException) cex.getCause()); [EOL]                 } [EOL]             } finally { [EOL]                 assertTrue("Thread not interrupted", isInterrupted()); [EOL]                 latch1.countDown(); [EOL]             } [EOL]         } [EOL]     }; [EOL]     getThread.start(); [EOL]     getThread.interrupt(); [EOL]     latch1.await(); [EOL]     exec.shutdownNow(); [EOL]     exec.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS); [EOL]     assertNotNull("No interrupted exception", iex.get()); [EOL] }
@Test [EOL] public void testGetInterruptedException() throws Exception { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(exec); [EOL]     final CountDownLatch latch1 = new CountDownLatch(1); [EOL]     init.shouldSleep = true; [EOL]     init.start(); [EOL]     final AtomicReference<InterruptedException> iex = new AtomicReference<InterruptedException>(); [EOL]     final Thread getThread = new Thread() { [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 init.get(); [EOL]             } catch (final ConcurrentException cex) { [EOL]                 if (cex.getCause() instanceof InterruptedException) { [EOL]                     iex.set((InterruptedException) cex.getCause()); [EOL]                 } [EOL]             } finally { [EOL]                 assertTrue("Thread not interrupted", isInterrupted()); [EOL]                 latch1.countDown(); [EOL]             } [EOL]         } [EOL]     }; [EOL]     getThread.start(); [EOL]     getThread.interrupt(); [EOL]     latch1.await(); [EOL]     exec.shutdownNow(); [EOL]     exec.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS); [EOL]     assertNotNull("No interrupted exception", iex.get()); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testBelow() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.below('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the below method", "&#65;&#68;FGZ", result); [EOL] }
@Test [EOL] public void testBelow() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.below('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the below method", "&#65;&#68;FGZ", result); [EOL] }
@Test [EOL] public void testBelow() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.below('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the below method", "&#65;&#68;FGZ", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testPutIfAbsentKeyPresent() { [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     map.put(key, value); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.putIfAbsent(map, key, 0)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL] }
@Test [EOL] public void testPutIfAbsentKeyPresent() { [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     map.put(key, value); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.putIfAbsent(map, key, 0)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL] }
@Test [EOL] public void testPutIfAbsentKeyPresent() { [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     map.put(key, value); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.putIfAbsent(map, key, 0)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL] }
@Test [EOL] public void testCreateIfAbsentKeyNotPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     EasyMock.expect(init.get()).andReturn(value); [EOL]     EasyMock.replay(init); [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentKeyNotPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     EasyMock.expect(init.get()).andReturn(value); [EOL]     EasyMock.replay(init); [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentKeyNotPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     EasyMock.expect(init.get()).andReturn(value); [EOL]     EasyMock.replay(init); [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentKeyNotPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     EasyMock.expect(init.get()).andReturn(value); [EOL]     EasyMock.replay(init); [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentUncheckedSuccess() { [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsentUnchecked(map, key, new ConstantInitializer<Integer>(value))); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL] }
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] }
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] }
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] }
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] }
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] }
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] }
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] }
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] }
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testConstructorMapFull() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("name", "commons"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(map, "<", ">", '!'); [EOL]     assertEquals("Hi < commons", sub.replace("Hi !< <name>")); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] }
@Test [EOL] public void testReplaceInVariable() { [EOL]     values.put("animal.1", "fox"); [EOL]     values.put("animal.2", "mouse"); [EOL]     values.put("species", "2"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     sub.setEnableSubstitutionInVariables(true); [EOL]     assertEquals("Wrong result (1)", "The mouse jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL]     values.put("species", "1"); [EOL]     assertEquals("Wrong result (2)", "The fox jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL] }
@Test [EOL] public void testCyclicReplacement() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("animal", "${critter}"); [EOL]     map.put("target", "${pet}"); [EOL]     map.put("pet", "${petCharacteristic} dog"); [EOL]     map.put("petCharacteristic", "lazy"); [EOL]     map.put("critter", "${critterSpeed} ${critterColor} ${critterType}"); [EOL]     map.put("critterSpeed", "quick"); [EOL]     map.put("critterColor", "brown"); [EOL]     map.put("critterType", "${animal}"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(map); [EOL]     try { [EOL]         sub.replace("The ${animal} jumps over the ${target}."); [EOL]         fail("Cyclic replacement was not detected!"); [EOL]     } catch (final IllegalStateException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testCyclicReplacement() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("animal", "${critter}"); [EOL]     map.put("target", "${pet}"); [EOL]     map.put("pet", "${petCharacteristic} dog"); [EOL]     map.put("petCharacteristic", "lazy"); [EOL]     map.put("critter", "${critterSpeed} ${critterColor} ${critterType}"); [EOL]     map.put("critterSpeed", "quick"); [EOL]     map.put("critterColor", "brown"); [EOL]     map.put("critterType", "${animal}"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(map); [EOL]     try { [EOL]         sub.replace("The ${animal} jumps over the ${target}."); [EOL]         fail("Cyclic replacement was not detected!"); [EOL]     } catch (final IllegalStateException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testReplaceInVariable() { [EOL]     values.put("animal.1", "fox"); [EOL]     values.put("animal.2", "mouse"); [EOL]     values.put("species", "2"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     sub.setEnableSubstitutionInVariables(true); [EOL]     assertEquals("Wrong result (1)", "The mouse jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL]     values.put("species", "1"); [EOL]     assertEquals("Wrong result (2)", "The fox jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL] }
@Test [EOL] public void testReplaceInVariable() { [EOL]     values.put("animal.1", "fox"); [EOL]     values.put("animal.2", "mouse"); [EOL]     values.put("species", "2"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     sub.setEnableSubstitutionInVariables(true); [EOL]     assertEquals("Wrong result (1)", "The mouse jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL]     values.put("species", "1"); [EOL]     assertEquals("Wrong result (2)", "The fox jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testFactory_String_proper() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0 0/1"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 1/5"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("7 1/2"); [EOL]     assertEquals(15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 2/4"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction("-7 1/2"); [EOL]     assertEquals(-15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("-1 2/4"); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("a 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 b/4"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_proper() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0 0/1"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 1/5"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("7 1/2"); [EOL]     assertEquals(15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 2/4"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction("-7 1/2"); [EOL]     assertEquals(-15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("-1 2/4"); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("a 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 b/4"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_proper() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0 0/1"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 1/5"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("7 1/2"); [EOL]     assertEquals(15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 2/4"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction("-7 1/2"); [EOL]     assertEquals(-15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("-1 2/4"); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("a 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 b/4"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_proper() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0 0/1"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 1/5"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("7 1/2"); [EOL]     assertEquals(15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 2/4"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction("-7 1/2"); [EOL]     assertEquals(-15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("-1 2/4"); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("a 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 b/4"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_proper() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0 0/1"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 1/5"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("7 1/2"); [EOL]     assertEquals(15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 2/4"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction("-7 1/2"); [EOL]     assertEquals(-15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("-1 2/4"); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("a 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 b/4"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_proper() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0 0/1"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 1/5"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("7 1/2"); [EOL]     assertEquals(15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 2/4"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction("-7 1/2"); [EOL]     assertEquals(-15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("-1 2/4"); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("a 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 b/4"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_proper() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0 0/1"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 1/5"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("7 1/2"); [EOL]     assertEquals(15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 2/4"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction("-7 1/2"); [EOL]     assertEquals(-15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("-1 2/4"); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("a 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 b/4"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     assertFalse(f1.equals(null)); [EOL]     assertFalse(f1.equals(new Object())); [EOL]     assertFalse(f1.equals(Integer.valueOf(6))); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertFalse(f1.equals(f2)); [EOL]     assertTrue(f1.equals(f1)); [EOL]     assertTrue(f2.equals(f2)); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertFalse(f1.equals(f2)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     assertFalse(f1.equals(null)); [EOL]     assertFalse(f1.equals(new Object())); [EOL]     assertFalse(f1.equals(Integer.valueOf(6))); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertFalse(f1.equals(f2)); [EOL]     assertTrue(f1.equals(f1)); [EOL]     assertTrue(f2.equals(f2)); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertFalse(f1.equals(f2)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     assertFalse(f1.equals(null)); [EOL]     assertFalse(f1.equals(new Object())); [EOL]     assertFalse(f1.equals(Integer.valueOf(6))); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertFalse(f1.equals(f2)); [EOL]     assertTrue(f1.equals(f1)); [EOL]     assertTrue(f2.equals(f2)); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertFalse(f1.equals(f2)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     assertFalse(f1.equals(null)); [EOL]     assertFalse(f1.equals(new Object())); [EOL]     assertFalse(f1.equals(Integer.valueOf(6))); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertFalse(f1.equals(f2)); [EOL]     assertTrue(f1.equals(f1)); [EOL]     assertTrue(f2.equals(f2)); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertFalse(f1.equals(f2)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     assertFalse(f1.equals(null)); [EOL]     assertFalse(f1.equals(new Object())); [EOL]     assertFalse(f1.equals(Integer.valueOf(6))); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertFalse(f1.equals(f2)); [EOL]     assertTrue(f1.equals(f1)); [EOL]     assertTrue(f2.equals(f2)); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertFalse(f1.equals(f2)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     assertFalse(f1.equals(null)); [EOL]     assertFalse(f1.equals(new Object())); [EOL]     assertFalse(f1.equals(Integer.valueOf(6))); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertFalse(f1.equals(f2)); [EOL]     assertTrue(f1.equals(f1)); [EOL]     assertTrue(f2.equals(f2)); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertFalse(f1.equals(f2)); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]     assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]     assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]     assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]     assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]     assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testConstructor_charArray_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_charArray_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_charArray_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_charArray_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_charArray_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_charArray_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_charArray_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testReset_charArray() { [EOL]     final StrTokenizer tok = new StrTokenizer("x x x"); [EOL]     final char[] array = new char[] { 'a', 'b', 'c' }; [EOL]     tok.reset(array); [EOL]     assertEquals("abc", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok.reset((char[]) null); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testReset_charArray() { [EOL]     final StrTokenizer tok = new StrTokenizer("x x x"); [EOL]     final char[] array = new char[] { 'a', 'b', 'c' }; [EOL]     tok.reset(array); [EOL]     assertEquals("abc", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok.reset((char[]) null); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void test4() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(true); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", "c", "d;\"e", "f" }; [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", ObjectUtils.equals(expected[i], tokens[i])); [EOL]     } [EOL] }
@Test [EOL] public void testTSVEmpty() { [EOL]     this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]     this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL] }
@Test(timeout = 666000) [EOL] public void testToString() throws Exception { [EOL]     final Test testAnno = getClass().getDeclaredMethod("testToString").getAnnotation(Test.class); [EOL]     final String toString = AnnotationUtils.toString(testAnno); [EOL]     assertTrue(toString.startsWith("@org.junit.Test(")); [EOL]     assertTrue(toString.endsWith(")")); [EOL]     assertTrue(toString.contains("expected=class org.junit.Test$None")); [EOL]     assertTrue(toString.contains("timeout=666000")); [EOL]     assertTrue(toString.contains(", ")); [EOL] }
@Test(timeout = 666000) [EOL] public void testToString() throws Exception { [EOL]     final Test testAnno = getClass().getDeclaredMethod("testToString").getAnnotation(Test.class); [EOL]     final String toString = AnnotationUtils.toString(testAnno); [EOL]     assertTrue(toString.startsWith("@org.junit.Test(")); [EOL]     assertTrue(toString.endsWith(")")); [EOL]     assertTrue(toString.contains("expected=class org.junit.Test$None")); [EOL]     assertTrue(toString.contains("timeout=666000")); [EOL]     assertTrue(toString.contains(", ")); [EOL] }
@Test [EOL] public void testSameInstance() { [EOL]     assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testSameInstance() { [EOL]     assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testSameInstance() { [EOL]     assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testSameInstance() { [EOL]     assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testSameInstance() { [EOL]     assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testSameInstance() { [EOL]     assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testSameInstance() { [EOL]     assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test(timeout = 666000) [EOL] public void testHashCode() throws Exception { [EOL]     final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]     assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]     final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]     final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL] }
@Test(timeout = 666000) [EOL] public void testHashCode() throws Exception { [EOL]     final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]     assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]     final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]     final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL] }
@Test(timeout = 666000) [EOL] public void testHashCode() throws Exception { [EOL]     final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]     assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]     final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]     final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL] }
@Test(timeout = 666000) [EOL] public void testToString() throws Exception { [EOL]     final Test testAnno = getClass().getDeclaredMethod("testToString").getAnnotation(Test.class); [EOL]     final String toString = AnnotationUtils.toString(testAnno); [EOL]     assertTrue(toString.startsWith("@org.junit.Test(")); [EOL]     assertTrue(toString.endsWith(")")); [EOL]     assertTrue(toString.contains("expected=class org.junit.Test$None")); [EOL]     assertTrue(toString.contains("timeout=666000")); [EOL]     assertTrue(toString.contains(", ")); [EOL] }
@Test(timeout = 666000) [EOL] public void testHashCode() throws Exception { [EOL]     final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]     assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]     final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]     final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL] }
@Test(timeout = 666000) [EOL] public void testHashCode() throws Exception { [EOL]     final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]     assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]     final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]     final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL] }
@Test(timeout = 666000) [EOL] public void testHashCode() throws Exception { [EOL]     final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]     assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]     final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]     final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL] }
@Test(timeout = 666000) [EOL] public void testHashCode() throws Exception { [EOL]     final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]     assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]     final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]     final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testToStringContainsName() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD); [EOL]     assertTrue(printer.toString().startsWith("FastDate")); [EOL] }
@Test [EOL] public void testToStringContainsName() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD); [EOL]     assertTrue(printer.toString().startsWith("FastDate")); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] obj1 = new long[2]; [EOL]     obj1[0] = 5L; [EOL]     obj1[1] = 6L; [EOL]     long[] obj2 = new long[2]; [EOL]     obj2[0] = 5L; [EOL]     obj2[1] = 6L; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] obj1 = new long[2]; [EOL]     obj1[0] = 5L; [EOL]     obj1[1] = 6L; [EOL]     long[] obj2 = new long[2]; [EOL]     obj2[0] = 5L; [EOL]     obj2[1] = 6L; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] obj1 = new long[2]; [EOL]     obj1[0] = 5L; [EOL]     obj1[1] = 6L; [EOL]     long[] obj2 = new long[2]; [EOL]     obj2[0] = 5L; [EOL]     obj2[1] = 6L; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] obj1 = new long[2]; [EOL]     obj1[0] = 5L; [EOL]     obj1[1] = 6L; [EOL]     long[] obj2 = new long[2]; [EOL]     obj2[0] = 5L; [EOL]     obj2[1] = 6L; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] obj1 = new long[2]; [EOL]     obj1[0] = 5L; [EOL]     obj1[1] = 6L; [EOL]     long[] obj2 = new long[2]; [EOL]     obj2[0] = 5L; [EOL]     obj2[1] = 6L; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] obj1 = new long[2]; [EOL]     obj1[0] = 5L; [EOL]     obj1[1] = 6L; [EOL]     long[] obj2 = new long[2]; [EOL]     obj2[0] = 5L; [EOL]     obj2[1] = 6L; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] obj1 = new long[2]; [EOL]     obj1[0] = 5L; [EOL]     obj1[1] = 6L; [EOL]     long[] obj2 = new long[2]; [EOL]     obj2[0] = 5L; [EOL]     obj2[1] = 6L; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] obj1 = new float[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     float[] obj2 = new float[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] obj1 = new float[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     float[] obj2 = new float[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] obj1 = new float[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     float[] obj2 = new float[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] obj1 = new float[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     float[] obj2 = new float[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] obj1 = new float[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     float[] obj2 = new float[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] obj1 = new float[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     float[] obj2 = new float[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testBooleanArrayHiddenByObject() { [EOL]     final boolean[] array1 = new boolean[2]; [EOL]     array1[0] = true; [EOL]     array1[1] = false; [EOL]     final boolean[] array2 = new boolean[2]; [EOL]     array2[0] = true; [EOL]     array2[1] = false; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = true; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testSplitMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.splitMatcher(); [EOL]     assertSame(matcher, StrMatcher.splitMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL] }
@Test [EOL] public void testTrimMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.trimMatcher(); [EOL]     assertSame(matcher, StrMatcher.trimMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 10)); [EOL] }
@Test [EOL] public void testDoubleQuoteMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.doubleQuoteMatcher(); [EOL]     assertSame(matcher, StrMatcher.doubleQuoteMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 11)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 12)); [EOL] }
@Test [EOL] public void testQuoteMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.quoteMatcher(); [EOL]     assertSame(matcher, StrMatcher.quoteMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 11)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 12)); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testCharSetMatcher_charArray() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace".toCharArray()); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0])); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a".toCharArray()) instanceof StrMatcher.CharMatcher); [EOL] }
@Test [EOL] public void testCharSetMatcher_charArray() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace".toCharArray()); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0])); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a".toCharArray()) instanceof StrMatcher.CharMatcher); [EOL] }
@Test [EOL] public void testCharSetMatcher_charArray() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace".toCharArray()); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0])); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a".toCharArray()) instanceof StrMatcher.CharMatcher); [EOL] }
@Test [EOL] public void testCharSetMatcher_String() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testSplitMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.splitMatcher(); [EOL]     assertSame(matcher, StrMatcher.splitMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL] }
@Test [EOL] public void testCharSetMatcher_String() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL] }
@Test [EOL] public void testCharSetMatcher_String() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL] }
@Test [EOL] public void testCharSetMatcher_String() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL] }
@Test [EOL] public void testCharSetMatcher_String() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL] }
@Test [EOL] public void testCharSetMatcher_String() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL] }
@Test [EOL] public void testSplitMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.splitMatcher(); [EOL]     assertSame(matcher, StrMatcher.splitMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL] }
@Test [EOL] public void testSplitMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.splitMatcher(); [EOL]     assertSame(matcher, StrMatcher.splitMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL] }
@Test [EOL] public void testSplitMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.splitMatcher(); [EOL]     assertSame(matcher, StrMatcher.splitMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testTrimMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.trimMatcher(); [EOL]     assertSame(matcher, StrMatcher.trimMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 10)); [EOL] }
@Test [EOL] public void testTrimMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.trimMatcher(); [EOL]     assertSame(matcher, StrMatcher.trimMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 10)); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new RandomStringUtils()); [EOL]     final Constructor<?>[] cons = RandomStringUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(RandomStringUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(RandomStringUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("0", new MutableByte((byte) 0).toString()); [EOL]     assertEquals("10", new MutableByte((byte) 10).toString()); [EOL]     assertEquals("-123", new MutableByte((byte) -123).toString()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("0", new MutableByte((byte) 0).toString()); [EOL]     assertEquals("10", new MutableByte((byte) 10).toString()); [EOL]     assertEquals("-123", new MutableByte((byte) -123).toString()); [EOL] }
@Test [EOL] public void test_getEnumMap() { [EOL]     final Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class); [EOL]     assertEquals("getEnumMap not created correctly", "{RED=RED, AMBER=AMBER, GREEN=GREEN}", test.toString()); [EOL]     assertEquals(3, test.size()); [EOL]     assertTrue(test.containsKey("RED")); [EOL]     assertEquals(Traffic.RED, test.get("RED")); [EOL]     assertTrue(test.containsKey("AMBER")); [EOL]     assertEquals(Traffic.AMBER, test.get("AMBER")); [EOL]     assertTrue(test.containsKey("GREEN")); [EOL]     assertEquals(Traffic.GREEN, test.get("GREEN")); [EOL]     assertFalse(test.containsKey("PURPLE")); [EOL] }
@Test [EOL] public void test_isEnum() { [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "RED")); [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "AMBER")); [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "GREEN")); [EOL]     assertFalse(EnumUtils.isValidEnum(Traffic.class, "PURPLE")); [EOL]     assertFalse(EnumUtils.isValidEnum(Traffic.class, null)); [EOL] }
@Test [EOL] public void test_isEnum() { [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "RED")); [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "AMBER")); [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "GREEN")); [EOL]     assertFalse(EnumUtils.isValidEnum(Traffic.class, "PURPLE")); [EOL]     assertFalse(EnumUtils.isValidEnum(Traffic.class, null)); [EOL] }
@Test [EOL] public void test_isEnum() { [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "RED")); [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "AMBER")); [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "GREEN")); [EOL]     assertFalse(EnumUtils.isValidEnum(Traffic.class, "PURPLE")); [EOL]     assertFalse(EnumUtils.isValidEnum(Traffic.class, null)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] }
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] }
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] }
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] }
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] }
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] }
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] }
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] }
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] }
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testToStringCustom() throws Exception { [EOL]     final Calendar date = Calendar.getInstance(); [EOL]     date.set(2011, Calendar.APRIL, 25); [EOL]     final Triple<String, String, Calendar> triple = Triple.of("DOB", "string", date); [EOL]     assertEquals("Test created on " + "04-25-2011", triple.toString("Test created on %3$tm-%3$td-%3$tY")); [EOL] }
@Test [EOL] public void testToStringCustom() throws Exception { [EOL]     final Calendar date = Calendar.getInstance(); [EOL]     date.set(2011, Calendar.APRIL, 25); [EOL]     final Triple<String, String, Calendar> triple = Triple.of("DOB", "string", date); [EOL]     assertEquals("Test created on " + "04-25-2011", triple.toString("Test created on %3$tm-%3$td-%3$tY")); [EOL] }
@Test [EOL] public void testToStringCustom() throws Exception { [EOL]     final Calendar date = Calendar.getInstance(); [EOL]     date.set(2011, Calendar.APRIL, 25); [EOL]     final Triple<String, String, Calendar> triple = Triple.of("DOB", "string", date); [EOL]     assertEquals("Test created on " + "04-25-2011", triple.toString("Test created on %3$tm-%3$td-%3$tY")); [EOL] }
@Test [EOL] public void testReflectionFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testReflectionFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testChar() { [EOL]     assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL] }
@Test [EOL] public void testChar() { [EOL]     assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloat() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL] }
@Test [EOL] public void testChar() { [EOL]     assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL] }
@Test [EOL] public void testChar() { [EOL]     assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL] }
@Test [EOL] public void testFloat() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL] }
@Test [EOL] public void testFloat() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testReflectionFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testParseDate() throws Exception { [EOL]     final GregorianCalendar cal = new GregorianCalendar(1972, 11, 3); [EOL]     String dateStr = "1972-12-03"; [EOL]     final String[] parsers = new String[] { "yyyy'-'DDD", "yyyy'-'MM'-'dd", "yyyyMMdd" }; [EOL]     Date date = DateUtils.parseDate(dateStr, parsers); [EOL]     assertEquals(cal.getTime(), date); [EOL]     dateStr = "1972-338"; [EOL]     date = DateUtils.parseDate(dateStr, parsers); [EOL]     assertEquals(cal.getTime(), date); [EOL]     dateStr = "19721203"; [EOL]     date = DateUtils.parseDate(dateStr, parsers); [EOL]     assertEquals(cal.getTime(), date); [EOL]     try { [EOL]         DateUtils.parseDate("PURPLE", parsers); [EOL]         fail(); [EOL]     } catch (final ParseException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.parseDate("197212AB", parsers); [EOL]         fail(); [EOL]     } catch (final ParseException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.parseDate(null, parsers); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.parseDate(dateStr, (String[]) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.parseDate(dateStr, new String[0]); [EOL]         fail(); [EOL]     } catch (final ParseException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAddMonths() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addMonths(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addMonths(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 7, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addMonths(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 5, 5, 4, 3, 2, 1); [EOL] }
@Test [EOL] public void testAddDays() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addDays(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addDays(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 6, 4, 3, 2, 1); [EOL]     result = DateUtils.addDays(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 4, 4, 3, 2, 1); [EOL] }
@Test [EOL] public void testSetMonths() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setMonths(base, 5); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 5, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.setMonths(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 1, 5, 4, 3, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setMonths(base, 12); [EOL]         fail("DateUtils.setMonths did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSetMonths() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setMonths(base, 5); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 5, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.setMonths(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 1, 5, 4, 3, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setMonths(base, 12); [EOL]         fail("DateUtils.setMonths did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSetDays() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setDays(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 1, 4, 3, 2, 1); [EOL]     result = DateUtils.setDays(base, 29); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 29, 4, 3, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setDays(base, 32); [EOL]         fail("DateUtils.setDays did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSetSeconds() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setSeconds(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 0, 1); [EOL]     result = DateUtils.setSeconds(base, 59); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 59, 1); [EOL]     try { [EOL]         result = DateUtils.setSeconds(base, 60); [EOL]         fail("DateUtils.setSeconds did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSetSeconds() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setSeconds(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 0, 1); [EOL]     result = DateUtils.setSeconds(base, 59); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 59, 1); [EOL]     try { [EOL]         result = DateUtils.setSeconds(base, 60); [EOL]         fail("DateUtils.setSeconds did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testTruncate() throws Exception { [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate(date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate(date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate(date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate(date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate(date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate(date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate(date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate(date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate(date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate(date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate(date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate((Object) date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate((Object) date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("truncate calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.truncate((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate(date3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate((Object) cal3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate(date8, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate((Object) cal8, Calendar.DATE)); [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] }
@Test [EOL] public void testTruncate() throws Exception { [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate(date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate(date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate(date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate(date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate(date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate(date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate(date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate(date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate(date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate(date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate(date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate((Object) date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate((Object) date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("truncate calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.truncate((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate(date3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate((Object) cal3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate(date8, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate((Object) cal8, Calendar.DATE)); [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] }
@Test [EOL] public void testTruncate() throws Exception { [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate(date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate(date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate(date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate(date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate(date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate(date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate(date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate(date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate(date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate(date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate(date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate((Object) date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate((Object) date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("truncate calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.truncate((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate(date3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate((Object) cal3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate(date8, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate((Object) cal8, Calendar.DATE)); [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] }
@Test [EOL] public void testTruncate() throws Exception { [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate(date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate(date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate(date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate(date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate(date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate(date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate(date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate(date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate(date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate(date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate(date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate((Object) date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate((Object) date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("truncate calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.truncate((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate(date3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate((Object) cal3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate(date8, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate((Object) cal8, Calendar.DATE)); [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] }
@Test [EOL] public void testTruncate() throws Exception { [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate(date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate(date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate(date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate(date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate(date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate(date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate(date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate(date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate(date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate(date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate(date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate((Object) date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate((Object) date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("truncate calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.truncate((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate(date3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate((Object) cal3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate(date8, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate((Object) cal8, Calendar.DATE)); [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] }
@Test [EOL] public void testMonthIterator() throws Exception { [EOL]     Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); [EOL]     it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); [EOL] }
@Test [EOL] public void testMonthIterator() throws Exception { [EOL]     Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); [EOL]     it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); [EOL] }
@Test [EOL] public void testMonthIterator() throws Exception { [EOL]     Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); [EOL]     it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); [EOL] }
@Test [EOL] public void testInvalidFragmentWithDate() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testInvalidFragmentWithDate() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testInvalidFragmentWithDate() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testInvalidFragmentWithDate() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testInvalidFragmentWithDate() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testMinutesOfHourWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY); [EOL]     assertEquals(minutes, testResult); [EOL] }
@Test [EOL] public void testInvalidFragmentWithDate() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testMonthIterator() throws Exception { [EOL]     Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); [EOL]     it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); [EOL] }
@Test [EOL] public void testMonthIterator() throws Exception { [EOL]     Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); [EOL]     it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); [EOL] }
@Test [EOL] public void testMonthIterator() throws Exception { [EOL]     Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); [EOL]     it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); [EOL] }
@Test [EOL] public void testMonthIterator() throws Exception { [EOL]     Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); [EOL]     it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); [EOL] }
@Test [EOL] public void testMonthIterator() throws Exception { [EOL]     Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); [EOL]     it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] }
@Test [EOL] public void testSwapCase_String() { [EOL]     assertEquals(null, WordUtils.swapCase(null)); [EOL]     assertEquals("", WordUtils.swapCase("")); [EOL]     assertEquals("  ", WordUtils.swapCase("  ")); [EOL]     assertEquals("i", WordUtils.swapCase("I")); [EOL]     assertEquals("I", WordUtils.swapCase("i")); [EOL]     assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123")); [EOL]     assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123")); [EOL]     assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123")); [EOL]     assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123")); [EOL]     final String test = "This String contains a TitleCase character: \u01C8"; [EOL]     final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]     assertEquals(expect, WordUtils.swapCase(test)); [EOL] }
@Test [EOL] public void testInitializeNested() throws ConcurrentException { [EOL]     final String nameMulti = "multiChildInitializer"; [EOL]     initializer.addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]     final MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer(); [EOL]     final int count = 3; [EOL]     for (int i = 0; i < count; i++) { [EOL]         mi2.addInitializer(CHILD_INIT + i, new ChildBackgroundInitializer()); [EOL]     } [EOL]     initializer.addInitializer(nameMulti, mi2); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     final ExecutorService exec = initializer.getActiveExecutor(); [EOL]     checkChild(res.getInitializer(CHILD_INIT), exec); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res2 = (MultiBackgroundInitializer.MultiBackgroundInitializerResults) res.getResultObject(nameMulti); [EOL]     assertEquals("Wrong number of initializers", count, res2.initializerNames().size()); [EOL]     for (int i = 0; i < count; i++) { [EOL]         checkChild(res2.getInitializer(CHILD_INIT + i), exec); [EOL]     } [EOL]     assertTrue("Executor not shutdown", exec.isShutdown()); [EOL] }
@Test [EOL] public void testInitializeResultsIsSuccessfulFalse() throws ConcurrentException { [EOL]     final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]     child.ex = new Exception(); [EOL]     initializer.addInitializer(CHILD_INIT, child); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertFalse("Wrong success flag", res.isSuccessful()); [EOL] }
@Test [EOL] public void testInitializeResultsIsSuccessfulFalse() throws ConcurrentException { [EOL]     final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]     child.ex = new Exception(); [EOL]     initializer.addInitializer(CHILD_INIT, child); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertFalse("Wrong success flag", res.isSuccessful()); [EOL] }
@Test [EOL] public void testInitializeResultsIsSuccessfulFalse() throws ConcurrentException { [EOL]     final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]     child.ex = new Exception(); [EOL]     initializer.addInitializer(CHILD_INIT, child); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertFalse("Wrong success flag", res.isSuccessful()); [EOL] }
@Test [EOL] public void testInitializeResultsIsSuccessfulFalse() throws ConcurrentException { [EOL]     final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]     child.ex = new Exception(); [EOL]     initializer.addInitializer(CHILD_INIT, child); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertFalse("Wrong success flag", res.isSuccessful()); [EOL] }
@Test [EOL] public void testInitializeResultsIsSuccessfulFalse() throws ConcurrentException { [EOL]     final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]     child.ex = new Exception(); [EOL]     initializer.addInitializer(CHILD_INIT, child); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertFalse("Wrong success flag", res.isSuccessful()); [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLanguagesByCountry() { [EOL]     assertLanguageByCountry(null, new String[0]); [EOL]     assertLanguageByCountry("GB", new String[] { "en" }); [EOL]     assertLanguageByCountry("ZZ", new String[0]); [EOL]     assertLanguageByCountry("CH", new String[] { "fr", "de", "it" }); [EOL] }
@Test [EOL] public void testLanguagesByCountry() { [EOL]     assertLanguageByCountry(null, new String[0]); [EOL]     assertLanguageByCountry("GB", new String[] { "en" }); [EOL]     assertLanguageByCountry("ZZ", new String[0]); [EOL]     assertLanguageByCountry("CH", new String[] { "fr", "de", "it" }); [EOL] }
@Test [EOL] public void testLanguagesByCountry() { [EOL]     assertLanguageByCountry(null, new String[0]); [EOL]     assertLanguageByCountry("GB", new String[] { "en" }); [EOL]     assertLanguageByCountry("ZZ", new String[0]); [EOL]     assertLanguageByCountry("CH", new String[] { "fr", "de", "it" }); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final long[][] array1 = new long[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final long[][] array2 = new long[][] { { 2, 5 }, { 4, 6 } }; [EOL]     assertTrue(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1)); [EOL]     assertFalse(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2)); [EOL]     final Object[] array3 = new Object[] { new String(new char[] { 'A', 'B' }) }; [EOL]     final Object[] array4 = new Object[] { "AB" }; [EOL]     assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3)); [EOL]     assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4)); [EOL]     final Object[] arrayA = new Object[] { new boolean[] { true, false }, new int[] { 6, 7 } }; [EOL]     final Object[] arrayB = new Object[] { new boolean[] { true, false }, new int[] { 6, 7 } }; [EOL]     assertTrue(ArrayUtils.hashCode(arrayB) == ArrayUtils.hashCode(arrayA)); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testCloneByte() { [EOL]     assertEquals(null, ArrayUtils.clone((byte[]) null)); [EOL]     final byte[] original = new byte[] { 1, 6 }; [EOL]     final byte[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneByte() { [EOL]     assertEquals(null, ArrayUtils.clone((byte[]) null)); [EOL]     final byte[] original = new byte[] { 1, 6 }; [EOL]     final byte[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneByte() { [EOL]     assertEquals(null, ArrayUtils.clone((byte[]) null)); [EOL]     final byte[] original = new byte[] { 1, 6 }; [EOL]     final byte[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testNullToEmptyObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null)); [EOL]     final Object[] original = new Object[] { Boolean.TRUE, Boolean.FALSE }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Object[] empty = new Object[] {}; [EOL]     final Object[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null)); [EOL]     final Object[] original = new Object[] { Boolean.TRUE, Boolean.FALSE }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Object[] empty = new Object[] {}; [EOL]     final Object[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null)); [EOL]     final Object[] original = new Object[] { Boolean.TRUE, Boolean.FALSE }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Object[] empty = new Object[] {}; [EOL]     final Object[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyFloat() { [EOL]     assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null)); [EOL]     final float[] original = new float[] { 2.6f, 3.8f }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final float[] empty = new float[] {}; [EOL]     final float[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyCharObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null)); [EOL]     final Character[] original = new Character[] { 'a', 'b' }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Character[] empty = new Character[] {}; [EOL]     final Character[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyCharObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null)); [EOL]     final Character[] original = new Character[] { 'a', 'b' }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Character[] empty = new Character[] {}; [EOL]     final Character[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyCharObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null)); [EOL]     final Character[] original = new Character[] { 'a', 'b' }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Character[] empty = new Character[] {}; [EOL]     final Character[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyDoubleObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]     final Double[] original = new Double[] { 1D, 2D }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Double[] empty = new Double[] {}; [EOL]     final Double[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyDoubleObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]     final Double[] original = new Double[] { 1D, 2D }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Double[] empty = new Double[] {}; [EOL]     final Double[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyDoubleObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]     final Double[] original = new Double[] { 1D, 2D }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Double[] empty = new Double[] {}; [EOL]     final Double[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testSubarrayByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final byte[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final byte[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final byte[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("byte type", byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSubarrayByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final byte[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final byte[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final byte[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("byte type", byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSubarrayByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final byte[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final byte[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final byte[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("byte type", byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSubarrayByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final byte[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final byte[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final byte[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("byte type", byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSubarrayByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final byte[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final byte[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final byte[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("byte type", byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSubarrayDouble() { [EOL]     final double[] nullArray = null; [EOL]     final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; [EOL]     final double[] leftSubarray = { 10.123, 11.234, 12.345, 13.456 }; [EOL]     final double[] midSubarray = { 11.234, 12.345, 13.456, 14.567 }; [EOL]     final double[] rightSubarray = { 12.345, 13.456, 14.567, 15.678 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("double type", double.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testReverseFloat() { [EOL]     float[] array = new float[] { 0.3f, 0.4f, 0.5f }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 0.5f, 0.0f); [EOL]     assertEquals(array[1], 0.4f, 0.0f); [EOL]     assertEquals(array[2], 0.3f, 0.0f); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseFloat() { [EOL]     float[] array = new float[] { 0.3f, 0.4f, 0.5f }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 0.5f, 0.0f); [EOL]     assertEquals(array[1], 0.4f, 0.0f); [EOL]     assertEquals(array[2], 0.3f, 0.0f); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseFloat() { [EOL]     float[] array = new float[] { 0.3f, 0.4f, 0.5f }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 0.5f, 0.0f); [EOL]     assertEquals(array[1], 0.4f, 0.0f); [EOL]     assertEquals(array[2], 0.3f, 0.0f); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testLastIndexOfWithStartIndex() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0", 2)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, "0", 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1", 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2", 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", -1)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray", 5)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1)); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0", 88)); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] }
@Test [EOL] public void testToPrimitive_int() { [EOL]     final Integer[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_int() { [EOL]     final Integer[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_int() { [EOL]     final Integer[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_short() { [EOL]     final Short[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0])); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_short() { [EOL]     final Short[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0])); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_short() { [EOL]     final Short[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0])); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToObject_byte() { [EOL]     final byte[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.toObject(new byte[0])); [EOL]     assertTrue(Arrays.equals(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, ArrayUtils.toObject(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_byte() { [EOL]     final byte[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.toObject(new byte[0])); [EOL]     assertTrue(Arrays.equals(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, ArrayUtils.toObject(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_byte() { [EOL]     final byte[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.toObject(new byte[0])); [EOL]     assertTrue(Arrays.equals(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, ArrayUtils.toObject(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }))); [EOL] }
@Test [EOL] public void testIsEmptyObject() { [EOL]     final Object[] emptyArray = new Object[] {}; [EOL]     final Object[] notEmptyArray = new Object[] { new String("Value") }; [EOL]     assertTrue(ArrayUtils.isEmpty((Object[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyArray)); [EOL] }
@Test [EOL] public void testIsEmptyObject() { [EOL]     final Object[] emptyArray = new Object[] {}; [EOL]     final Object[] notEmptyArray = new Object[] { new String("Value") }; [EOL]     assertTrue(ArrayUtils.isEmpty((Object[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyArray)); [EOL] }
@Test [EOL] public void testIsEmptyObject() { [EOL]     final Object[] emptyArray = new Object[] {}; [EOL]     final Object[] notEmptyArray = new Object[] { new String("Value") }; [EOL]     assertTrue(ArrayUtils.isEmpty((Object[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyArray)); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testIsNotEmptyObject() { [EOL]     final Object[] emptyArray = new Object[] {}; [EOL]     final Object[] notEmptyArray = new Object[] { new String("Value") }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((Object[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyObject() { [EOL]     final Object[] emptyArray = new Object[] {}; [EOL]     final Object[] notEmptyArray = new Object[] { new String("Value") }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((Object[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyObject() { [EOL]     final Object[] emptyArray = new Object[] {}; [EOL]     final Object[] notEmptyArray = new Object[] { new String("Value") }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((Object[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyArray)); [EOL] }
@Test [EOL] public void testJira567() { [EOL]     Number[] n; [EOL]     n = ArrayUtils.addAll(new Number[] { Integer.valueOf(1) }, new Long[] { Long.valueOf(2) }); [EOL]     assertEquals(2, n.length); [EOL]     assertEquals(Number.class, n.getClass().getComponentType()); [EOL]     try { [EOL]         n = ArrayUtils.addAll(new Integer[] { Integer.valueOf(1) }, new Long[] { Long.valueOf(2) }); [EOL]         fail("Should have generated IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException expected) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.remove(inarray, 1); [EOL]     assertEquals(2, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 1); [EOL]     assertEquals(1, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.remove(inarray, 1); [EOL]     assertEquals(2, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 1); [EOL]     assertEquals(1, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.remove(inarray, 1); [EOL]     assertEquals(2, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 1); [EOL]     assertEquals(1, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.remove(inarray, 1); [EOL]     assertEquals(2, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 1); [EOL]     assertEquals(1, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.remove(inarray, 1); [EOL]     assertEquals(2, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 1); [EOL]     assertEquals(1, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.remove(inarray, 1); [EOL]     assertEquals(2, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 1); [EOL]     assertEquals(1, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllShortArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllShortArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllShortArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllShortArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllShortArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllShortArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0); [EOL] }
@Test [EOL] public void testRemoveAllIntArrayRemoveNone() { [EOL]     final int[] array1 = new int[] { 1, 2 }; [EOL]     final int[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(int.class, array2.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllIntArrayRemoveNone() { [EOL]     final int[] array1 = new int[] { 1, 2 }; [EOL]     final int[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(int.class, array2.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllIntArrayRemoveNone() { [EOL]     final int[] array1 = new int[] { 1, 2 }; [EOL]     final int[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(int.class, array2.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllIntArrayRemoveNone() { [EOL]     final int[] array1 = new int[] { 1, 2 }; [EOL]     final int[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(int.class, array2.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllIntArrayRemoveNone() { [EOL]     final int[] array1 = new int[] { 1, 2 }; [EOL]     final int[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(int.class, array2.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllIntArrayRemoveNone() { [EOL]     final int[] array1 = new int[] { 1, 2 }; [EOL]     final int[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(int.class, array2.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeAll(new Object[] { "a" }, 0); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b" }, 0, 1); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c" }, 1, 2); [EOL]     assertArrayEquals(new Object[] { "a" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 1, 2); [EOL]     assertArrayEquals(new Object[] { "a", "d" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 3); [EOL]     assertArrayEquals(new Object[] { "b", "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d", "e" }, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c", "e" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d", "e" }, 0, 2, 4); [EOL]     assertArrayEquals(new Object[] { "b", "d" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 1, 3, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 2, 1, 0, 3); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 2, 0, 1, 3, 0, 2, 1, 3); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeAll(new Object[] { "a" }, 0); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b" }, 0, 1); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c" }, 1, 2); [EOL]     assertArrayEquals(new Object[] { "a" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 1, 2); [EOL]     assertArrayEquals(new Object[] { "a", "d" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 3); [EOL]     assertArrayEquals(new Object[] { "b", "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d", "e" }, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c", "e" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d", "e" }, 0, 2, 4); [EOL]     assertArrayEquals(new Object[] { "b", "d" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 1, 3, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 2, 1, 0, 3); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 2, 0, 1, 3, 0, 2, 1, 3); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeAll(new Object[] { "a" }, 0); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b" }, 0, 1); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c" }, 1, 2); [EOL]     assertArrayEquals(new Object[] { "a" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 1, 2); [EOL]     assertArrayEquals(new Object[] { "a", "d" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 3); [EOL]     assertArrayEquals(new Object[] { "b", "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d", "e" }, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c", "e" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d", "e" }, 0, 2, 4); [EOL]     assertArrayEquals(new Object[] { "b", "d" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 1, 3, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 2, 1, 0, 3); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 2, 0, 1, 3, 0, 2, 1, 3); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@Test [EOL] public void testGetTypeArguments() { [EOL]     Map<TypeVariable<?>, Type> typeVarAssigns; [EOL]     TypeVariable<?> treeSetTypeVar; [EOL]     Type typeArg; [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); [EOL]     treeSetTypeVar = Comparable.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     typeArg = typeVarAssigns.get(treeSetTypeVar); [EOL]     Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar)); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); [EOL]     treeSetTypeVar = Comparable.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     typeArg = typeVarAssigns.get(treeSetTypeVar); [EOL]     Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar)); [EOL]     final Collection<Integer> col = Arrays.asList(new Integer[0]); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class); [EOL]     treeSetTypeVar = Comparable.class.getTypeParameters()[0]; [EOL]     Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class); [EOL]     Assert.assertTrue(typeVarAssigns.size() == 2); [EOL]     Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0])); [EOL]     Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0])); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class); [EOL]     Assert.assertEquals(2, typeVarAssigns.size()); [EOL]     Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0])); [EOL]     Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1])); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(And.class, This.class); [EOL]     Assert.assertEquals(2, typeVarAssigns.size()); [EOL]     Assert.assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[0])); [EOL]     Assert.assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[1])); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(Thing.class, Other.class); [EOL]     Assert.assertEquals(2, typeVarAssigns.size()); [EOL]     Assert.assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(getClass().getTypeParameters()[0])); [EOL]     Assert.assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(Other.class.getTypeParameters()[0])); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] }
@Test [EOL] public void testGetArrayComponentType() throws Exception { [EOL]     final Method method = getClass().getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[0])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[1])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[2])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[3])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[4])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[5])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[6])); [EOL]     Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7])); [EOL]     Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8])); [EOL]     Assert.assertEquals(types[2], TypeUtils.getArrayComponentType(types[9])); [EOL]     Assert.assertEquals(types[3], TypeUtils.getArrayComponentType(types[10])); [EOL]     Assert.assertEquals(types[4], TypeUtils.getArrayComponentType(types[11])); [EOL]     Assert.assertEquals(types[5], TypeUtils.getArrayComponentType(types[12])); [EOL]     Assert.assertEquals(types[6], TypeUtils.getArrayComponentType(types[13])); [EOL] }
@Test [EOL] public void testGetArrayComponentType() throws Exception { [EOL]     final Method method = getClass().getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[0])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[1])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[2])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[3])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[4])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[5])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[6])); [EOL]     Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7])); [EOL]     Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8])); [EOL]     Assert.assertEquals(types[2], TypeUtils.getArrayComponentType(types[9])); [EOL]     Assert.assertEquals(types[3], TypeUtils.getArrayComponentType(types[10])); [EOL]     Assert.assertEquals(types[4], TypeUtils.getArrayComponentType(types[11])); [EOL]     Assert.assertEquals(types[5], TypeUtils.getArrayComponentType(types[12])); [EOL]     Assert.assertEquals(types[6], TypeUtils.getArrayComponentType(types[13])); [EOL] }
@Test [EOL] public void testGetArrayComponentType() throws Exception { [EOL]     final Method method = getClass().getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[0])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[1])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[2])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[3])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[4])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[5])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[6])); [EOL]     Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7])); [EOL]     Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8])); [EOL]     Assert.assertEquals(types[2], TypeUtils.getArrayComponentType(types[9])); [EOL]     Assert.assertEquals(types[3], TypeUtils.getArrayComponentType(types[10])); [EOL]     Assert.assertEquals(types[4], TypeUtils.getArrayComponentType(types[11])); [EOL]     Assert.assertEquals(types[5], TypeUtils.getArrayComponentType(types[12])); [EOL]     Assert.assertEquals(types[6], TypeUtils.getArrayComponentType(types[13])); [EOL] }
@Test [EOL] public void testGetContextLabels() { [EOL]     assertEquals(5, exceptionContext.getContextEntries().size()); [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     final Set<String> labels = exceptionContext.getContextLabels(); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(5, labels.size()); [EOL]     assertTrue(labels.contains("test1")); [EOL]     assertTrue(labels.contains("test2")); [EOL]     assertTrue(labels.contains("test Date")); [EOL]     assertTrue(labels.contains("test Nbr")); [EOL] }
@Test [EOL] public void testGetContextLabels() { [EOL]     assertEquals(5, exceptionContext.getContextEntries().size()); [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     final Set<String> labels = exceptionContext.getContextLabels(); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(5, labels.size()); [EOL]     assertTrue(labels.contains("test1")); [EOL]     assertTrue(labels.contains("test2")); [EOL]     assertTrue(labels.contains("test Date")); [EOL]     assertTrue(labels.contains("test Nbr")); [EOL] }
@Test [EOL] public void testGetContextLabels() { [EOL]     assertEquals(5, exceptionContext.getContextEntries().size()); [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     final Set<String> labels = exceptionContext.getContextLabels(); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(5, labels.size()); [EOL]     assertTrue(labels.contains("test1")); [EOL]     assertTrue(labels.contains("test2")); [EOL]     assertTrue(labels.contains("test Date")); [EOL]     assertTrue(labels.contains("test Nbr")); [EOL] }
@Test [EOL] public void testGetContextLabels() { [EOL]     assertEquals(5, exceptionContext.getContextEntries().size()); [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     final Set<String> labels = exceptionContext.getContextLabels(); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(5, labels.size()); [EOL]     assertTrue(labels.contains("test1")); [EOL]     assertTrue(labels.contains("test2")); [EOL]     assertTrue(labels.contains("test Date")); [EOL]     assertTrue(labels.contains("test Nbr")); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft("foo", -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 1, '-'); [EOL]     assertEquals("o", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 2, '-'); [EOL]     assertEquals("oo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 3, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 4, '-'); [EOL]     assertEquals("-foo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------foo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.setNullText("null"); [EOL]     sb.appendFixedWidthPadLeft(null, 5, '-'); [EOL]     assertEquals("-null", sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_String_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo", 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_String_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo", 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_FormattedString() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("Hello %s", "Alice"); [EOL]     assertEquals("Hello Alice" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_FormattedString() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("Hello %s", "Alice"); [EOL]     assertEquals("Hello Alice" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_FormattedString() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("Hello %s", "Alice"); [EOL]     assertEquals("Hello Alice" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_FormattedString() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("Hello %s", "Alice"); [EOL]     assertEquals("Hello Alice" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppend_StringBuffer_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuffer("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StringBuffer_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuffer("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StringBuffer_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuffer("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StringBuffer_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuffer("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StringBuffer_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuffer("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StringBuffer_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuffer("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppend_CharArray_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((char[]) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new char[] { 'f', 'o', 'o' }, 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new char[] { 'b', 'a', 'r' }, 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new char[] { 'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_Boolean() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(true); [EOL]     assertEquals("true", sb.toString()); [EOL]     sb.append(false); [EOL]     assertEquals("truefalse", sb.toString()); [EOL]     sb.append('!'); [EOL]     assertEquals("truefalse!", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_Boolean() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(true); [EOL]     assertEquals("true", sb.toString()); [EOL]     sb.append(false); [EOL]     assertEquals("truefalse", sb.toString()); [EOL]     sb.append('!'); [EOL]     assertEquals("truefalse!", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_Boolean() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(true); [EOL]     assertEquals("true", sb.toString()); [EOL]     sb.append(false); [EOL]     assertEquals("truefalse", sb.toString()); [EOL]     sb.append('!'); [EOL]     assertEquals("truefalse!", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_Boolean() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(true); [EOL]     assertEquals("true", sb.toString()); [EOL]     sb.append(false); [EOL]     assertEquals("truefalse", sb.toString()); [EOL]     sb.append('!'); [EOL]     assertEquals("truefalse!", sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_String_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo", 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_String_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo", 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_FormattedString() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("Hello %s", "Alice"); [EOL]     assertEquals("Hello Alice" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_FormattedString() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("Hello %s", "Alice"); [EOL]     assertEquals("Hello Alice" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_FormattedString() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("Hello %s", "Alice"); [EOL]     assertEquals("Hello Alice" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_FormattedString() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("Hello %s", "Alice"); [EOL]     assertEquals("Hello Alice" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendSeparator_String_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(",", 0); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(",", 1); [EOL]     assertEquals("foo,", sb.toString()); [EOL]     sb.appendSeparator(",", -1); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_String_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(",", 0); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(",", 1); [EOL]     assertEquals("foo,", sb.toString()); [EOL]     sb.appendSeparator(",", -1); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_String_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(",", 0); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(",", 1); [EOL]     assertEquals("foo,", sb.toString()); [EOL]     sb.appendSeparator(",", -1); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_String_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(",", 0); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(",", 1); [EOL]     assertEquals("foo,", sb.toString()); [EOL]     sb.appendSeparator(",", -1); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testLang299() { [EOL]     final StrBuilder sb = new StrBuilder(1); [EOL]     sb.appendFixedWidthPadRight("foo", 1, '-'); [EOL]     assertEquals("f", sb.toString()); [EOL] }
@Test [EOL] public void testLang299() { [EOL]     final StrBuilder sb = new StrBuilder(1); [EOL]     sb.appendFixedWidthPadRight("foo", 1, '-'); [EOL]     assertEquals("f", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadRight_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadRight(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 1, '-'); [EOL]     assertEquals("1", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 2, '-'); [EOL]     assertEquals("12", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 4, '-'); [EOL]     assertEquals("123-", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("123-------", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadRight_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadRight(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 1, '-'); [EOL]     assertEquals("1", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 2, '-'); [EOL]     assertEquals("12", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 4, '-'); [EOL]     assertEquals("123-", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("123-------", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadRight_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadRight(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 1, '-'); [EOL]     assertEquals("1", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 2, '-'); [EOL]     assertEquals("12", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 4, '-'); [EOL]     assertEquals("123-", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("123-------", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadRight_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadRight(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 1, '-'); [EOL]     assertEquals("1", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 2, '-'); [EOL]     assertEquals("12", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 4, '-'); [EOL]     assertEquals("123-", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("123-------", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteFirst_char() { [EOL]     StrBuilder sb = new StrBuilder("abcba"); [EOL]     sb.deleteFirst('X'); [EOL]     assertEquals("abcba", sb.toString()); [EOL]     sb.deleteFirst('a'); [EOL]     assertEquals("bcba", sb.toString()); [EOL]     sb.deleteFirst('c'); [EOL]     assertEquals("bba", sb.toString()); [EOL]     sb.deleteFirst('b'); [EOL]     assertEquals("ba", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteFirst_char() { [EOL]     StrBuilder sb = new StrBuilder("abcba"); [EOL]     sb.deleteFirst('X'); [EOL]     assertEquals("abcba", sb.toString()); [EOL]     sb.deleteFirst('a'); [EOL]     assertEquals("bcba", sb.toString()); [EOL]     sb.deleteFirst('c'); [EOL]     assertEquals("bba", sb.toString()); [EOL]     sb.deleteFirst('b'); [EOL]     assertEquals("ba", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteFirst_char() { [EOL]     StrBuilder sb = new StrBuilder("abcba"); [EOL]     sb.deleteFirst('X'); [EOL]     assertEquals("abcba", sb.toString()); [EOL]     sb.deleteFirst('a'); [EOL]     assertEquals("bcba", sb.toString()); [EOL]     sb.deleteFirst('c'); [EOL]     assertEquals("bba", sb.toString()); [EOL]     sb.deleteFirst('b'); [EOL]     assertEquals("ba", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("a", "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst("d", null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst("cb", "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("a", "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst("d", null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst("cb", "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("a", "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst("d", null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst("cb", "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("a", "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst("d", null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst("cb", "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("a", "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst("d", null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst("cb", "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(" \u0000 "); [EOL]     assertEquals("", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(" \u0000 "); [EOL]     assertEquals("", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(" \u0000 "); [EOL]     assertEquals("", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(" \u0000 "); [EOL]     assertEquals("", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(" \u0000 "); [EOL]     assertEquals("", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(" \u0000 "); [EOL]     assertEquals("", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(" \u0000 "); [EOL]     assertEquals("", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL] }
@Test [EOL] public void testSubSequenceIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     try { [EOL]         sb.subSequence(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, sb.length() + 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(3, 2); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     assertEquals("hello", sb.subSequence(0, 5)); [EOL]     assertEquals("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6)); [EOL]     assertEquals("goodbye", sb.subSequence(6, 13)); [EOL]     assertEquals("hello goodbye".subSequence(6, 13), sb.subSequence(6, 13)); [EOL] }
@Test [EOL] public void testSubSequenceIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     try { [EOL]         sb.subSequence(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, sb.length() + 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(3, 2); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     assertEquals("hello", sb.subSequence(0, 5)); [EOL]     assertEquals("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6)); [EOL]     assertEquals("goodbye", sb.subSequence(6, 13)); [EOL]     assertEquals("hello goodbye".subSequence(6, 13), sb.subSequence(6, 13)); [EOL] }
@Test [EOL] public void testSubSequenceIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     try { [EOL]         sb.subSequence(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, sb.length() + 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(3, 2); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     assertEquals("hello", sb.subSequence(0, 5)); [EOL]     assertEquals("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6)); [EOL]     assertEquals("goodbye", sb.subSequence(6, 13)); [EOL]     assertEquals("hello goodbye".subSequence(6, 13), sb.subSequence(6, 13)); [EOL] }
@Test [EOL] public void testSubSequenceIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     try { [EOL]         sb.subSequence(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, sb.length() + 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(3, 2); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     assertEquals("hello", sb.subSequence(0, 5)); [EOL]     assertEquals("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6)); [EOL]     assertEquals("goodbye", sb.subSequence(6, 13)); [EOL]     assertEquals("hello goodbye".subSequence(6, 13), sb.subSequence(6, 13)); [EOL] }
@Test [EOL] public void testRightString() { [EOL]     final StrBuilder sb = new StrBuilder("left right"); [EOL]     assertEquals("right", sb.rightString(5)); [EOL]     assertEquals("", sb.rightString(0)); [EOL]     assertEquals("", sb.rightString(-5)); [EOL]     assertEquals("left right", sb.rightString(15)); [EOL] }
@Test [EOL] public void testContains_String() { [EOL]     final StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]     assertTrue(sb.contains("a")); [EOL]     assertTrue(sb.contains("pq")); [EOL]     assertTrue(sb.contains("z")); [EOL]     assertFalse(sb.contains("zyx")); [EOL]     assertFalse(sb.contains((String) null)); [EOL] }
@Test [EOL] public void testContains_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]     assertTrue(sb.contains(StrMatcher.charMatcher('a'))); [EOL]     assertTrue(sb.contains(StrMatcher.stringMatcher("pq"))); [EOL]     assertTrue(sb.contains(StrMatcher.charMatcher('z'))); [EOL]     assertFalse(sb.contains(StrMatcher.stringMatcher("zy"))); [EOL]     assertFalse(sb.contains((StrMatcher) null)); [EOL]     sb = new StrBuilder(); [EOL]     assertFalse(sb.contains(A_NUMBER_MATCHER)); [EOL]     sb.append("B A1 C"); [EOL]     assertTrue(sb.contains(A_NUMBER_MATCHER)); [EOL] }
@Test [EOL] public void testContains_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]     assertTrue(sb.contains(StrMatcher.charMatcher('a'))); [EOL]     assertTrue(sb.contains(StrMatcher.stringMatcher("pq"))); [EOL]     assertTrue(sb.contains(StrMatcher.charMatcher('z'))); [EOL]     assertFalse(sb.contains(StrMatcher.stringMatcher("zy"))); [EOL]     assertFalse(sb.contains((StrMatcher) null)); [EOL]     sb = new StrBuilder(); [EOL]     assertFalse(sb.contains(A_NUMBER_MATCHER)); [EOL]     sb.append("B A1 C"); [EOL]     assertTrue(sb.contains(A_NUMBER_MATCHER)); [EOL] }
@Test [EOL] public void testContains_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]     assertTrue(sb.contains(StrMatcher.charMatcher('a'))); [EOL]     assertTrue(sb.contains(StrMatcher.stringMatcher("pq"))); [EOL]     assertTrue(sb.contains(StrMatcher.charMatcher('z'))); [EOL]     assertFalse(sb.contains(StrMatcher.stringMatcher("zy"))); [EOL]     assertFalse(sb.contains((StrMatcher) null)); [EOL]     sb = new StrBuilder(); [EOL]     assertFalse(sb.contains(A_NUMBER_MATCHER)); [EOL]     sb.append("B A1 C"); [EOL]     assertTrue(sb.contains(A_NUMBER_MATCHER)); [EOL] }
@Test [EOL] public void testLastIndexOf_String() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf("a")); [EOL]     assertEquals("abab".lastIndexOf("a"), sb.lastIndexOf("a")); [EOL]     assertEquals(2, sb.lastIndexOf("ab")); [EOL]     assertEquals("abab".lastIndexOf("ab"), sb.lastIndexOf("ab")); [EOL]     assertEquals(3, sb.lastIndexOf("b")); [EOL]     assertEquals("abab".lastIndexOf("b"), sb.lastIndexOf("b")); [EOL]     assertEquals(1, sb.lastIndexOf("ba")); [EOL]     assertEquals("abab".lastIndexOf("ba"), sb.lastIndexOf("ba")); [EOL]     assertEquals(-1, sb.lastIndexOf("z")); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null)); [EOL] }
@Test [EOL] public void testLastIndexOf_String() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf("a")); [EOL]     assertEquals("abab".lastIndexOf("a"), sb.lastIndexOf("a")); [EOL]     assertEquals(2, sb.lastIndexOf("ab")); [EOL]     assertEquals("abab".lastIndexOf("ab"), sb.lastIndexOf("ab")); [EOL]     assertEquals(3, sb.lastIndexOf("b")); [EOL]     assertEquals("abab".lastIndexOf("b"), sb.lastIndexOf("b")); [EOL]     assertEquals(1, sb.lastIndexOf("ba")); [EOL]     assertEquals("abab".lastIndexOf("ba"), sb.lastIndexOf("ba")); [EOL]     assertEquals(-1, sb.lastIndexOf("z")); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null)); [EOL] }
@Test [EOL] public void testLastIndexOf_String() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf("a")); [EOL]     assertEquals("abab".lastIndexOf("a"), sb.lastIndexOf("a")); [EOL]     assertEquals(2, sb.lastIndexOf("ab")); [EOL]     assertEquals("abab".lastIndexOf("ab"), sb.lastIndexOf("ab")); [EOL]     assertEquals(3, sb.lastIndexOf("b")); [EOL]     assertEquals("abab".lastIndexOf("b"), sb.lastIndexOf("b")); [EOL]     assertEquals(1, sb.lastIndexOf("ba")); [EOL]     assertEquals("abab".lastIndexOf("ba"), sb.lastIndexOf("ba")); [EOL]     assertEquals(-1, sb.lastIndexOf("z")); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null)); [EOL] }
@Test [EOL] public void testLastIndexOf_String() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf("a")); [EOL]     assertEquals("abab".lastIndexOf("a"), sb.lastIndexOf("a")); [EOL]     assertEquals(2, sb.lastIndexOf("ab")); [EOL]     assertEquals("abab".lastIndexOf("ab"), sb.lastIndexOf("ab")); [EOL]     assertEquals(3, sb.lastIndexOf("b")); [EOL]     assertEquals("abab".lastIndexOf("b"), sb.lastIndexOf("b")); [EOL]     assertEquals(1, sb.lastIndexOf("ba")); [EOL]     assertEquals("abab".lastIndexOf("ba"), sb.lastIndexOf("ba")); [EOL]     assertEquals(-1, sb.lastIndexOf("z")); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null)); [EOL] }
@Test [EOL] public void testEqualsIgnoreCase() { [EOL]     final StrBuilder sb1 = new StrBuilder(); [EOL]     final StrBuilder sb2 = new StrBuilder(); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]     assertTrue(sb2.equalsIgnoreCase(sb2)); [EOL]     sb1.append("abc"); [EOL]     assertFalse(sb1.equalsIgnoreCase(sb2)); [EOL]     sb2.append("ABC"); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]     sb2.clear().append("abc"); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]     assertTrue(sb2.equalsIgnoreCase(sb2)); [EOL]     sb2.clear().append("aBc"); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL] }
@Test [EOL] public void testToStringBuffer() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString()); [EOL]     sb.append("junit"); [EOL]     assertEquals(new StringBuffer("junit").toString(), sb.toStringBuffer().toString()); [EOL] }
@Test [EOL] public void testToStringBuffer() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString()); [EOL]     sb.append("junit"); [EOL]     assertEquals(new StringBuffer("junit").toString(), sb.toStringBuffer().toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] }
@Test [EOL] public void testCheckDefaults() { [EOL]     final FastDateFormat format = FastDateFormat.getInstance(); [EOL]     final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]     assertEquals(medium, format); [EOL]     final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]     assertEquals(sdf.toPattern(), format.getPattern()); [EOL]     assertEquals(Locale.getDefault(), format.getLocale()); [EOL]     assertEquals(TimeZone.getDefault(), format.getTimeZone()); [EOL] }
@Test [EOL] public void testCheckDefaults() { [EOL]     final FastDateFormat format = FastDateFormat.getInstance(); [EOL]     final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]     assertEquals(medium, format); [EOL]     final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]     assertEquals(sdf.toPattern(), format.getPattern()); [EOL]     assertEquals(Locale.getDefault(), format.getLocale()); [EOL]     assertEquals(TimeZone.getDefault(), format.getTimeZone()); [EOL] }
@Test [EOL] public void testCheckDefaults() { [EOL]     final FastDateFormat format = FastDateFormat.getInstance(); [EOL]     final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]     assertEquals(medium, format); [EOL]     final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]     assertEquals(sdf.toPattern(), format.getPattern()); [EOL]     assertEquals(Locale.getDefault(), format.getLocale()); [EOL]     assertEquals(TimeZone.getDefault(), format.getTimeZone()); [EOL] }
@Test [EOL] public void testCheckDefaults() { [EOL]     final FastDateFormat format = FastDateFormat.getInstance(); [EOL]     final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]     assertEquals(medium, format); [EOL]     final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]     assertEquals(sdf.toPattern(), format.getPattern()); [EOL]     assertEquals(Locale.getDefault(), format.getLocale()); [EOL]     assertEquals(TimeZone.getDefault(), format.getTimeZone()); [EOL] }
@Test [EOL] public void testCheckDefaults() { [EOL]     final FastDateFormat format = FastDateFormat.getInstance(); [EOL]     final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]     assertEquals(medium, format); [EOL]     final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]     assertEquals(sdf.toPattern(), format.getPattern()); [EOL]     assertEquals(Locale.getDefault(), format.getLocale()); [EOL]     assertEquals(TimeZone.getDefault(), format.getTimeZone()); [EOL] }
@Test [EOL] public void testCheckDefaults() { [EOL]     final FastDateFormat format = FastDateFormat.getInstance(); [EOL]     final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]     assertEquals(medium, format); [EOL]     final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]     assertEquals(sdf.toPattern(), format.getPattern()); [EOL]     assertEquals(Locale.getDefault(), format.getLocale()); [EOL]     assertEquals(TimeZone.getDefault(), format.getTimeZone()); [EOL] }
@Test [EOL] public void testCheckDefaults() { [EOL]     final FastDateFormat format = FastDateFormat.getInstance(); [EOL]     final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]     assertEquals(medium, format); [EOL]     final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]     assertEquals(sdf.toPattern(), format.getPattern()); [EOL]     assertEquals(Locale.getDefault(), format.getLocale()); [EOL]     assertEquals(TimeZone.getDefault(), format.getTimeZone()); [EOL] }
@Test [EOL] public void testCheckDefaults() { [EOL]     final FastDateFormat format = FastDateFormat.getInstance(); [EOL]     final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]     assertEquals(medium, format); [EOL]     final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]     assertEquals(sdf.toPattern(), format.getPattern()); [EOL]     assertEquals(Locale.getDefault(), format.getLocale()); [EOL]     assertEquals(TimeZone.getDefault(), format.getTimeZone()); [EOL] }
@Test [EOL] public void testToStringContainsName() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD); [EOL]     assertTrue(printer.toString().startsWith("FastDate")); [EOL] }
@Test [EOL] public void testDefault() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(); [EOL]     assertNull(triple.getLeft()); [EOL]     assertNull(triple.getMiddle()); [EOL]     assertNull(triple.getRight()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetDeclaredFieldAccessIllegalArgumentException1() { [EOL]     FieldUtils.getDeclaredField(null, "none"); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetDeclaredFieldAccessIllegalArgumentException1() { [EOL]     FieldUtils.getDeclaredField(null, "none"); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetDeclaredFieldAccessIllegalArgumentException1() { [EOL]     FieldUtils.getDeclaredField(null, "none"); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetDeclaredFieldAccessIllegalArgumentException1() { [EOL]     FieldUtils.getDeclaredField(null, "none"); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetDeclaredFieldAccessIllegalArgumentException1() { [EOL]     FieldUtils.getDeclaredField(null, "none"); [EOL] }
@Test [EOL] public void testGetAllFields() { [EOL]     assertArrayEquals(new Field[0], FieldUtils.getAllFields(Object.class)); [EOL]     final Field[] fieldsNumber = Number.class.getDeclaredFields(); [EOL]     assertArrayEquals(fieldsNumber, FieldUtils.getAllFields(Number.class)); [EOL]     final Field[] fieldsInteger = Integer.class.getDeclaredFields(); [EOL]     assertArrayEquals(ArrayUtils.addAll(fieldsInteger, fieldsNumber), FieldUtils.getAllFields(Integer.class)); [EOL]     assertEquals(5, FieldUtils.getAllFields(PublicChild.class).length); [EOL] }
@Test [EOL] public void testReadFieldForceAccess() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     parentS.setAccessible(false); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild, true)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     parentB.setAccessible(false); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     parentI.setAccessible(false); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild, true)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     parentD.setAccessible(false); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild, true)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild, true); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadFieldForceAccess() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     parentS.setAccessible(false); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild, true)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     parentB.setAccessible(false); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     parentI.setAccessible(false); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild, true)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     parentD.setAccessible(false); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild, true)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild, true); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadFieldForceAccess() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     parentS.setAccessible(false); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild, true)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     parentB.setAccessible(false); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     parentI.setAccessible(false); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild, true)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     parentD.setAccessible(false); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild, true)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild, true); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainer.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainer.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainer.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainer.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainer.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainer.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructor_String_simple() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance((String) null); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance(""); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance("a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a", array[0].toString()); [EOL]     set = CharSet.getInstance("^a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a", array[0].toString()); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a-e", array[0].toString()); [EOL]     set = CharSet.getInstance("^a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a-e", array[0].toString()); [EOL] }
@Test [EOL] public void testConstructor_String_simple() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance((String) null); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance(""); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance("a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a", array[0].toString()); [EOL]     set = CharSet.getInstance("^a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a", array[0].toString()); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a-e", array[0].toString()); [EOL]     set = CharSet.getInstance("^a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a-e", array[0].toString()); [EOL] }
@Test [EOL] public void testConstructor_String_simple() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance((String) null); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance(""); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance("a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a", array[0].toString()); [EOL]     set = CharSet.getInstance("^a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a", array[0].toString()); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a-e", array[0].toString()); [EOL]     set = CharSet.getInstance("^a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a-e", array[0].toString()); [EOL] }
@Test [EOL] public void testConstructor_String_simple() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance((String) null); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance(""); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance("a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a", array[0].toString()); [EOL]     set = CharSet.getInstance("^a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a", array[0].toString()); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a-e", array[0].toString()); [EOL]     set = CharSet.getInstance("^a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a-e", array[0].toString()); [EOL] }
@Test [EOL] public void testConstructor_String_simple() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance((String) null); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance(""); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance("a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a", array[0].toString()); [EOL]     set = CharSet.getInstance("^a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a", array[0].toString()); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a-e", array[0].toString()); [EOL]     set = CharSet.getInstance("^a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a-e", array[0].toString()); [EOL] }
@Test [EOL] public void testConstructor_String_simple() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance((String) null); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance(""); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance("a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a", array[0].toString()); [EOL]     set = CharSet.getInstance("^a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a", array[0].toString()); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a-e", array[0].toString()); [EOL]     set = CharSet.getInstance("^a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a-e", array[0].toString()); [EOL] }
@Test [EOL] public void testContextedException() { [EOL]     exceptionContext = new ContextedException(); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(StringUtils.isEmpty(message)); [EOL] }
@Test [EOL] public void testContextedExceptionThrowable() { [EOL]     exceptionContext = new ContextedException(new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionThrowable() { [EOL]     exceptionContext = new ContextedException(new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(MutablePair.of(null, "foo").hashCode(), MutablePair.of(null, "foo").hashCode()); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(MutablePair.of(null, "foo").hashCode(), MutablePair.of(null, "foo").hashCode()); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(MutablePair.of(null, "foo").hashCode(), MutablePair.of(null, "foo").hashCode()); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(MutablePair.of(null, "foo").hashCode(), MutablePair.of(null, "foo").hashCode()); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(MutablePair.of(null, "foo").hashCode(), MutablePair.of(null, "foo").hashCode()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, "foo"); [EOL]     pair.setLeft(42); [EOL]     pair.setRight("bar"); [EOL]     assertEquals(42, pair.getLeft().intValue()); [EOL]     assertEquals("bar", pair.getRight()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, "foo"); [EOL]     pair.setLeft(42); [EOL]     pair.setRight("bar"); [EOL]     assertEquals(42, pair.getLeft().intValue()); [EOL]     assertEquals("bar", pair.getRight()); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(MutablePair.of(null, "foo").hashCode(), MutablePair.of(null, "foo").hashCode()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, "foo"); [EOL]     pair.setLeft(42); [EOL]     pair.setRight("bar"); [EOL]     assertEquals(42, pair.getLeft().intValue()); [EOL]     assertEquals("bar", pair.getRight()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] }
@Test [EOL] public void testInvokeExactConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testGetAccessibleConstructorFromDescription() throws Exception { [EOL]     assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class, ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL] }
@Test [EOL] public void testGetAccessibleConstructorFromDescription() throws Exception { [EOL]     assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class, ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL] }
@Test [EOL] public void testGetAccessibleConstructorFromDescription() throws Exception { [EOL]     assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class, ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL] }
@Test [EOL] public void testNotSupported() { [EOL]     assertFalse(CharEncoding.isSupported(null)); [EOL]     assertFalse(CharEncoding.isSupported("")); [EOL]     assertFalse(CharEncoding.isSupported(" ")); [EOL]     assertFalse(CharEncoding.isSupported("\t\r\n")); [EOL]     assertFalse(CharEncoding.isSupported("DOESNOTEXIST")); [EOL]     assertFalse(CharEncoding.isSupported("this is not a valid encoding name")); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testInitExecutorNullCallable() { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     new CallableBackgroundInitializer<Integer>(null, exec); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testInitExecutorNullCallable() { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     new CallableBackgroundInitializer<Integer>(null, exec); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final long[][] array1 = new long[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final long[][] array2 = new long[][] { { 2, 5 }, { 4, 6 } }; [EOL]     assertTrue(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1)); [EOL]     assertFalse(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2)); [EOL]     final Object[] array3 = new Object[] { new String(new char[] { 'A', 'B' }) }; [EOL]     final Object[] array4 = new Object[] { "AB" }; [EOL]     assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3)); [EOL]     assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4)); [EOL]     final Object[] arrayA = new Object[] { new boolean[] { true, false }, new int[] { 6, 7 } }; [EOL]     final Object[] arrayB = new Object[] { new boolean[] { true, false }, new int[] { 6, 7 } }; [EOL]     assertTrue(ArrayUtils.hashCode(arrayB) == ArrayUtils.hashCode(arrayA)); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode()); [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode()); [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode()); [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testDeserializeStream() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray()); [EOL]     final Object test = SerializationUtils.deserialize(inTest); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testDeserializeStream() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray()); [EOL]     final Object test = SerializationUtils.deserialize(inTest); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testDeserializeStream() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray()); [EOL]     final Object test = SerializationUtils.deserialize(inTest); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testDeserializeStream() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray()); [EOL]     final Object test = SerializationUtils.deserialize(inTest); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testDeserializeStream() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray()); [EOL]     final Object test = SerializationUtils.deserialize(inTest); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testIsAsciiAlphanumeric_char() { [EOL]     assertTrue(CharUtils.isAsciiAlphanumeric('a')); [EOL]     assertTrue(CharUtils.isAsciiAlphanumeric('A')); [EOL]     assertTrue(CharUtils.isAsciiAlphanumeric('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphanumeric('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphanumeric('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphanumeric(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) { [EOL]             assertTrue(CharUtils.isAsciiAlphanumeric((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphanumeric((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] }
@Test [EOL] public void testIsStartedBy() { [EOL]     assertFalse(intRange.isStartedBy(null)); [EOL]     assertFalse(intRange.isStartedBy(5)); [EOL]     assertTrue(intRange.isStartedBy(10)); [EOL]     assertFalse(intRange.isStartedBy(15)); [EOL]     assertFalse(intRange.isStartedBy(20)); [EOL]     assertFalse(intRange.isStartedBy(25)); [EOL] }
@Test [EOL] public void testIsEndedBy() { [EOL]     assertFalse(intRange.isEndedBy(null)); [EOL]     assertFalse(intRange.isEndedBy(5)); [EOL]     assertFalse(intRange.isEndedBy(10)); [EOL]     assertFalse(intRange.isEndedBy(15)); [EOL]     assertTrue(intRange.isEndedBy(20)); [EOL]     assertFalse(intRange.isEndedBy(25)); [EOL] }
@Test [EOL] public void testElementCompareTo() { [EOL]     try { [EOL]         intRange.elementCompareTo(null); [EOL]         fail("NullPointerException should have been thrown"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     assertEquals(-1, intRange.elementCompareTo(5)); [EOL]     assertEquals(0, intRange.elementCompareTo(10)); [EOL]     assertEquals(0, intRange.elementCompareTo(15)); [EOL]     assertEquals(0, intRange.elementCompareTo(20)); [EOL]     assertEquals(1, intRange.elementCompareTo(25)); [EOL] }
@Test [EOL] public void testElementCompareTo() { [EOL]     try { [EOL]         intRange.elementCompareTo(null); [EOL]         fail("NullPointerException should have been thrown"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     assertEquals(-1, intRange.elementCompareTo(5)); [EOL]     assertEquals(0, intRange.elementCompareTo(10)); [EOL]     assertEquals(0, intRange.elementCompareTo(15)); [EOL]     assertEquals(0, intRange.elementCompareTo(20)); [EOL]     assertEquals(1, intRange.elementCompareTo(25)); [EOL] }
@Test [EOL] public void testElementCompareTo() { [EOL]     try { [EOL]         intRange.elementCompareTo(null); [EOL]         fail("NullPointerException should have been thrown"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     assertEquals(-1, intRange.elementCompareTo(5)); [EOL]     assertEquals(0, intRange.elementCompareTo(10)); [EOL]     assertEquals(0, intRange.elementCompareTo(15)); [EOL]     assertEquals(0, intRange.elementCompareTo(20)); [EOL]     assertEquals(1, intRange.elementCompareTo(25)); [EOL] }
@Test [EOL] public void testElementCompareTo() { [EOL]     try { [EOL]         intRange.elementCompareTo(null); [EOL]         fail("NullPointerException should have been thrown"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     assertEquals(-1, intRange.elementCompareTo(5)); [EOL]     assertEquals(0, intRange.elementCompareTo(10)); [EOL]     assertEquals(0, intRange.elementCompareTo(15)); [EOL]     assertEquals(0, intRange.elementCompareTo(20)); [EOL]     assertEquals(1, intRange.elementCompareTo(25)); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] }
@Test [EOL] public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception { [EOL]     final SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture(); [EOL]     assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString()); [EOL] }
@Test [EOL] public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception { [EOL]     final SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture(); [EOL]     assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString()); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void testAtLeast() { [EOL]     assertFalse("1.2 at least 1.5 passed", JAVA_1_2.atLeast(JAVA_1_5)); [EOL]     assertTrue("1.5 at least 1.2 failed", JAVA_1_5.atLeast(JAVA_1_2)); [EOL]     assertFalse("1.6 at least 1.7 passed", JAVA_1_6.atLeast(JAVA_1_7)); [EOL]     assertTrue("0.9 at least 1.5 failed", JAVA_0_9.atLeast(JAVA_1_5)); [EOL]     assertFalse("0.9 at least 1.6 passed", JAVA_0_9.atLeast(JAVA_1_6)); [EOL] }
@Test [EOL] public void testAtLeast() { [EOL]     assertFalse("1.2 at least 1.5 passed", JAVA_1_2.atLeast(JAVA_1_5)); [EOL]     assertTrue("1.5 at least 1.2 failed", JAVA_1_5.atLeast(JAVA_1_2)); [EOL]     assertFalse("1.6 at least 1.7 passed", JAVA_1_6.atLeast(JAVA_1_7)); [EOL]     assertTrue("0.9 at least 1.5 failed", JAVA_0_9.atLeast(JAVA_1_5)); [EOL]     assertFalse("0.9 at least 1.6 passed", JAVA_0_9.atLeast(JAVA_1_6)); [EOL] }
@Test [EOL] public void testAtLeast() { [EOL]     assertFalse("1.2 at least 1.5 passed", JAVA_1_2.atLeast(JAVA_1_5)); [EOL]     assertTrue("1.5 at least 1.2 failed", JAVA_1_5.atLeast(JAVA_1_2)); [EOL]     assertFalse("1.6 at least 1.7 passed", JAVA_1_6.atLeast(JAVA_1_7)); [EOL]     assertTrue("0.9 at least 1.5 failed", JAVA_0_9.atLeast(JAVA_1_5)); [EOL]     assertFalse("0.9 at least 1.6 passed", JAVA_0_9.atLeast(JAVA_1_6)); [EOL] }
@Test [EOL] public void testIncrement() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.add(Long.valueOf(1)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testToLong() { [EOL]     assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong()); [EOL]     assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong()); [EOL] }
@Test [EOL] public void testToLong() { [EOL]     assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong()); [EOL]     assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong()); [EOL] }
@Test [EOL] public void testToLong() { [EOL]     assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong()); [EOL]     assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong()); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     mutNum.compareTo(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     mutNum.compareTo(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     mutNum.compareTo(null); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testHashCodeMulti_multiple_likeList() { [EOL]     final List<Object> list0 = new ArrayList<Object>(Arrays.asList()); [EOL]     assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti()); [EOL]     final List<Object> list1 = new ArrayList<Object>(Arrays.asList("a")); [EOL]     assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti("a")); [EOL]     final List<Object> list2 = new ArrayList<Object>(Arrays.asList("a", "b")); [EOL]     assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti("a", "b")); [EOL]     final List<Object> list3 = new ArrayList<Object>(Arrays.asList("a", "b", "c")); [EOL]     assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti("a", "b", "c")); [EOL] }
@Test [EOL] public void testHashCodeMulti_multiple_likeList() { [EOL]     final List<Object> list0 = new ArrayList<Object>(Arrays.asList()); [EOL]     assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti()); [EOL]     final List<Object> list1 = new ArrayList<Object>(Arrays.asList("a")); [EOL]     assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti("a")); [EOL]     final List<Object> list2 = new ArrayList<Object>(Arrays.asList("a", "b")); [EOL]     assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti("a", "b")); [EOL]     final List<Object> list3 = new ArrayList<Object>(Arrays.asList("a", "b", "c")); [EOL]     assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti("a", "b", "c")); [EOL] }
@Test [EOL] public void testHashCodeMulti_multiple_likeList() { [EOL]     final List<Object> list0 = new ArrayList<Object>(Arrays.asList()); [EOL]     assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti()); [EOL]     final List<Object> list1 = new ArrayList<Object>(Arrays.asList("a")); [EOL]     assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti("a")); [EOL]     final List<Object> list2 = new ArrayList<Object>(Arrays.asList("a", "b")); [EOL]     assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti("a", "b")); [EOL]     final List<Object> list3 = new ArrayList<Object>(Arrays.asList("a", "b", "c")); [EOL]     assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti("a", "b", "c")); [EOL] }
@Test [EOL] public void testIdentityToStringStrBuilder() { [EOL]     final Integer i = Integer.valueOf(102); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     final StrBuilder builder = new StrBuilder(); [EOL]     ObjectUtils.identityToString(builder, i); [EOL]     assertEquals(expected, builder.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StrBuilder) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StrBuilder(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] }
@Test [EOL] public void testIdentityToStringStrBuilder() { [EOL]     final Integer i = Integer.valueOf(102); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     final StrBuilder builder = new StrBuilder(); [EOL]     ObjectUtils.identityToString(builder, i); [EOL]     assertEquals(expected, builder.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StrBuilder) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StrBuilder(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] }
@Test [EOL] public void testToString_ObjectString() { [EOL]     assertEquals(BAR, ObjectUtils.toString((Object) null, BAR)); [EOL]     assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR)); [EOL] }
@Test [EOL] public void testToString_ObjectString() { [EOL]     assertEquals(BAR, ObjectUtils.toString((Object) null, BAR)); [EOL]     assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMedian_emptyItems() { [EOL]     ObjectUtils.<String>median(); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMedian_emptyItems() { [EOL]     ObjectUtils.<String>median(); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMedian_emptyItems() { [EOL]     ObjectUtils.<String>median(); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMedian_emptyItems() { [EOL]     ObjectUtils.<String>median(); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMedian_emptyItems() { [EOL]     ObjectUtils.<String>median(); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMedian_emptyItems() { [EOL]     ObjectUtils.<String>median(); [EOL] }
@Test [EOL] public void testJoin_IterableChar() { [EOL]     assertEquals(null, StringUtils.join((Iterable<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), 'x')); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] }
@Test [EOL] public void testIsTrue2() { [EOL]     Validate.isTrue(true, "MSG"); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsTrue2() { [EOL]     Validate.isTrue(true, "MSG"); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsTrue2() { [EOL]     Validate.isTrue(true, "MSG"); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsTrue1() { [EOL]     Validate.isTrue(true); [EOL]     try { [EOL]         Validate.isTrue(false); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated expression is false", ex.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsTrue1() { [EOL]     Validate.isTrue(true); [EOL]     try { [EOL]         Validate.isTrue(false); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated expression is false", ex.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testValidIndex_collection() { [EOL]     final Collection<String> coll = new ArrayList<String>(); [EOL]     coll.add(null); [EOL]     coll.add(null); [EOL]     Validate.validIndex(coll, 0); [EOL]     Validate.validIndex(coll, 1); [EOL]     try { [EOL]         Validate.validIndex(coll, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated collection index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(coll, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated collection index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final List<String> strColl = Arrays.asList(new String[] { "Hi" }); [EOL]     final List<String> test = Validate.validIndex(strColl, 0); [EOL]     assertSame(strColl, test); [EOL] }
@Test [EOL] public void testValidIndex_collection() { [EOL]     final Collection<String> coll = new ArrayList<String>(); [EOL]     coll.add(null); [EOL]     coll.add(null); [EOL]     Validate.validIndex(coll, 0); [EOL]     Validate.validIndex(coll, 1); [EOL]     try { [EOL]         Validate.validIndex(coll, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated collection index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(coll, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated collection index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final List<String> strColl = Arrays.asList(new String[] { "Hi" }); [EOL]     final List<String> test = Validate.validIndex(strColl, 0); [EOL]     assertSame(strColl, test); [EOL] }
@Test [EOL] public void testMatchesPattern() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testMatchesPattern() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testMatchesPattern() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testMatchesPattern() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsInstanceOfExceptionMessage() { [EOL]     try { [EOL]         Validate.isInstanceOf(List.class, "hi"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsInstanceOfExceptionMessage() { [EOL]     try { [EOL]         Validate.isInstanceOf(List.class, "hi"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsInstanceOfExceptionMessage() { [EOL]     try { [EOL]         Validate.isInstanceOf(List.class, "hi"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsInstanceOfExceptionMessage() { [EOL]     try { [EOL]         Validate.isInstanceOf(List.class, "hi"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(0, mutBool.compareTo(new MutableBoolean(false))); [EOL]     assertEquals(-1, mutBool.compareTo(new MutableBoolean(true))); [EOL]     mutBool.setValue(true); [EOL]     assertEquals(+1, mutBool.compareTo(new MutableBoolean(false))); [EOL]     assertEquals(0, mutBool.compareTo(new MutableBoolean(true))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(0, mutBool.compareTo(new MutableBoolean(false))); [EOL]     assertEquals(-1, mutBool.compareTo(new MutableBoolean(true))); [EOL]     mutBool.setValue(true); [EOL]     assertEquals(+1, mutBool.compareTo(new MutableBoolean(false))); [EOL]     assertEquals(0, mutBool.compareTo(new MutableBoolean(true))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(0, mutBool.compareTo(new MutableBoolean(false))); [EOL]     assertEquals(-1, mutBool.compareTo(new MutableBoolean(true))); [EOL]     mutBool.setValue(true); [EOL]     assertEquals(+1, mutBool.compareTo(new MutableBoolean(false))); [EOL]     assertEquals(0, mutBool.compareTo(new MutableBoolean(true))); [EOL] }
@Test [EOL] public void testFormatDurationHMS() { [EOL]     long time = 0; [EOL]     assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1; [EOL]     assertEquals("0:00:00.001", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 15; [EOL]     assertEquals("0:00:00.015", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 165; [EOL]     assertEquals("0:00:00.165", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1675; [EOL]     assertEquals("0:00:01.675", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 13465; [EOL]     assertEquals("0:00:13.465", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 72789; [EOL]     assertEquals("0:01:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 32 * 60000; [EOL]     assertEquals("0:32:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 62 * 60000; [EOL]     assertEquals("1:02:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL] }
@Test [EOL] public void testFormatDurationHMS() { [EOL]     long time = 0; [EOL]     assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1; [EOL]     assertEquals("0:00:00.001", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 15; [EOL]     assertEquals("0:00:00.015", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 165; [EOL]     assertEquals("0:00:00.165", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1675; [EOL]     assertEquals("0:00:01.675", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 13465; [EOL]     assertEquals("0:00:13.465", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 72789; [EOL]     assertEquals("0:01:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 32 * 60000; [EOL]     assertEquals("0:32:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 62 * 60000; [EOL]     assertEquals("1:02:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL] }
@Test [EOL] public void testFormatDurationHMS() { [EOL]     long time = 0; [EOL]     assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1; [EOL]     assertEquals("0:00:00.001", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 15; [EOL]     assertEquals("0:00:00.015", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 165; [EOL]     assertEquals("0:00:00.165", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1675; [EOL]     assertEquals("0:00:01.675", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 13465; [EOL]     assertEquals("0:00:13.465", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 72789; [EOL]     assertEquals("0:01:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 32 * 60000; [EOL]     assertEquals("0:32:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 62 * 60000; [EOL]     assertEquals("1:02:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL] }
@Test [EOL] public void testFormatDurationHMS() { [EOL]     long time = 0; [EOL]     assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1; [EOL]     assertEquals("0:00:00.001", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 15; [EOL]     assertEquals("0:00:00.015", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 165; [EOL]     assertEquals("0:00:00.165", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1675; [EOL]     assertEquals("0:00:01.675", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 13465; [EOL]     assertEquals("0:00:13.465", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 72789; [EOL]     assertEquals("0:01:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 32 * 60000; [EOL]     assertEquals("0:32:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 62 * 60000; [EOL]     assertEquals("1:02:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL] }
@Test [EOL] public void testFormatDurationHMS() { [EOL]     long time = 0; [EOL]     assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1; [EOL]     assertEquals("0:00:00.001", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 15; [EOL]     assertEquals("0:00:00.015", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 165; [EOL]     assertEquals("0:00:00.165", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1675; [EOL]     assertEquals("0:00:01.675", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 13465; [EOL]     assertEquals("0:00:13.465", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 72789; [EOL]     assertEquals("0:01:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 32 * 60000; [EOL]     assertEquals("0:32:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 62 * 60000; [EOL]     assertEquals("1:02:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL] }
@Test [EOL] public void testFormatDurationHMS() { [EOL]     long time = 0; [EOL]     assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1; [EOL]     assertEquals("0:00:00.001", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 15; [EOL]     assertEquals("0:00:00.015", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 165; [EOL]     assertEquals("0:00:00.165", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1675; [EOL]     assertEquals("0:00:01.675", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 13465; [EOL]     assertEquals("0:00:13.465", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 72789; [EOL]     assertEquals("0:01:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 32 * 60000; [EOL]     assertEquals("0:32:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 62 * 60000; [EOL]     assertEquals("1:02:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL] }
@Test [EOL] public void testEdgeDurations() { [EOL]     assertEqualDuration("01", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 15, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 16, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("11", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 14, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("01 26", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("54", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("09 12", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("287", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("11 30", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("364", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("12 00", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("365", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("31", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2006, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("92", new int[] { 2005, 9, 1, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("77", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2004, 9, 16, 0, 0, 0 }, new int[] { 2005, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("137", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("135", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 1, 28, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("364", new int[] { 2007, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("729", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("365", new int[] { 2007, 2, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("333", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2008, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("393", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("369", new int[] { 2004, 0, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("338", new int[] { 2004, 1, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2004, 2, 8, 0, 0, 0 }, new int[] { 2004, 3, 5, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("48", new int[] { 1992, 1, 29, 0, 0, 0 }, new int[] { 1996, 1, 29, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11 28", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M d"); [EOL] }
@Test [EOL] public void testEdgeDurations() { [EOL]     assertEqualDuration("01", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 15, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 16, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("11", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 14, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("01 26", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("54", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("09 12", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("287", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("11 30", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("364", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("12 00", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("365", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("31", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2006, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("92", new int[] { 2005, 9, 1, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("77", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2004, 9, 16, 0, 0, 0 }, new int[] { 2005, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("137", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("135", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 1, 28, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("364", new int[] { 2007, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("729", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("365", new int[] { 2007, 2, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("333", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2008, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("393", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("369", new int[] { 2004, 0, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("338", new int[] { 2004, 1, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2004, 2, 8, 0, 0, 0 }, new int[] { 2004, 3, 5, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("48", new int[] { 1992, 1, 29, 0, 0, 0 }, new int[] { 1996, 1, 29, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11 28", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M d"); [EOL] }
@Test [EOL] public void testEdgeDurations() { [EOL]     assertEqualDuration("01", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 15, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 16, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("11", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 14, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("01 26", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("54", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("09 12", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("287", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("11 30", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("364", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("12 00", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("365", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("31", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2006, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("92", new int[] { 2005, 9, 1, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("77", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2004, 9, 16, 0, 0, 0 }, new int[] { 2005, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("137", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("135", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 1, 28, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("364", new int[] { 2007, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("729", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("365", new int[] { 2007, 2, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("333", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2008, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("393", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("369", new int[] { 2004, 0, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("338", new int[] { 2004, 1, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2004, 2, 8, 0, 0, 0 }, new int[] { 2004, 3, 5, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("48", new int[] { 1992, 1, 29, 0, 0, 0 }, new int[] { 1996, 1, 29, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11 28", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M d"); [EOL] }
@Test [EOL] public void testEdgeDurations() { [EOL]     assertEqualDuration("01", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 15, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 16, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("11", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 14, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("01 26", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("54", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("09 12", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("287", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("11 30", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("364", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("12 00", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("365", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("31", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2006, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("92", new int[] { 2005, 9, 1, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("77", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2004, 9, 16, 0, 0, 0 }, new int[] { 2005, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("137", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("135", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 1, 28, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("364", new int[] { 2007, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("729", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("365", new int[] { 2007, 2, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("333", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2008, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("393", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("369", new int[] { 2004, 0, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("338", new int[] { 2004, 1, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2004, 2, 8, 0, 0, 0 }, new int[] { 2004, 3, 5, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("48", new int[] { 1992, 1, 29, 0, 0, 0 }, new int[] { 1996, 1, 29, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11 28", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M d"); [EOL] }
@Test [EOL] public void testEdgeDurations() { [EOL]     assertEqualDuration("01", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 15, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 16, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("11", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 14, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("01 26", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("54", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("09 12", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("287", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("11 30", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("364", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("12 00", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("365", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("31", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2006, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("92", new int[] { 2005, 9, 1, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("77", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2004, 9, 16, 0, 0, 0 }, new int[] { 2005, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("137", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("135", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 1, 28, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("364", new int[] { 2007, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("729", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("365", new int[] { 2007, 2, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("333", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2008, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("393", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("369", new int[] { 2004, 0, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("338", new int[] { 2004, 1, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2004, 2, 8, 0, 0, 0 }, new int[] { 2004, 3, 5, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("48", new int[] { 1992, 1, 29, 0, 0, 0 }, new int[] { 1996, 1, 29, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11 28", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M d"); [EOL] }
@Test [EOL] public void testEdgeDurations() { [EOL]     assertEqualDuration("01", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 15, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 16, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("11", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 14, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("01 26", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("54", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("09 12", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("287", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("11 30", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("364", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("12 00", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("365", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("31", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2006, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("92", new int[] { 2005, 9, 1, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("77", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2004, 9, 16, 0, 0, 0 }, new int[] { 2005, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("137", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("135", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 1, 28, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("364", new int[] { 2007, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("729", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("365", new int[] { 2007, 2, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("333", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2008, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("393", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("369", new int[] { 2004, 0, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("338", new int[] { 2004, 1, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2004, 2, 8, 0, 0, 0 }, new int[] { 2004, 3, 5, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("48", new int[] { 1992, 1, 29, 0, 0, 0 }, new int[] { 1996, 1, 29, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11 28", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M d"); [EOL] }
@Test [EOL] public void testLexx() { [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.y, 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1) }, DurationFormatUtils.lexx("yMdHmsS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 2), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 2), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 3) }, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(new StringBuilder("P"), 1), new DurationFormatUtils.Token(DurationFormatUtils.y, 4), new DurationFormatUtils.Token(new StringBuilder("Y"), 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(new StringBuilder("DT"), 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder("H"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1), new DurationFormatUtils.Token(new StringBuilder("S"), 1) }, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]     final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]     assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]     assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token(new Object()))); [EOL]     assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token(DurationFormatUtils.y, 1))); [EOL]     final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]     assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL] }
@Test [EOL] public void testLexx() { [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.y, 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1) }, DurationFormatUtils.lexx("yMdHmsS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 2), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 2), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 3) }, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(new StringBuilder("P"), 1), new DurationFormatUtils.Token(DurationFormatUtils.y, 4), new DurationFormatUtils.Token(new StringBuilder("Y"), 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(new StringBuilder("DT"), 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder("H"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1), new DurationFormatUtils.Token(new StringBuilder("S"), 1) }, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]     final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]     assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]     assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token(new Object()))); [EOL]     assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token(DurationFormatUtils.y, 1))); [EOL]     final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]     assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL] }
@Test [EOL] public void testLexx() { [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.y, 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1) }, DurationFormatUtils.lexx("yMdHmsS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 2), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 2), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 3) }, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(new StringBuilder("P"), 1), new DurationFormatUtils.Token(DurationFormatUtils.y, 4), new DurationFormatUtils.Token(new StringBuilder("Y"), 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(new StringBuilder("DT"), 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder("H"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1), new DurationFormatUtils.Token(new StringBuilder("S"), 1) }, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]     final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]     assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]     assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token(new Object()))); [EOL]     assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token(DurationFormatUtils.y, 1))); [EOL]     final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]     assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL] }
@Test [EOL] public void testLexx() { [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.y, 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1) }, DurationFormatUtils.lexx("yMdHmsS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 2), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 2), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 3) }, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(new StringBuilder("P"), 1), new DurationFormatUtils.Token(DurationFormatUtils.y, 4), new DurationFormatUtils.Token(new StringBuilder("Y"), 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(new StringBuilder("DT"), 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder("H"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1), new DurationFormatUtils.Token(new StringBuilder("S"), 1) }, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]     final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]     assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]     assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token(new Object()))); [EOL]     assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token(DurationFormatUtils.y, 1))); [EOL]     final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]     assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL] }
@Test [EOL] public void testLexx() { [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.y, 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1) }, DurationFormatUtils.lexx("yMdHmsS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 2), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 2), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 3) }, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(new StringBuilder("P"), 1), new DurationFormatUtils.Token(DurationFormatUtils.y, 4), new DurationFormatUtils.Token(new StringBuilder("Y"), 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(new StringBuilder("DT"), 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder("H"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1), new DurationFormatUtils.Token(new StringBuilder("S"), 1) }, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]     final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]     assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]     assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token(new Object()))); [EOL]     assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token(DurationFormatUtils.y, 1))); [EOL]     final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]     assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL] }
@Test [EOL] public void testLexx() { [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.y, 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1) }, DurationFormatUtils.lexx("yMdHmsS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 2), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 2), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 3) }, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(new StringBuilder("P"), 1), new DurationFormatUtils.Token(DurationFormatUtils.y, 4), new DurationFormatUtils.Token(new StringBuilder("Y"), 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(new StringBuilder("DT"), 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder("H"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1), new DurationFormatUtils.Token(new StringBuilder("S"), 1) }, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]     final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]     assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]     assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token(new Object()))); [EOL]     assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token(DurationFormatUtils.y, 1))); [EOL]     final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]     assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getRootCause(null)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(nested)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(jdkNoCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause)); [EOL] }
@Test [EOL] public void testGetRootCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getRootCause(null)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(nested)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(jdkNoCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause)); [EOL] }
@Test [EOL] public void testGetRootCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getRootCause(null)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(nested)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(jdkNoCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause)); [EOL] }
@Test [EOL] public void testGetRootCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getRootCause(null)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(nested)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(jdkNoCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause)); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetThrowableCount_Throwable() { [EOL]     assertEquals(0, ExceptionUtils.getThrowableCount(null)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause)); [EOL]     assertEquals(2, ExceptionUtils.getThrowableCount(nested)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(withCause)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause)); [EOL] }
@Test [EOL] public void testGetThrowableCount_Throwable() { [EOL]     assertEquals(0, ExceptionUtils.getThrowableCount(null)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause)); [EOL]     assertEquals(2, ExceptionUtils.getThrowableCount(nested)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(withCause)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause)); [EOL] }
@Test [EOL] public void testGetThrowableCount_Throwable() { [EOL]     assertEquals(0, ExceptionUtils.getThrowableCount(null)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause)); [EOL]     assertEquals(2, ExceptionUtils.getThrowableCount(nested)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(withCause)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause)); [EOL] }
@Test [EOL] public void testGetThrowableCount_Throwable() { [EOL]     assertEquals(0, ExceptionUtils.getThrowableCount(null)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause)); [EOL]     assertEquals(2, ExceptionUtils.getThrowableCount(nested)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(withCause)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause)); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] }
@Test [EOL] public void testToShort() { [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort()); [EOL]     assertEquals(Short.valueOf((short) 123), new MutableShort((short) 123).toShort()); [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testStopWatchSuspend() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.resume(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime >= 500); [EOL]     assertTrue(suspendTime < 700); [EOL]     assertTrue(totalTime >= 1000); [EOL]     assertTrue(totalTime < 1300); [EOL] }
@Test [EOL] public void testStopWatchSuspend() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.resume(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime >= 500); [EOL]     assertTrue(suspendTime < 700); [EOL]     assertTrue(totalTime >= 1000); [EOL]     assertTrue(totalTime < 1300); [EOL] }
@Test [EOL] public void testStopWatchSimpleGet() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     assertEquals(0, watch.getTime()); [EOL]     assertEquals("0:00:00.000", watch.toString()); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(500); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     assertTrue(watch.getTime() < 2000); [EOL] }
@Test [EOL] public void testStopWatchSimpleGet() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     assertEquals(0, watch.getTime()); [EOL]     assertEquals("0:00:00.000", watch.toString()); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(500); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     assertTrue(watch.getTime() < 2000); [EOL] }
@Test [EOL] public void testStopWatchSimpleGet() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     assertEquals(0, watch.getTime()); [EOL]     assertEquals("0:00:00.000", watch.toString()); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(500); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     assertTrue(watch.getTime() < 2000); [EOL] }
@Test [EOL] public void testStopWatchSimpleGet() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     assertEquals(0, watch.getTime()); [EOL]     assertEquals("0:00:00.000", watch.toString()); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(500); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     assertTrue(watch.getTime() < 2000); [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testBadStates() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.stop(); [EOL]         fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.suspend(); [EOL]         fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.split(); [EOL]         fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a started StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.unsplit(); [EOL]         fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.getSplitTime(); [EOL]         fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     try { [EOL]         watch.resume(); [EOL]         fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL]     watch.stop(); [EOL]     try { [EOL]         watch.start(); [EOL]         fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]     } catch (final IllegalStateException ise) { [EOL]     } [EOL] }
@Test [EOL] public void testStopWatchSimpleGet() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     assertEquals(0, watch.getTime()); [EOL]     assertEquals("0:00:00.000", watch.toString()); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(500); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     assertTrue(watch.getTime() < 2000); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     final int[] obj1 = new int[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final int[] obj2 = new int[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final int[] obj3 = new int[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     final int[] obj1 = new int[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final int[] obj2 = new int[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final int[] obj3 = new int[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     final int[] obj1 = new int[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final int[] obj2 = new int[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final int[] obj3 = new int[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     final int[] obj1 = new int[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final int[] obj2 = new int[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final int[] obj3 = new int[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     final int[] obj1 = new int[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final int[] obj2 = new int[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final int[] obj3 = new int[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     final int[] obj1 = new int[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final int[] obj2 = new int[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final int[] obj3 = new int[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     final boolean[] obj1 = new boolean[2]; [EOL]     obj1[0] = true; [EOL]     obj1[1] = false; [EOL]     final boolean[] obj2 = new boolean[2]; [EOL]     obj2[0] = true; [EOL]     obj2[1] = false; [EOL]     final boolean[] obj3 = new boolean[3]; [EOL]     obj3[0] = true; [EOL]     obj3[1] = false; [EOL]     obj3[2] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     final boolean[] obj1 = new boolean[2]; [EOL]     obj1[0] = true; [EOL]     obj1[1] = false; [EOL]     final boolean[] obj2 = new boolean[2]; [EOL]     obj2[0] = true; [EOL]     obj2[1] = false; [EOL]     final boolean[] obj3 = new boolean[3]; [EOL]     obj3[0] = true; [EOL]     obj3[1] = false; [EOL]     obj3[2] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     final boolean[] obj1 = new boolean[2]; [EOL]     obj1[0] = true; [EOL]     obj1[1] = false; [EOL]     final boolean[] obj2 = new boolean[2]; [EOL]     obj2[0] = true; [EOL]     obj2[1] = false; [EOL]     final boolean[] obj3 = new boolean[3]; [EOL]     obj3[0] = true; [EOL]     obj3[1] = false; [EOL]     obj3[2] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     final boolean[] obj1 = new boolean[2]; [EOL]     obj1[0] = true; [EOL]     obj1[1] = false; [EOL]     final boolean[] obj2 = new boolean[2]; [EOL]     obj2[0] = true; [EOL]     obj2[1] = false; [EOL]     final boolean[] obj3 = new boolean[3]; [EOL]     obj3[0] = true; [EOL]     obj3[1] = false; [EOL]     obj3[2] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     final boolean[] obj1 = new boolean[2]; [EOL]     obj1[0] = true; [EOL]     obj1[1] = false; [EOL]     final boolean[] obj2 = new boolean[2]; [EOL]     obj2[0] = true; [EOL]     obj2[1] = false; [EOL]     final boolean[] obj3 = new boolean[3]; [EOL]     obj3[0] = true; [EOL]     obj3[1] = false; [EOL]     obj3[2] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     final boolean[] obj1 = new boolean[2]; [EOL]     obj1[0] = true; [EOL]     obj1[1] = false; [EOL]     final boolean[] obj2 = new boolean[2]; [EOL]     obj2[0] = true; [EOL]     obj2[1] = false; [EOL]     final boolean[] obj3 = new boolean[3]; [EOL]     obj3[0] = true; [EOL]     obj3[1] = false; [EOL]     obj3[2] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new StringUtils()); [EOL]     final Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(StringUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(StringUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testTrimToNull() { [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "")); [EOL]     assertEquals(null, StringUtils.trimToNull(" \t\r\n\b ")); [EOL]     assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals(null, StringUtils.trimToNull("")); [EOL]     assertEquals(null, StringUtils.trimToNull(null)); [EOL] }
@Test [EOL] public void testTrimToNull() { [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "")); [EOL]     assertEquals(null, StringUtils.trimToNull(" \t\r\n\b ")); [EOL]     assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals(null, StringUtils.trimToNull("")); [EOL]     assertEquals(null, StringUtils.trimToNull(null)); [EOL] }
@Test [EOL] public void testTrimToNull() { [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "")); [EOL]     assertEquals(null, StringUtils.trimToNull(" \t\r\n\b ")); [EOL]     assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals(null, StringUtils.trimToNull("")); [EOL]     assertEquals(null, StringUtils.trimToNull(null)); [EOL] }
@Test [EOL] public void testTrimToNull() { [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "")); [EOL]     assertEquals(null, StringUtils.trimToNull(" \t\r\n\b ")); [EOL]     assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals(null, StringUtils.trimToNull("")); [EOL]     assertEquals(null, StringUtils.trimToNull(null)); [EOL] }
@Test [EOL] public void testStrip_StringString() { [EOL]     assertEquals(null, StringUtils.strip(null, null)); [EOL]     assertEquals("", StringUtils.strip("", null)); [EOL]     assertEquals("", StringUtils.strip("        ", null)); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ", null)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); [EOL]     assertEquals(null, StringUtils.strip(null, "")); [EOL]     assertEquals("", StringUtils.strip("", "")); [EOL]     assertEquals("        ", StringUtils.strip("        ", "")); [EOL]     assertEquals("  abc  ", StringUtils.strip("  abc  ", "")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); [EOL]     assertEquals(null, StringUtils.strip(null, " ")); [EOL]     assertEquals("", StringUtils.strip("", " ")); [EOL]     assertEquals("", StringUtils.strip("        ", " ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ", " ")); [EOL]     assertEquals(null, StringUtils.strip(null, "ab")); [EOL]     assertEquals("", StringUtils.strip("", "ab")); [EOL]     assertEquals("        ", StringUtils.strip("        ", "ab")); [EOL]     assertEquals("  abc  ", StringUtils.strip("  abc  ", "ab")); [EOL]     assertEquals("c", StringUtils.strip("abcabab", "ab")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); [EOL] }
@Test [EOL] public void testStrip_StringString() { [EOL]     assertEquals(null, StringUtils.strip(null, null)); [EOL]     assertEquals("", StringUtils.strip("", null)); [EOL]     assertEquals("", StringUtils.strip("        ", null)); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ", null)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); [EOL]     assertEquals(null, StringUtils.strip(null, "")); [EOL]     assertEquals("", StringUtils.strip("", "")); [EOL]     assertEquals("        ", StringUtils.strip("        ", "")); [EOL]     assertEquals("  abc  ", StringUtils.strip("  abc  ", "")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); [EOL]     assertEquals(null, StringUtils.strip(null, " ")); [EOL]     assertEquals("", StringUtils.strip("", " ")); [EOL]     assertEquals("", StringUtils.strip("        ", " ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ", " ")); [EOL]     assertEquals(null, StringUtils.strip(null, "ab")); [EOL]     assertEquals("", StringUtils.strip("", "ab")); [EOL]     assertEquals("        ", StringUtils.strip("        ", "ab")); [EOL]     assertEquals("  abc  ", StringUtils.strip("  abc  ", "ab")); [EOL]     assertEquals("c", StringUtils.strip("abcabab", "ab")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); [EOL] }
@Test [EOL] public void testStripAll() { [EOL]     final String[] empty = new String[0]; [EOL]     final String[] fooSpace = new String[] { "  " + FOO + "  ", "  " + FOO, FOO + "  " }; [EOL]     final String[] fooDots = new String[] { ".." + FOO + "..", ".." + FOO, FOO + ".." }; [EOL]     final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]     assertNull(StringUtils.stripAll((String[]) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll()); [EOL]     assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]     assertNull(StringUtils.stripAll(null, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL] }
@Test [EOL] public void testStripAll() { [EOL]     final String[] empty = new String[0]; [EOL]     final String[] fooSpace = new String[] { "  " + FOO + "  ", "  " + FOO, FOO + "  " }; [EOL]     final String[] fooDots = new String[] { ".." + FOO + "..", ".." + FOO, FOO + ".." }; [EOL]     final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]     assertNull(StringUtils.stripAll((String[]) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll()); [EOL]     assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]     assertNull(StringUtils.stripAll(null, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL] }
@Test [EOL] public void testStripAll() { [EOL]     final String[] empty = new String[0]; [EOL]     final String[] fooSpace = new String[] { "  " + FOO + "  ", "  " + FOO, FOO + "  " }; [EOL]     final String[] fooDots = new String[] { ".." + FOO + "..", ".." + FOO, FOO + ".." }; [EOL]     final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]     assertNull(StringUtils.stripAll((String[]) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll()); [EOL]     assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]     assertNull(StringUtils.stripAll(null, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL] }
@Test [EOL] public void testStripAll() { [EOL]     final String[] empty = new String[0]; [EOL]     final String[] fooSpace = new String[] { "  " + FOO + "  ", "  " + FOO, FOO + "  " }; [EOL]     final String[] fooDots = new String[] { ".." + FOO + "..", ".." + FOO, FOO + ".." }; [EOL]     final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]     assertNull(StringUtils.stripAll((String[]) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll()); [EOL]     assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]     assertNull(StringUtils.stripAll(null, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL] }
@Test [EOL] public void testStripAll() { [EOL]     final String[] empty = new String[0]; [EOL]     final String[] fooSpace = new String[] { "  " + FOO + "  ", "  " + FOO, FOO + "  " }; [EOL]     final String[] fooDots = new String[] { ".." + FOO + "..", ".." + FOO, FOO + ".." }; [EOL]     final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]     assertNull(StringUtils.stripAll((String[]) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll()); [EOL]     assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]     assertNull(StringUtils.stripAll(null, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL] }
@Test [EOL] public void testStripAll() { [EOL]     final String[] empty = new String[0]; [EOL]     final String[] fooSpace = new String[] { "  " + FOO + "  ", "  " + FOO, FOO + "  " }; [EOL]     final String[] fooDots = new String[] { ".." + FOO + "..", ".." + FOO, FOO + ".." }; [EOL]     final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]     assertNull(StringUtils.stripAll((String[]) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll()); [EOL]     assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]     assertNull(StringUtils.stripAll(null, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL] }
@Test [EOL] public void testStripAll() { [EOL]     final String[] empty = new String[0]; [EOL]     final String[] fooSpace = new String[] { "  " + FOO + "  ", "  " + FOO, FOO + "  " }; [EOL]     final String[] fooDots = new String[] { ".." + FOO + "..", ".." + FOO, FOO + ".." }; [EOL]     final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]     assertNull(StringUtils.stripAll((String[]) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll()); [EOL]     assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]     assertNull(StringUtils.stripAll(null, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL] }
@Test [EOL] public void testStripAll() { [EOL]     final String[] empty = new String[0]; [EOL]     final String[] fooSpace = new String[] { "  " + FOO + "  ", "  " + FOO, FOO + "  " }; [EOL]     final String[] fooDots = new String[] { ".." + FOO + "..", ".." + FOO, FOO + ".." }; [EOL]     final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]     assertNull(StringUtils.stripAll((String[]) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll()); [EOL]     assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]     assertNull(StringUtils.stripAll(null, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]     assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testLastIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); [EOL]     assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); [EOL] }
@Test [EOL] public void testLastIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); [EOL]     assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); [EOL] }
@Test [EOL] public void testLastIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); [EOL]     assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); [EOL] }
@Test [EOL] public void testLastIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); [EOL]     assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); [EOL] }
@Test [EOL] public void testLastIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); [EOL]     assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); [EOL] }
@Test [EOL] public void testContains_Char() { [EOL]     assertFalse(StringUtils.contains(null, ' ')); [EOL]     assertFalse(StringUtils.contains("", ' ')); [EOL]     assertFalse(StringUtils.contains("", null)); [EOL]     assertFalse(StringUtils.contains(null, null)); [EOL]     assertTrue(StringUtils.contains("abc", 'a')); [EOL]     assertTrue(StringUtils.contains("abc", 'b')); [EOL]     assertTrue(StringUtils.contains("abc", 'c')); [EOL]     assertFalse(StringUtils.contains("abc", 'z')); [EOL] }
@Test [EOL] public void testIndexOfAny_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", "")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", "")); [EOL]     assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za")); [EOL]     assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("ab", "z")); [EOL] }
@Test [EOL] public void testIndexOfAny_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", "")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", "")); [EOL]     assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za")); [EOL]     assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("ab", "z")); [EOL] }
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] }
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] }
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] }
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] }
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] }
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] }
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] }
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] }
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] }
@Test [EOL] public void testIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]     assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.indexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null })); [EOL] }
@Test [EOL] public void testIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]     assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.indexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null })); [EOL] }
@Test [EOL] public void testIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]     assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.indexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null })); [EOL] }
@Test [EOL] public void testIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]     assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.indexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null })); [EOL] }
@Test [EOL] public void testIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]     assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.indexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null })); [EOL] }
@Test [EOL] public void testIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]     assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.indexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null })); [EOL] }
@Test [EOL] public void testIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]     assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.indexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null })); [EOL] }
@Test [EOL] public void testLeft_String() { [EOL]     assertSame(null, StringUtils.left(null, -1)); [EOL]     assertSame(null, StringUtils.left(null, 0)); [EOL]     assertSame(null, StringUtils.left(null, 2)); [EOL]     assertEquals("", StringUtils.left("", -1)); [EOL]     assertEquals("", StringUtils.left("", 0)); [EOL]     assertEquals("", StringUtils.left("", 2)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, 0)); [EOL]     assertEquals(FOO, StringUtils.left(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.left(FOOBAR, 80)); [EOL] }
@Test [EOL] public void testLeft_String() { [EOL]     assertSame(null, StringUtils.left(null, -1)); [EOL]     assertSame(null, StringUtils.left(null, 0)); [EOL]     assertSame(null, StringUtils.left(null, 2)); [EOL]     assertEquals("", StringUtils.left("", -1)); [EOL]     assertEquals("", StringUtils.left("", 0)); [EOL]     assertEquals("", StringUtils.left("", 2)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, 0)); [EOL]     assertEquals(FOO, StringUtils.left(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.left(FOOBAR, 80)); [EOL] }
@Test [EOL] public void testLeft_String() { [EOL]     assertSame(null, StringUtils.left(null, -1)); [EOL]     assertSame(null, StringUtils.left(null, 0)); [EOL]     assertSame(null, StringUtils.left(null, 2)); [EOL]     assertEquals("", StringUtils.left("", -1)); [EOL]     assertEquals("", StringUtils.left("", 0)); [EOL]     assertEquals("", StringUtils.left("", 2)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, 0)); [EOL]     assertEquals(FOO, StringUtils.left(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.left(FOOBAR, 80)); [EOL] }
@Test [EOL] public void testLeft_String() { [EOL]     assertSame(null, StringUtils.left(null, -1)); [EOL]     assertSame(null, StringUtils.left(null, 0)); [EOL]     assertSame(null, StringUtils.left(null, 2)); [EOL]     assertEquals("", StringUtils.left("", -1)); [EOL]     assertEquals("", StringUtils.left("", 0)); [EOL]     assertEquals("", StringUtils.left("", 2)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, 0)); [EOL]     assertEquals(FOO, StringUtils.left(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.left(FOOBAR, 80)); [EOL] }
@Test [EOL] public void testSubstringAfter_StringString() { [EOL]     assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]     assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]     assertEquals(null, StringUtils.substringAfter(null, "XX")); [EOL]     assertEquals("", StringUtils.substringAfter("", null)); [EOL]     assertEquals("", StringUtils.substringAfter("", "")); [EOL]     assertEquals("", StringUtils.substringAfter("", "XX")); [EOL]     assertEquals("", StringUtils.substringAfter("foo", null)); [EOL]     assertEquals("ot", StringUtils.substringAfter("foot", "o")); [EOL]     assertEquals("bc", StringUtils.substringAfter("abc", "a")); [EOL]     assertEquals("cba", StringUtils.substringAfter("abcba", "b")); [EOL]     assertEquals("", StringUtils.substringAfter("abc", "c")); [EOL]     assertEquals("abc", StringUtils.substringAfter("abc", "")); [EOL]     assertEquals("", StringUtils.substringAfter("abc", "d")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] }
@Test [EOL] public void testSplitByCharacterTypeCamelCase() { [EOL]     assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL] }
@Test [EOL] public void testSplitByCharacterTypeCamelCase() { [EOL]     assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL] }
@Test [EOL] public void testSplitByCharacterTypeCamelCase() { [EOL]     assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL] }
@Test [EOL] public void testSplitByCharacterTypeCamelCase() { [EOL]     assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL] }
@Test [EOL] public void testSplitByCharacterTypeCamelCase() { [EOL]     assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL] }
@Test [EOL] public void testSplitByCharacterTypeCamelCase() { [EOL]     assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL] }
@Test [EOL] public void testSplitByCharacterTypeCamelCase() { [EOL]     assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL] }
@Test [EOL] public void testJoin_ArrayOfInts() { [EOL]     assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfInts() { [EOL]     assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfInts() { [EOL]     assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfInts() { [EOL]     assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfInts() { [EOL]     assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfInts() { [EOL]     assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfInts() { [EOL]     assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_IterableChar() { [EOL]     assertEquals(null, StringUtils.join((Iterable<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), 'x')); [EOL] }
@Test [EOL] public void testJoin_IterableChar() { [EOL]     assertEquals(null, StringUtils.join((Iterable<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), 'x')); [EOL] }
@Test [EOL] public void testRemoveEnd() { [EOL]     assertNull(StringUtils.removeEnd(null, null)); [EOL]     assertNull(StringUtils.removeEnd(null, "")); [EOL]     assertNull(StringUtils.removeEnd(null, "a")); [EOL]     assertEquals(StringUtils.removeEnd("", null), ""); [EOL]     assertEquals(StringUtils.removeEnd("", ""), ""); [EOL]     assertEquals(StringUtils.removeEnd("", "a"), ""); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com"); [EOL] }
@Test [EOL] public void testRemoveEnd() { [EOL]     assertNull(StringUtils.removeEnd(null, null)); [EOL]     assertNull(StringUtils.removeEnd(null, "")); [EOL]     assertNull(StringUtils.removeEnd(null, "a")); [EOL]     assertEquals(StringUtils.removeEnd("", null), ""); [EOL]     assertEquals(StringUtils.removeEnd("", ""), ""); [EOL]     assertEquals(StringUtils.removeEnd("", "a"), ""); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com"); [EOL] }
@Test [EOL] public void testRemoveEnd() { [EOL]     assertNull(StringUtils.removeEnd(null, null)); [EOL]     assertNull(StringUtils.removeEnd(null, "")); [EOL]     assertNull(StringUtils.removeEnd(null, "a")); [EOL]     assertEquals(StringUtils.removeEnd("", null), ""); [EOL]     assertEquals(StringUtils.removeEnd("", ""), ""); [EOL]     assertEquals(StringUtils.removeEnd("", "a"), ""); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com"); [EOL] }
@Test [EOL] public void testRemoveEnd() { [EOL]     assertNull(StringUtils.removeEnd(null, null)); [EOL]     assertNull(StringUtils.removeEnd(null, "")); [EOL]     assertNull(StringUtils.removeEnd(null, "a")); [EOL]     assertEquals(StringUtils.removeEnd("", null), ""); [EOL]     assertEquals(StringUtils.removeEnd("", ""), ""); [EOL]     assertEquals(StringUtils.removeEnd("", "a"), ""); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com"); [EOL] }
@Test [EOL] public void testRemoveEnd() { [EOL]     assertNull(StringUtils.removeEnd(null, null)); [EOL]     assertNull(StringUtils.removeEnd(null, "")); [EOL]     assertNull(StringUtils.removeEnd(null, "a")); [EOL]     assertEquals(StringUtils.removeEnd("", null), ""); [EOL]     assertEquals(StringUtils.removeEnd("", ""), ""); [EOL]     assertEquals(StringUtils.removeEnd("", "a"), ""); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com"); [EOL] }
@Test [EOL] public void testRemove_char() { [EOL]     assertEquals(null, StringUtils.remove(null, 'a')); [EOL]     assertEquals(null, StringUtils.remove(null, 'a')); [EOL]     assertEquals(null, StringUtils.remove(null, 'a')); [EOL]     assertEquals("", StringUtils.remove("", 'a')); [EOL]     assertEquals("", StringUtils.remove("", 'a')); [EOL]     assertEquals("", StringUtils.remove("", 'a')); [EOL]     assertEquals("qeed", StringUtils.remove("queued", 'u')); [EOL]     assertEquals("queued", StringUtils.remove("queued", 'z')); [EOL] }
@Test [EOL] public void testReplace_StringStringStringInt() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null, 2)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any", 2)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null, 2)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any", 2)); [EOL]     assertEquals("", StringUtils.replace("", null, null, 2)); [EOL]     assertEquals("", StringUtils.replace("", null, "any", 2)); [EOL]     assertEquals("", StringUtils.replace("", "any", null, 2)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any", 2)); [EOL]     final String str = new String(new char[] { 'o', 'o', 'f', 'o', 'o' }); [EOL]     assertSame(str, StringUtils.replace(str, "x", "", -1)); [EOL]     assertEquals("f", StringUtils.replace("oofoo", "o", "", -1)); [EOL]     assertEquals("oofoo", StringUtils.replace("oofoo", "o", "", 0)); [EOL]     assertEquals("ofoo", StringUtils.replace("oofoo", "o", "", 1)); [EOL]     assertEquals("foo", StringUtils.replace("oofoo", "o", "", 2)); [EOL]     assertEquals("fo", StringUtils.replace("oofoo", "o", "", 3)); [EOL]     assertEquals("f", StringUtils.replace("oofoo", "o", "", 4)); [EOL]     assertEquals("f", StringUtils.replace("oofoo", "o", "", -5)); [EOL]     assertEquals("f", StringUtils.replace("oofoo", "o", "", 1000)); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testCountMatches_String() { [EOL]     assertEquals(0, StringUtils.countMatches(null, null)); [EOL]     assertEquals(0, StringUtils.countMatches("blah", null)); [EOL]     assertEquals(0, StringUtils.countMatches(null, "DD")); [EOL]     assertEquals(0, StringUtils.countMatches("x", "")); [EOL]     assertEquals(0, StringUtils.countMatches("", "")); [EOL]     assertEquals(3, StringUtils.countMatches("one long someone sentence of one", "one")); [EOL]     assertEquals(0, StringUtils.countMatches("one long someone sentence of one", "two")); [EOL]     assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo")); [EOL] }
@Test [EOL] public void testCountMatches_String() { [EOL]     assertEquals(0, StringUtils.countMatches(null, null)); [EOL]     assertEquals(0, StringUtils.countMatches("blah", null)); [EOL]     assertEquals(0, StringUtils.countMatches(null, "DD")); [EOL]     assertEquals(0, StringUtils.countMatches("x", "")); [EOL]     assertEquals(0, StringUtils.countMatches("", "")); [EOL]     assertEquals(3, StringUtils.countMatches("one long someone sentence of one", "one")); [EOL]     assertEquals(0, StringUtils.countMatches("one long someone sentence of one", "two")); [EOL]     assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo")); [EOL] }
@Test [EOL] public void testCountMatches_String() { [EOL]     assertEquals(0, StringUtils.countMatches(null, null)); [EOL]     assertEquals(0, StringUtils.countMatches("blah", null)); [EOL]     assertEquals(0, StringUtils.countMatches(null, "DD")); [EOL]     assertEquals(0, StringUtils.countMatches("x", "")); [EOL]     assertEquals(0, StringUtils.countMatches("", "")); [EOL]     assertEquals(3, StringUtils.countMatches("one long someone sentence of one", "one")); [EOL]     assertEquals(0, StringUtils.countMatches("one long someone sentence of one", "two")); [EOL]     assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo")); [EOL] }
@Test [EOL] public void testCountMatches_String() { [EOL]     assertEquals(0, StringUtils.countMatches(null, null)); [EOL]     assertEquals(0, StringUtils.countMatches("blah", null)); [EOL]     assertEquals(0, StringUtils.countMatches(null, "DD")); [EOL]     assertEquals(0, StringUtils.countMatches("x", "")); [EOL]     assertEquals(0, StringUtils.countMatches("", "")); [EOL]     assertEquals(3, StringUtils.countMatches("one long someone sentence of one", "one")); [EOL]     assertEquals(0, StringUtils.countMatches("one long someone sentence of one", "two")); [EOL]     assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo")); [EOL] }
@Test [EOL] public void testIsAlphanumericSpace() { [EOL]     assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("A")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("1")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("_")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphanumericSpace() { [EOL]     assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("A")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("1")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("_")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphanumericSpace() { [EOL]     assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("A")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("1")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("_")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphanumericSpace() { [EOL]     assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("A")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("1")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("_")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphanumericSpace() { [EOL]     assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("A")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("1")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("_")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsWhitespace() { [EOL]     assertFalse(StringUtils.isWhitespace(null)); [EOL]     assertTrue(StringUtils.isWhitespace("")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]     assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertFalse(StringUtils.isWhitespace(" a ")); [EOL]     assertFalse(StringUtils.isWhitespace("a  ")); [EOL]     assertFalse(StringUtils.isWhitespace("  a")); [EOL]     assertFalse(StringUtils.isWhitespace("aba")); [EOL]     assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL] }
@Test [EOL] public void testIsWhitespace() { [EOL]     assertFalse(StringUtils.isWhitespace(null)); [EOL]     assertTrue(StringUtils.isWhitespace("")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]     assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertFalse(StringUtils.isWhitespace(" a ")); [EOL]     assertFalse(StringUtils.isWhitespace("a  ")); [EOL]     assertFalse(StringUtils.isWhitespace("  a")); [EOL]     assertFalse(StringUtils.isWhitespace("aba")); [EOL]     assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL] }
@Test [EOL] public void testIsWhitespace() { [EOL]     assertFalse(StringUtils.isWhitespace(null)); [EOL]     assertTrue(StringUtils.isWhitespace("")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]     assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertFalse(StringUtils.isWhitespace(" a ")); [EOL]     assertFalse(StringUtils.isWhitespace("a  ")); [EOL]     assertFalse(StringUtils.isWhitespace("  a")); [EOL]     assertFalse(StringUtils.isWhitespace("aba")); [EOL]     assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL] }
@Test [EOL] public void testIsWhitespace() { [EOL]     assertFalse(StringUtils.isWhitespace(null)); [EOL]     assertTrue(StringUtils.isWhitespace("")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]     assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertFalse(StringUtils.isWhitespace(" a ")); [EOL]     assertFalse(StringUtils.isWhitespace("a  ")); [EOL]     assertFalse(StringUtils.isWhitespace("  a")); [EOL]     assertFalse(StringUtils.isWhitespace("aba")); [EOL]     assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL] }
@Test [EOL] public void testIsWhitespace() { [EOL]     assertFalse(StringUtils.isWhitespace(null)); [EOL]     assertTrue(StringUtils.isWhitespace("")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]     assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertFalse(StringUtils.isWhitespace(" a ")); [EOL]     assertFalse(StringUtils.isWhitespace("a  ")); [EOL]     assertFalse(StringUtils.isWhitespace("  a")); [EOL]     assertFalse(StringUtils.isWhitespace("aba")); [EOL]     assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL] }
@Test [EOL] public void testIsWhitespace() { [EOL]     assertFalse(StringUtils.isWhitespace(null)); [EOL]     assertTrue(StringUtils.isWhitespace("")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]     assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertFalse(StringUtils.isWhitespace(" a ")); [EOL]     assertFalse(StringUtils.isWhitespace("a  ")); [EOL]     assertFalse(StringUtils.isWhitespace("  a")); [EOL]     assertFalse(StringUtils.isWhitespace("aba")); [EOL]     assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL] }
@Test [EOL] public void testIsAllLowerCase() { [EOL]     assertFalse(StringUtils.isAllLowerCase(null)); [EOL]     assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abC")); [EOL] }
@Test [EOL] public void testIsAllLowerCase() { [EOL]     assertFalse(StringUtils.isAllLowerCase(null)); [EOL]     assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abC")); [EOL] }
@Test [EOL] public void testIsAllLowerCase() { [EOL]     assertFalse(StringUtils.isAllLowerCase(null)); [EOL]     assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abC")); [EOL] }
@Test [EOL] public void testIsAllLowerCase() { [EOL]     assertFalse(StringUtils.isAllLowerCase(null)); [EOL]     assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abC")); [EOL] }
@Test [EOL] public void testIsAllLowerCase() { [EOL]     assertFalse(StringUtils.isAllLowerCase(null)); [EOL]     assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abC")); [EOL] }
@Test [EOL] public void testIsAllLowerCase() { [EOL]     assertFalse(StringUtils.isAllLowerCase(null)); [EOL]     assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abC")); [EOL] }
@Test [EOL] public void testAbbreviate_StringIntInt() { [EOL]     assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]     assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]     assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     final String raspberry = "raspberry peach"; [EOL]     assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15)); [EOL]     assertEquals(null, StringUtils.abbreviate(null, 7, 14)); [EOL]     assertAbbreviateWithOffset("abcdefg...", -1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 0, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 2, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 3, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 4, 10); [EOL]     assertAbbreviateWithOffset("...fghi...", 5, 10); [EOL]     assertAbbreviateWithOffset("...ghij...", 6, 10); [EOL]     assertAbbreviateWithOffset("...hijk...", 7, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 8, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 9, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 11, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 12, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 13, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 14, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 15, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 16, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10); [EOL] }
@Test [EOL] public void testAbbreviate_StringIntInt() { [EOL]     assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]     assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]     assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     final String raspberry = "raspberry peach"; [EOL]     assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15)); [EOL]     assertEquals(null, StringUtils.abbreviate(null, 7, 14)); [EOL]     assertAbbreviateWithOffset("abcdefg...", -1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 0, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 2, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 3, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 4, 10); [EOL]     assertAbbreviateWithOffset("...fghi...", 5, 10); [EOL]     assertAbbreviateWithOffset("...ghij...", 6, 10); [EOL]     assertAbbreviateWithOffset("...hijk...", 7, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 8, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 9, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 11, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 12, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 13, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 14, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 15, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 16, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10); [EOL] }
@Test [EOL] public void testAbbreviate_StringIntInt() { [EOL]     assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]     assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]     assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     final String raspberry = "raspberry peach"; [EOL]     assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15)); [EOL]     assertEquals(null, StringUtils.abbreviate(null, 7, 14)); [EOL]     assertAbbreviateWithOffset("abcdefg...", -1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 0, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 2, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 3, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 4, 10); [EOL]     assertAbbreviateWithOffset("...fghi...", 5, 10); [EOL]     assertAbbreviateWithOffset("...ghij...", 6, 10); [EOL]     assertAbbreviateWithOffset("...hijk...", 7, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 8, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 9, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 11, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 12, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 13, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 14, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 15, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 16, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10); [EOL] }
@Test [EOL] public void testAbbreviate_StringIntInt() { [EOL]     assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]     assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]     assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     final String raspberry = "raspberry peach"; [EOL]     assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15)); [EOL]     assertEquals(null, StringUtils.abbreviate(null, 7, 14)); [EOL]     assertAbbreviateWithOffset("abcdefg...", -1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 0, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 2, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 3, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 4, 10); [EOL]     assertAbbreviateWithOffset("...fghi...", 5, 10); [EOL]     assertAbbreviateWithOffset("...ghij...", 6, 10); [EOL]     assertAbbreviateWithOffset("...hijk...", 7, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 8, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 9, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 11, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 12, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 13, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 14, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 15, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 16, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10); [EOL] }
@Test [EOL] public void testAbbreviate_StringIntInt() { [EOL]     assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]     assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]     assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     final String raspberry = "raspberry peach"; [EOL]     assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15)); [EOL]     assertEquals(null, StringUtils.abbreviate(null, 7, 14)); [EOL]     assertAbbreviateWithOffset("abcdefg...", -1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 0, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 2, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 3, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 4, 10); [EOL]     assertAbbreviateWithOffset("...fghi...", 5, 10); [EOL]     assertAbbreviateWithOffset("...ghij...", 6, 10); [EOL]     assertAbbreviateWithOffset("...hijk...", 7, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 8, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 9, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 11, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 12, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 13, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 14, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 15, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 16, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testNormalizeSpace() { [EOL]     assertEquals(null, StringUtils.normalizeSpace(null)); [EOL]     assertEquals("", StringUtils.normalizeSpace("")); [EOL]     assertEquals("", StringUtils.normalizeSpace(" ")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\t")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\n")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u0009")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000B")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001D")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001E")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001F")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\f")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\r")); [EOL]     assertEquals("a", StringUtils.normalizeSpace("  a  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n")); [EOL] }
@Test [EOL] public void testNormalizeSpace() { [EOL]     assertEquals(null, StringUtils.normalizeSpace(null)); [EOL]     assertEquals("", StringUtils.normalizeSpace("")); [EOL]     assertEquals("", StringUtils.normalizeSpace(" ")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\t")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\n")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u0009")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000B")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001D")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001E")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001F")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\f")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\r")); [EOL]     assertEquals("a", StringUtils.normalizeSpace("  a  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n")); [EOL] }
@Test [EOL] public void testNormalizeSpace() { [EOL]     assertEquals(null, StringUtils.normalizeSpace(null)); [EOL]     assertEquals("", StringUtils.normalizeSpace("")); [EOL]     assertEquals("", StringUtils.normalizeSpace(" ")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\t")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\n")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u0009")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000B")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001D")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001E")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001F")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\f")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\r")); [EOL]     assertEquals("a", StringUtils.normalizeSpace("  a  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n")); [EOL] }
@Test [EOL] public void testNormalizeSpace() { [EOL]     assertEquals(null, StringUtils.normalizeSpace(null)); [EOL]     assertEquals("", StringUtils.normalizeSpace("")); [EOL]     assertEquals("", StringUtils.normalizeSpace(" ")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\t")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\n")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u0009")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000B")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001D")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001E")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001F")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\f")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\r")); [EOL]     assertEquals("a", StringUtils.normalizeSpace("  a  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n")); [EOL] }
@Test [EOL] public void testNormalizeSpace() { [EOL]     assertEquals(null, StringUtils.normalizeSpace(null)); [EOL]     assertEquals("", StringUtils.normalizeSpace("")); [EOL]     assertEquals("", StringUtils.normalizeSpace(" ")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\t")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\n")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u0009")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000B")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001D")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001E")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001F")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\f")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\r")); [EOL]     assertEquals("a", StringUtils.normalizeSpace("  a  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n")); [EOL] }
@Test [EOL] public void testNormalizeSpace() { [EOL]     assertEquals(null, StringUtils.normalizeSpace(null)); [EOL]     assertEquals("", StringUtils.normalizeSpace("")); [EOL]     assertEquals("", StringUtils.normalizeSpace(" ")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\t")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\n")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u0009")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000B")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001D")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001E")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001F")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\f")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\r")); [EOL]     assertEquals("a", StringUtils.normalizeSpace("  a  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     mutNum.setValue(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     mutNum.setValue(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     mutNum.setValue(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     mutNum.setValue(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     mutNum.setValue(null); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.add(1.1d); [EOL]     assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.add(1.1d); [EOL]     assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.add(1.1d); [EOL]     assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testChar() { [EOL]     assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL] }
@Test [EOL] public void testChar() { [EOL]     assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloat() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL] }
@Test [EOL] public void testFloat() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL] }
@Test [EOL] public void testFloat() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL] }
@Test [EOL] public void testFloat() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL] }
@Test [EOL] public void testReflectionFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testSetArrayEnd() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setArrayEnd(null); [EOL]     assertEquals("", style.getArrayEnd()); [EOL] }
@Test [EOL] public void testSetArrayEnd() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setArrayEnd(null); [EOL]     assertEquals("", style.getArrayEnd()); [EOL] }
@Test [EOL] public void testSetContentStart() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setContentStart(null); [EOL]     assertEquals("", style.getContentStart()); [EOL] }
@Test [EOL] public void testSetContentStart() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setContentStart(null); [EOL]     assertEquals("", style.getContentStart()); [EOL] }
@Test [EOL] public void testSetContentStart() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setContentStart(null); [EOL]     assertEquals("", style.getContentStart()); [EOL] }
@Test [EOL] public void testSetFieldSeparator() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setFieldSeparator(null); [EOL]     assertEquals("", style.getFieldSeparator()); [EOL] }
@Test [EOL] public void testSetFieldSeparator() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setFieldSeparator(null); [EOL]     assertEquals("", style.getFieldSeparator()); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testAbove() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_4bits_2args() { [EOL]     final boolean[] shortArray = new boolean[] { true, true, false, true }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3)); [EOL]     final boolean[] maxLengthArray = new boolean[] { true, false, true, false, false, true, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3)); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4)); [EOL]     final boolean[] javaDocCheck = new boolean[] { true, false, false, true, true, false, true, false }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3)); [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_4bits_2args() { [EOL]     final boolean[] shortArray = new boolean[] { true, true, false, true }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3)); [EOL]     final boolean[] maxLengthArray = new boolean[] { true, false, true, false, false, true, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3)); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4)); [EOL]     final boolean[] javaDocCheck = new boolean[] { true, false, false, true, true, false, true, false }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3)); [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_4bits_2args() { [EOL]     final boolean[] shortArray = new boolean[] { true, true, false, true }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3)); [EOL]     final boolean[] maxLengthArray = new boolean[] { true, false, true, false, false, true, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3)); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4)); [EOL]     final boolean[] javaDocCheck = new boolean[] { true, false, false, true, true, false, true, false }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3)); [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_4bits_2args() { [EOL]     final boolean[] shortArray = new boolean[] { true, true, false, true }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3)); [EOL]     final boolean[] maxLengthArray = new boolean[] { true, false, true, false, false, true, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3)); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4)); [EOL]     final boolean[] javaDocCheck = new boolean[] { true, false, false, true, true, false, true, false }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3)); [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_4bits_2args() { [EOL]     final boolean[] shortArray = new boolean[] { true, true, false, true }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3)); [EOL]     final boolean[] maxLengthArray = new boolean[] { true, false, true, false, false, true, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3)); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4)); [EOL]     final boolean[] javaDocCheck = new boolean[] { true, false, false, true, true, false, true, false }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3)); [EOL] }
@Test [EOL] public void testShortArrayToInt() { [EOL]     final short[] src = new short[] { (short) 0xCDF1, (short) 0xF0C1, (short) 0x0F12, (short) 0x3456, (short) 0x7800 }; [EOL]     assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); [EOL]     assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); [EOL]     assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]     assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1)); [EOL] }
@Test [EOL] public void testShortArrayToInt() { [EOL]     final short[] src = new short[] { (short) 0xCDF1, (short) 0xF0C1, (short) 0x0F12, (short) 0x3456, (short) 0x7800 }; [EOL]     assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); [EOL]     assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); [EOL]     assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]     assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1)); [EOL] }
@Test [EOL] public void testShortArrayToInt() { [EOL]     final short[] src = new short[] { (short) 0xCDF1, (short) 0xF0C1, (short) 0x0F12, (short) 0x3456, (short) 0x7800 }; [EOL]     assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); [EOL]     assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); [EOL]     assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]     assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1)); [EOL] }
@Test [EOL] public void testBinaryToByte() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals((byte) 0x00, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 0 * 4)); [EOL]     assertEquals((byte) 0x0C, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 1 * 4)); [EOL]     assertEquals((byte) 0xDC, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 2 * 4)); [EOL]     assertEquals((byte) 0xFD, Conversion.binaryToByte(src, 1 * 4, (byte) 0, 0, 2 * 4)); [EOL]     assertEquals((byte) 0x34, Conversion.binaryToByte(src, 0 * 4, (byte) 0x34, 0, 0 * 4)); [EOL]     assertEquals((byte) 0x84, Conversion.binaryToByte(src, 17 * 4, (byte) 0x34, 4, 1 * 4)); [EOL] }
@Test [EOL] public void testBinaryToByte() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals((byte) 0x00, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 0 * 4)); [EOL]     assertEquals((byte) 0x0C, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 1 * 4)); [EOL]     assertEquals((byte) 0xDC, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 2 * 4)); [EOL]     assertEquals((byte) 0xFD, Conversion.binaryToByte(src, 1 * 4, (byte) 0, 0, 2 * 4)); [EOL]     assertEquals((byte) 0x34, Conversion.binaryToByte(src, 0 * 4, (byte) 0x34, 0, 0 * 4)); [EOL]     assertEquals((byte) 0x84, Conversion.binaryToByte(src, 17 * 4, (byte) 0x34, 4, 1 * 4)); [EOL] }
@Test [EOL] public void testIntToShortArray() { [EOL]     assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 0, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 100, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 0, new short[] {}, 100, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0x5678, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0x5678, (short) 0x1234, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0x1234 }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 2, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678 }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x2B3C, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 1, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x159E, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 2, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x8ACF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 3, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x4567, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 4, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0x091A }, Conversion.intToShortArray(0x12345678, 17, new short[] { 0 }, 0, 1)); [EOL] }
@Test [EOL] public void testIntToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30)); [EOL] }
@Test [EOL] public void testIntToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30)); [EOL] }
@Test [EOL] public void testIntToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30)); [EOL] }
@Test [EOL] public void testShortToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 15)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 16)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 16)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 1, new boolean[21], 0, 15)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 0, 14)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 3, 14)); [EOL] }
@Test [EOL] public void testShortToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 15)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 16)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 16)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 1, new boolean[21], 0, 15)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 0, 14)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 3, 14)); [EOL] }
@Test [EOL] public void testShortToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 15)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 16)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 16)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 1, new boolean[21], 0, 15)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 0, 14)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 3, 14)); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new StringEscapeUtils()); [EOL]     final Constructor<?>[] cons = StringEscapeUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(StringEscapeUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(StringEscapeUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testLang720() { [EOL]     final String input = new StringBuilder("\ud842\udfb7").append("A").toString(); [EOL]     final String escaped = StringEscapeUtils.escapeXml(input); [EOL]     assertEquals(input, escaped); [EOL] }
@Test [EOL] public void testLang720() { [EOL]     final String input = new StringBuilder("\ud842\udfb7").append("A").toString(); [EOL]     final String escaped = StringEscapeUtils.escapeXml(input); [EOL]     assertEquals(input, escaped); [EOL] }
@Test [EOL] public void testUnescapeXmlSupplementaryCharacters() { [EOL]     assertEquals("Supplementary character must be represented using a single escape", "\uD84C\uDFB4", StringEscapeUtils.unescapeXml("&#144308;")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
@Test [EOL] public void testUsage() throws Exception { [EOL]     final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]     final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]     final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]     final String testString = "January 3, 2005"; [EOL]     assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]     assertEquals(testString, c.reformat("01032005")); [EOL] }
