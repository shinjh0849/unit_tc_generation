public void testAttrWithExistingAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "value"); [EOL] String result = element.attr("key"); [EOL] assertEquals("value", result); [EOL] }
public void testAttrWithNonExistingAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String result = element.attr("nonExistingKey"); [EOL] assertEquals("", result); [EOL] }
public void testAttrWithAbsUrl() { [EOL] Element element = new Element(Tag.valueOf("a"), ""); [EOL] element.attr("href", "http://example.com"); [EOL] String result = element.attr("abs:href"); [EOL] assertTrue(result.startsWith("http://")); [EOL] }
public void testHasAttr_WithExistingAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("existingAttr", "value"); [EOL] boolean hasAttr = element.hasAttr("existingAttr"); [EOL] assertTrue(hasAttr); [EOL] } [EOL] public void testHasAttr_WithNonExistingAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] boolean hasAttr = element.hasAttr("nonExistingAttr"); [EOL] assertFalse(hasAttr); [EOL] } [EOL] public void testHasAttr_WithNullAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.hasAttr(null); [EOL] fail("hasAttr should throw IllegalArgumentException for null attribute key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }

public void testAbsUrlWithEmptyAttributeKey() { [EOL] Element element = new Element(Tag.valueOf("a"), ""); [EOL] try { [EOL] element.absUrl(""); [EOL] fail("Should have thrown IllegalArgumentException for empty attribute key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAbsUrlWithNonExistentAttribute() { [EOL] Element element = new Element(Tag.valueOf("a"), "http://example.com"); [EOL] String result = element.absUrl("href"); [EOL] assertEquals("", result); [EOL] }
public void testAbsUrlWithValidRelativeUrl() { [EOL] Element element = new Element(Tag.valueOf("a"), "http://example.com"); [EOL] element.attr("href", "/path"); [EOL] String result = element.absUrl("href"); [EOL] assertEquals("http://example.com/path", result); [EOL] }
public void testAbsUrlWithInvalidBaseUri() { [EOL] Element element = new Element(Tag.valueOf("a"), "invalid_base_uri"); [EOL] element.attr("href", "path"); [EOL] String result = element.absUrl("href"); [EOL] assertEquals("", result); [EOL] }
public void testAbsUrlWithInvalidRelativeUrl() { [EOL] Element element = new Element(Tag.valueOf("a"), "http://example.com"); [EOL] element.attr("href", "http://"); [EOL] String result = element.absUrl("href"); [EOL] assertEquals("", result); [EOL] }
public void testAttrWithExistingKey() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] element1.attr("key1", "value1"); [EOL] Element element2 = new Element(Tag.valueOf("span"), ""); [EOL] element2.attr("key2", "value2"); [EOL] Elements contents = new Elements(); [EOL] contents.add(element1); [EOL] contents.add(element2); [EOL] String result = contents.attr("key1"); [EOL] assertNotEquals("", result); [EOL] assertEquals("value1", result); [EOL] }
public void testAttrWithNonExistingKey() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] element1.attr("key1", "value1"); [EOL] Element element2 = new Element(Tag.valueOf("span"), ""); [EOL] element2.attr("key2", "value2"); [EOL] Elements contents = new Elements(); [EOL] contents.add(element1); [EOL] contents.add(element2); [EOL] String result = contents.attr("key3"); [EOL] assertEquals("", result); [EOL] }
public void testOuterHtml_EmptyContents() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] String result = parent.outerHtml(); [EOL] assertEquals("", result); [EOL] }
public void testOuterHtml_SingleElement() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] child.appendText("Hello"); [EOL] parent.appendChild(child); [EOL] String result = parent.outerHtml(); [EOL] assertEquals("<p>Hello</p>", result); [EOL] }
public void testOuterHtml_MultipleElements() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element firstChild = new Element(Tag.valueOf("p"), ""); [EOL] Element secondChild = new Element(Tag.valueOf("span"), ""); [EOL] firstChild.appendText("Hello"); [EOL] secondChild.appendText("World"); [EOL] parent.appendChild(firstChild); [EOL] parent.appendChild(secondChild); [EOL] String result = parent.outerHtml(); [EOL] assertEquals("<p>Hello</p>\n<span>World</span>", result); [EOL] }
public void testWrapWithValidHtml() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] String html = "<p></p>"; [EOL] Elements result = elements.wrap(html); [EOL] assertNotNull(result); [EOL] assertEquals("<p><div></div></p>", result.get(0).outerHtml()); [EOL] }
public void testWrapWithEmptyHtml() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] try { [EOL] elements.wrap(""); [EOL] fail("Should have thrown IllegalArgumentException for empty html"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testWrapWithNullHtml() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] try { [EOL] elements.wrap(null); [EOL] fail("Should have thrown IllegalArgumentException for null html"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testSize_EmptyContents() { [EOL] Elements elements = new Elements(); [EOL] int size = elements.size(); [EOL] assertEquals(0, size); [EOL] }
public void testSize_NonEmptyContents() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element("div")); [EOL] int size = elements.size(); [EOL] assertEquals(1, size); [EOL] }
public void testEqualsWithNull() { [EOL] TextNode tn = new TextNode("content"); [EOL] assertFalse(tn.equals(null)); [EOL] }
public void testEqualsWithDifferentClass() { [EOL] TextNode tn = new TextNode("content"); [EOL] assertFalse(tn.equals(new Object())); [EOL] }
public void testEqualsWithSameContent() { [EOL] TextNode tn1 = new TextNode("content"); [EOL] TextNode tn2 = new TextNode("content"); [EOL] assertTrue(tn1.equals(tn2)); [EOL] }
public void testEqualsWithDifferentContent() { [EOL] TextNode tn1 = new TextNode("content1"); [EOL] TextNode tn2 = new TextNode("content2"); [EOL] assertFalse(tn1.equals(tn2)); [EOL] }
public void testListIterator_EmptyContents() { [EOL] Elements elements = new Elements(); [EOL] ListIterator<Element> iterator = elements.listIterator(); [EOL] assertFalse(iterator.hasNext()); [EOL] }
public void testListIterator_NonEmptyContents() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] ListIterator<Element> iterator = elements.listIterator(); [EOL] assertTrue(iterator.hasNext()); [EOL] assertNotNull(iterator.next()); [EOL] }
public void testMatches_AlwaysTrue() { [EOL] Element dummyElement = new Element(Tag.valueOf("div"), ""); [EOL] CssSelector selector = new CssSelector(); // Assuming CssSelector is the class where matches method exists [EOL] boolean result = selector.matches(dummyElement); [EOL] assertTrue(result); [EOL] }
public void testTitleWithNoTitleTag() { [EOL] Document doc = Jsoup.parse("<html><head></head><body></body></html>"); [EOL] String title = doc.title(); [EOL] assertTrue(title.isEmpty()); [EOL] }
public void testTitleWithEmptyTitleTag() { [EOL] Document doc = Jsoup.parse("<html><head><title></title></head><body></body></html>"); [EOL] String title = doc.title(); [EOL] assertTrue(title.isEmpty()); [EOL] }
public void testTitleWithWhitespaceTitleTag() { [EOL] Document doc = Jsoup.parse("<html><head><title>   </title></head><body></body></html>"); [EOL] String title = doc.title(); [EOL] assertTrue(title.isEmpty()); [EOL] }
public void testTitleWithTextTitleTag() { [EOL] Document doc = Jsoup.parse("<html><head><title>My Title</title></head><body></body></html>"); [EOL] String title = doc.title(); [EOL] assertEquals("My Title", title); [EOL] }
public void testTitleWithWhitespaceAndTextTitleTag() { [EOL] Document doc = Jsoup.parse("<html><head><title>   My Title   </title></head><body></body></html>"); [EOL] String title = doc.title(); [EOL] assertEquals("My Title", title); [EOL] }
public void setTitle_whenDocumentHasNoTitleElement_shouldCreateTitleAndSetItsText() { [EOL] Document doc = Jsoup.parse("<html><head></head><body></body></html>"); [EOL] String titleText = "New Title"; [EOL] doc.title(titleText); [EOL] Element titleEl = doc.select("title").first(); [EOL] assertNotNull(titleEl); [EOL] assertEquals(titleText, titleEl.text()); [EOL] }
public void setTitle_whenDocumentHasExistingTitleElement_shouldUpdateItsText() { [EOL] Document doc = Jsoup.parse("<html><head><title>Old Title</title></head><body></body></html>"); [EOL] String titleText = "Updated Title"; [EOL] doc.title(titleText); [EOL] Element titleEl = doc.select("title").first(); [EOL] assertNotNull(titleEl); [EOL] assertEquals(titleText, titleEl.text()); [EOL] }
public void testSelectorWithValidQueryAndRoot() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Selector selector = new Selector("div", root); [EOL] assertNotNull(selector); [EOL] }
public void testSelectorWithNullQuery() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] new Selector(null, root); [EOL] fail("Should throw IllegalArgumentException for null query"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testSelectorWithEmptyQuery() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] new Selector(" ", root); [EOL] fail("Should throw IllegalArgumentException for empty query"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testSelectorWithNullRoot() { [EOL] try { [EOL] new Selector("div", null); [EOL] fail("Should throw IllegalArgumentException for null root"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testSelectWithValidQueryAndRoot() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.appendElement("p").text("First para"); [EOL] root.appendElement("p").text("Second para"); [EOL] String query = "p"; [EOL] Elements result = Selector.select(query, root); [EOL] assertNotNull(result); [EOL] assertEquals(2, result.size()); [EOL] assertEquals("First para", result.get(0).text()); [EOL] assertEquals("Second para", result.get(1).text()); [EOL] }
public void testSelectWithInvalidQuery() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.appendElement("p").text("First para"); [EOL] String query = "##"; [EOL] try { [EOL] Selector.select(query, root); [EOL] fail("SelectorParseException expected"); [EOL] } catch (SelectorParseException e) { [EOL] } [EOL] }
public void testSelectWithNullRoot() { [EOL] String query = "p"; [EOL] try { [EOL] Selector.select(query, null); [EOL] fail("NullPointerException expected"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testSelectWithValidQueryAndNonEmptyRoots() { [EOL] String query = "div"; [EOL] List<Element> rootList = new ArrayList<>(); [EOL] rootList.add(new Element(Tag.valueOf("div"), "")); [EOL] rootList.add(new Element(Tag.valueOf("span"), "")); [EOL] Elements result = Selector.select(query, rootList); [EOL] assertNotNull(result); [EOL] assertFalse(result.isEmpty()); [EOL] assertEquals(1, result.size()); [EOL] }
public void testSelectWithValidQueryAndEmptyRoots() { [EOL] String query = "div"; [EOL] List<Element> rootList = new ArrayList<>(); [EOL] Elements result = Selector.select(query, rootList); [EOL] assertNotNull(result); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testSelectWithEmptyQuery() { [EOL] String query = ""; [EOL] List<Element> rootList = new ArrayList<>(); [EOL] rootList.add(new Element(Tag.valueOf("div"), "")); [EOL] try { [EOL] Selector.select(query, rootList); [EOL] fail("Should have thrown an IllegalArgumentException because the query is empty."); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testSelectWithNullQuery() { [EOL] String query = null; [EOL] List<Element> rootList = new ArrayList<>(); [EOL] rootList.add(new Element(Tag.valueOf("div"), "")); [EOL] try { [EOL] Selector.select(query, rootList); [EOL] fail("Should have thrown an IllegalArgumentException because the query is null."); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testSelectWithNullRoots() { [EOL] String query = "div"; [EOL] Iterable<Element> roots = null; [EOL] try { [EOL] Selector.select(query, roots); [EOL] fail("Should have thrown an IllegalArgumentException because the roots are null."); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
private Elements select() { [EOL] tq.consumeWhitespace(); [EOL] if (tq.matchesAny(combinators)) { [EOL] elements.add(root); [EOL] combinator(tq.consume().toString()); [EOL] } else { [EOL] addElements(findElements()); [EOL] } [EOL] while (!tq.isEmpty()) { [EOL] boolean seenWhite = tq.consumeWhitespace(); [EOL] if (tq.matchChomp(",")) { [EOL] while (!tq.isEmpty()) { [EOL] String subQuery = tq.chompTo(","); [EOL] elements.addAll(select(subQuery, root)); [EOL] } [EOL] } else if (tq.matchesAny(combinators)) { [EOL] combinator(tq.consume().toString()); [EOL] } else if (seenWhite) { [EOL] combinator(" "); [EOL] } else { [EOL] Elements candidates = findElements(); [EOL] intersectElements(filterForSelf(elements, candidates)); [EOL] } [EOL] } [EOL] return new Elements(elements); [EOL] } [EOL] private Selector(String query, Element root); [EOL] public SelectorParseException(String s); [EOL] public static Elements select(String query, Element root); [EOL] public static Elements select(String query, Iterable<Element> roots); [EOL] private Elements select(); [EOL] private void combinator(String combinator); [EOL] private Elements findElements(); [EOL] private void addElements(Collection<Element> add); [EOL] private void intersectElements(Collection<Element> intersect); [EOL] private Elements byId(); [EOL] private Elements byClass(); [EOL] private Elements byTag(); [EOL] private Elements byAttribute(); [EOL] private Elements allElements(); [EOL] private Elements indexLessThan(); [EOL] private Elements indexGreaterThan(); [EOL] private Elements indexEquals(); [EOL] private int consumeIndex(); [EOL] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); [EOL] String[] combinators=Optional[{ ",", ">", "+", "~", " " }]
public void testCombinatorGreaterThan() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] root.appendChild(child); [EOL] Selector selector = new Selector("div > span", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator(">"); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(child)); [EOL] }
public void testCombinatorSpace() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] root.appendChild(child); [EOL] Selector selector = new Selector("div span", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator(" "); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(child)); [EOL] }
public void testCombinatorPlus() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("span"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] root.appendChild(child1); [EOL] root.appendChild(child2); [EOL] Selector selector = new Selector("div + span", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator("+"); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(child2)); [EOL] }
public void testCombinatorTilde() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("span"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] root.appendChild(child1); [EOL] root.appendChild(child2); [EOL] Selector selector = new Selector("div ~ span", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator("~"); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(child2)); [EOL] }
public void testCombinatorIllegalStateException() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Selector selector = new Selector("div ! span", root); [EOL] try { [EOL] selector.combinator("!"); [EOL] fail("IllegalStateException expected"); [EOL] } catch (IllegalStateException e) { [EOL] assertEquals("Unknown combinator: !", e.getMessage()); [EOL] } [EOL] }
public void testFindElementsById() { [EOL] Selector selector = new Selector("#someId", null); [EOL] Elements elements = selector.findElements(); [EOL] assertNotNull(elements); [EOL] assertFalse(elements.isEmpty()); [EOL] }
public void testFindElementsByClass() { [EOL] Selector selector = new Selector(".someClass", null); [EOL] Elements elements = selector.findElements(); [EOL] assertNotNull(elements); [EOL] assertFalse(elements.isEmpty()); [EOL] }
public void testFindElementsByTagName() { [EOL] Selector selector = new Selector("someTag", null); [EOL] Elements elements = selector.findElements(); [EOL] assertNotNull(elements); [EOL] assertFalse(elements.isEmpty()); [EOL] }
public void testFindElementsByAttribute() { [EOL] Selector selector = new Selector("[someAttribute]", null); [EOL] Elements elements = selector.findElements(); [EOL] assertNotNull(elements); [EOL] assertFalse(elements.isEmpty()); [EOL] }
public void testFindAllElements() { [EOL] Selector selector = new Selector("*", null); [EOL] Elements elements = selector.findElements(); [EOL] assertNotNull(elements); [EOL] assertFalse(elements.isEmpty()); [EOL] }
public void testFindElementsIndexLessThan() { [EOL] Selector selector = new Selector(":lt(5)", null); [EOL] Elements elements = selector.findElements(); [EOL] assertNotNull(elements); [EOL] assertFalse(elements.isEmpty()); [EOL] }
public void testFindElementsIndexGreaterThan() { [EOL] Selector selector = new Selector(":gt(5)", null); [EOL] Elements elements = selector.findElements(); [EOL] assertNotNull(elements); [EOL] assertFalse(elements.isEmpty()); [EOL] }
public void testFindElementsIndexEquals() { [EOL] Selector selector = new Selector(":eq(5)", null); [EOL] Elements elements = selector.findElements(); [EOL] assertNotNull(elements); [EOL] assertFalse(elements.isEmpty()); [EOL] }
public void testFindElementsParseException() { [EOL] Selector selector = new Selector("invalidQuery", null); [EOL] try { [EOL] selector.findElements(); [EOL] fail("SelectorParseException expected"); [EOL] } catch (SelectorParseException e) { [EOL] } [EOL] }
private void addElements(Collection<Element> add) { [EOL] elements.addAll(add); [EOL] } [EOL] private Selector(String query, Element root); [EOL] public SelectorParseException(String s); [EOL] public static Elements select(String query, Element root); [EOL] public static Elements select(String query, Iterable<Element> roots); [EOL] private Elements select(); [EOL] private void combinator(String combinator); [EOL] private Elements findElements(); [EOL] private void addElements(Collection<Element> add); [EOL] private void intersectElements(Collection<Element> intersect); [EOL] private Elements byId(); [EOL] private Elements byClass(); [EOL] private Elements byTag(); [EOL] private Elements byAttribute(); [EOL] private Elements allElements(); [EOL] private Elements indexLessThan(); [EOL] private Elements indexGreaterThan(); [EOL] private Elements indexEquals(); [EOL] private int consumeIndex(); [EOL] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); [EOL] String[] combinators=Optional[{ ",", ">", "+", "~", " " }];
public void testByTagWithNonEmptyTagName() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.appendElement("p").text("First"); [EOL] root.appendElement("p").text("Second"); [EOL] String query = "p"; [EOL] Elements result = new Selector(query, root).byTag(); [EOL] assertNotNull(result); [EOL] assertEquals(2, result.size()); [EOL] assertEquals("First", result.get(0).text()); [EOL] assertEquals("Second", result.get(1).text()); [EOL] }
public void testByTagWithEmptyTagName() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] String query = ""; [EOL] try { [EOL] new Selector(query, root).byTag(); [EOL] fail("Should have thrown an IllegalArgumentException because the tag name is empty."); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAllElements() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Selector selector = new Selector("*", root); [EOL] Elements result = selector.allElements(); [EOL] assertNotNull(result); [EOL] assertTrue(result.size() > 0); [EOL] }
public void testSelectWithRoot() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.appendElement("p").text("First"); [EOL] root.appendElement("p").text("Second"); [EOL] Elements result = Selector.select("p", root); [EOL] assertNotNull(result); [EOL] assertEquals(2, result.size()); [EOL] }
public void testSelectWithIterableRoots() { [EOL] Element root1 = new Element(Tag.valueOf("div"), ""); [EOL] Element root2 = new Element(Tag.valueOf("div"), ""); [EOL] root1.appendElement("p").text("First"); [EOL] root2.appendElement("p").text("Second"); [EOL] List<Element> roots = Arrays.asList(root1, root2); [EOL] Elements result = Selector.select("p", roots); [EOL] assertNotNull(result); [EOL] assertEquals(2, result.size()); [EOL] }
public void testSelectorParseException() { [EOL] try { [EOL] throw new Selector.SelectorParseException("Invalid selector"); [EOL] } catch (Selector.SelectorParseException e) { [EOL] assertEquals("Invalid selector", e.getMessage()); [EOL] } [EOL] }
public void testFilterForChildren_WithEmptyParentsAndCandidates() { [EOL] Collection<Element> parents = Collections.emptyList(); [EOL] Collection<Element> candidates = Collections.emptyList(); [EOL] Elements result = filterForChildren(parents, candidates); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testFilterForChildren_WithNonEmptyParentsAndNoMatchingCandidates() { [EOL] Collection<Element> parents = new ArrayList<>(); [EOL] parents.add(new Element(Tag.valueOf("div"), "")); [EOL] Collection<Element> candidates = new ArrayList<>(); [EOL] candidates.add(new Element(Tag.valueOf("span"), "")); [EOL] Elements result = filterForChildren(parents, candidates); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testFilterForChildren_WithMatchingCandidates() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] child.appendTo(parent); [EOL] Collection<Element> parents = new ArrayList<>(); [EOL] parents.add(parent); [EOL] Collection<Element> candidates = new ArrayList<>(); [EOL] candidates.add(child); [EOL] Elements result = filterForChildren(parents, candidates); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(result.contains(child)); [EOL] }
public void testFilterForChildren_WithNonMatchingParent() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element nonMatchingParent = new Element(Tag.valueOf("section"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] child.appendTo(nonMatchingParent); [EOL] Collection<Element> parents = new ArrayList<>(); [EOL] parents.add(parent); [EOL] Collection<Element> candidates = new ArrayList<>(); [EOL] candidates.add(child); [EOL] Elements result = filterForChildren(parents, candidates); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testPrependTextWithEmptyString() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Element result = element.prependText(""); [EOL] assertEquals("", result.text()); [EOL] assertEquals("div", result.tagName()); [EOL] }
public void testPrependTextWithNonEmptyString() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] Element result = element.prependText("Sample text"); [EOL] assertEquals("Sample text", result.text()); [EOL] assertEquals("p", result.tagName()); [EOL] }
public void testPrependTextToExistingText() { [EOL] Element element = new Element(Tag.valueOf("span"), "").text("Existing text"); [EOL] Element result = element.prependText("New text"); [EOL] assertEquals("New textExisting text", result.text()); [EOL] assertEquals("span", result.tagName()); [EOL] }
public void testGetDeepChildWithNoChildren() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element result = getDeepChild(parent); [EOL] assertSame("The method should return the same element when there are no children", parent, result); [EOL] } [EOL] public void testGetDeepChildWithNestedChildren() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = parent.appendElement("span"); [EOL] Element child2 = child1.appendElement("a"); [EOL] Element result = getDeepChild(parent); [EOL] assertSame("The method should return the deepest child", child2, result); [EOL] }
public void testDataWithOnlyDataNodes() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] DataNode dataNode1 = new DataNode("data1", ""); [EOL] DataNode dataNode2 = new DataNode("data2", ""); [EOL] element.appendChild(dataNode1); [EOL] element.appendChild(dataNode2); [EOL] String result = element.data(); [EOL] assertEquals("data1data2", result); [EOL] }
public void testDataWithMixedNodes() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] DataNode dataNode = new DataNode("data", ""); [EOL] Element childElement = new Element(Tag.valueOf("span"), ""); [EOL] DataNode childDataNode = new DataNode("childData", ""); [EOL] childElement.appendChild(childDataNode); [EOL] element.appendChild(dataNode); [EOL] element.appendChild(childElement); [EOL] String result = element.data(); [EOL] assertEquals("datachildData", result); [EOL] }
public void testDataWithNoDataNodes() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Element childElement = new Element(Tag.valueOf("span"), ""); [EOL] element.appendChild(childElement); [EOL] String result = element.data(); [EOL] assertEquals("", result); [EOL] }
public void testHtml_EmptyDocument() { [EOL] Document doc = Jsoup.parse(""); [EOL] String result = doc.html(); [EOL] assertEquals("", result); [EOL] }
public void testHtml_SimpleDocument() { [EOL] Document doc = Jsoup.parse("<p>Hello</p>"); [EOL] String result = doc.html(); [EOL] assertEquals("<html>\n <head></head>\n <body>\n  <p>Hello</p>\n </body>\n</html>", result); [EOL] }
public void testHtml_DocumentWithDoctype() { [EOL] Document doc = Jsoup.parse("<!DOCTYPE html><html><head><title>First parse</title></head>" [EOL] + "<body><p>Parsed HTML into a doc.</p></body></html>"); [EOL] String result = doc.html(); [EOL] assertTrue(result.startsWith("<!doctype html>")); [EOL] assertTrue(result.contains("<title>First parse</title>")); [EOL] assertTrue(result.contains("<p>Parsed HTML into a doc.</p>")); [EOL] }
public void testParseCommentWithProperClosing() { [EOL] TokenQueue tq = new TokenQueue("<!--This is a comment-->"); [EOL] String baseUri = "http://example.com"; [EOL] Node node = new Element(Tag.valueOf("div"), baseUri); [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] parser.getTreeBuilder().initializeParse(tq, baseUri, node); [EOL] parser.getTreeBuilder().parseComment(); [EOL] Comment comment = (Comment) node.childNode(0); [EOL] assertEquals("This is a comment", comment.getData()); [EOL] }
public void testParseCommentWithExtraHyphen() { [EOL] TokenQueue tq = new TokenQueue("<!--This is a comment--->"); [EOL] String baseUri = "http://example.com"; [EOL] Node node = new Element(Tag.valueOf("div"), baseUri); [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] parser.getTreeBuilder().initializeParse(tq, baseUri, node); [EOL] parser.getTreeBuilder().parseComment(); [EOL] Comment comment = (Comment) node.childNode(0); [EOL] assertEquals("This is a comment-", comment.getData()); [EOL] }
public void setValue_NullValue_ThrowsException() { [EOL] Attribute attribute = new Attribute("key", "initialValue"); [EOL] try { [EOL] attribute.setValue(null); [EOL] fail("Should have thrown IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void setValue_ValidValue_SetsValue() { [EOL] Attribute attribute = new Attribute("key", "initialValue"); [EOL] String newValue = "newValue"; [EOL] attribute.setValue(newValue); [EOL] assertEquals("newValue", attribute.getValue()); [EOL] }
public void testHtmlWithSimpleKeyValue() { [EOL] Attribute attr = new Attribute("key", "value"); [EOL] String result = attr.html(); [EOL] assertEquals("key=\"value\"", result); [EOL] }
public void testHtmlWithSpecialCharactersInValue() { [EOL] Attribute attr = new Attribute("key", "value<>&\"'"); [EOL] String result = attr.html(); [EOL] assertEquals("key=\"value&lt;&gt;&amp;&quot;&#x27;\"", result); [EOL] }
public void testHtmlWithNullValue() { [EOL] Attribute attr = new Attribute("key", null); [EOL] String result = attr.html(); [EOL] assertEquals("key=\"null\"", result); [EOL] }
public void testBasicWithImages() { [EOL] Whitelist whitelist = Whitelist.basicWithImages(); [EOL] assertTrue(whitelist.isSafeTag("img")); [EOL] assertTrue(whitelist.isSafeAttribute("img", "align")); [EOL] assertTrue(whitelist.isSafeAttribute("img", "alt")); [EOL] assertTrue(whitelist.isSafeAttribute("img", "height")); [EOL] assertTrue(whitelist.isSafeAttribute("img", "src")); [EOL] assertTrue(whitelist.isSafeAttribute("img", "title")); [EOL] assertTrue(whitelist.isSafeAttribute("img", "width")); [EOL] assertTrue(whitelist.isSafeAttribute("img", "src", "http")); [EOL] assertTrue(whitelist.isSafeAttribute("img", "src", "https")); [EOL] }
public void testGetWithExistingKey() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key1", "value1"); [EOL] String result = attributes.get("key1"); [EOL] assert result.equals("value1"); [EOL] }
public void testGetWithNonExistingKey() { [EOL] Attributes attributes = new Attributes(); [EOL] String result = attributes.get("nonExistingKey"); [EOL] assert result.equals(""); [EOL] }
public void testGetWithEmptyKey() { [EOL] Attributes attributes = new Attributes(); [EOL] try { [EOL] attributes.get(""); [EOL] assert false : "Expected an IllegalArgumentException to be thrown"; [EOL] } catch (IllegalArgumentException e) { [EOL] assert e.getMessage().contains("String must not be empty"); [EOL] } [EOL] }
public void testGetWithNullKey() { [EOL] Attributes attributes = new Attributes(); [EOL] try { [EOL] attributes.get(null); [EOL] assert false : "Expected an IllegalArgumentException to be thrown"; [EOL] } catch (IllegalArgumentException e) { [EOL] assert e.getMessage().contains("String must not be empty"); [EOL] } [EOL] }
public void putAttributeNonNull() { [EOL] Attributes attributes = new Attributes(); [EOL] Attribute attr = new Attribute("key", "value"); [EOL] attributes.put(attr); [EOL] assertEquals("value", attributes.get("key").getValue()); [EOL] }
public void putAttributeNull() { [EOL] Attributes attributes = new Attributes(); [EOL] try { [EOL] attributes.put(null); [EOL] fail("Should throw IllegalArgumentException for null attribute"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testHasKeyWithExistingKey() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key1", "value1"); [EOL] boolean hasKey = attributes.hasKey("key1"); [EOL] assertTrue(hasKey); [EOL] }
public void testHasKeyWithNonExistingKey() { [EOL] Attributes attributes = new Attributes(); [EOL] boolean hasKey = attributes.hasKey("nonExistingKey"); [EOL] assertFalse(hasKey); [EOL] }
public void testHasKeyWithCaseInsensitivity() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("Key1", "value1"); [EOL] boolean hasKeyLowercase = attributes.hasKey("key1"); [EOL] boolean hasKeyUppercase = attributes.hasKey("KEY1"); [EOL] assertTrue(hasKeyLowercase); [EOL] assertTrue(hasKeyUppercase); [EOL] }
public void addAllAttributes_WithEmptyAttributes_ShouldNotModifyExisting() { [EOL] Attributes existing = new Attributes(); [EOL] existing.put("key1", "value1"); [EOL] Attributes incoming = new Attributes(); [EOL] existing.addAll(incoming); [EOL] assertEquals(1, existing.size()); [EOL] assertEquals("value1", existing.get("key1")); [EOL] }
public void addAllAttributes_WithNonEmptyAttributes_ShouldAddAll() { [EOL] Attributes existing = new Attributes(); [EOL] existing.put("key1", "value1"); [EOL] Attributes incoming = new Attributes(); [EOL] incoming.put("key2", "value2"); [EOL] incoming.put("key3", "value3"); [EOL] existing.addAll(incoming); [EOL] assertEquals(3, existing.size()); [EOL] assertEquals("value1", existing.get("key1")); [EOL] assertEquals("value2", existing.get("key2")); [EOL] assertEquals("value3", existing.get("key3")); [EOL] }
public void addAllAttributes_WithNull_ShouldNotThrowException() { [EOL] Attributes existing = new Attributes(); [EOL] existing.put("key1", "value1"); [EOL] existing.addAll(null); [EOL] assertEquals(1, existing.size()); [EOL] assertEquals("value1", existing.get("key1")); [EOL] }
public void testIterator_EmptyAttributes() { [EOL] Attributes attributes = new Attributes(); [EOL] Iterator<Attribute> iterator = attributes.iterator(); [EOL] assertFalse(iterator.hasNext()); [EOL] }
public void testIterator_SingleAttribute() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key", "value"); [EOL] Iterator<Attribute> iterator = attributes.iterator(); [EOL] assertTrue(iterator.hasNext()); [EOL] Attribute attribute = iterator.next(); [EOL] assertEquals("key", attribute.getKey()); [EOL] assertEquals("value", attribute.getValue()); [EOL] assertFalse(iterator.hasNext()); [EOL] }
public void testIterator_MultipleAttributes() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key1", "value1"); [EOL] attributes.put("key2", "value2"); [EOL] Iterator<Attribute> iterator = attributes.iterator(); [EOL] assertTrue(iterator.hasNext()); [EOL] Attribute firstAttribute = iterator.next(); [EOL] assertNotNull(firstAttribute); [EOL] assertTrue(iterator.hasNext()); [EOL] Attribute secondAttribute = iterator.next(); [EOL] assertNotNull(secondAttribute); [EOL] assertFalse(iterator.hasNext()); [EOL] }
public void testAsListWithEmptyAttributes() { [EOL] Attributes attributes = new Attributes(); [EOL] List<Attribute> list = attributes.asList(); [EOL] assertTrue(list.isEmpty()); [EOL] }
public void testAsListWithSingleAttribute() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key", "value"); [EOL] List<Attribute> list = attributes.asList(); [EOL] assertEquals(1, list.size()); [EOL] assertEquals(new Attribute("key", "value"), list.get(0)); [EOL] }
public void testAsListWithMultipleAttributes() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key1", "value1"); [EOL] attributes.put("key2", "value2"); [EOL] List<Attribute> list = attributes.asList(); [EOL] assertEquals(2, list.size()); [EOL] assertTrue(list.contains(new Attribute("key1", "value1"))); [EOL] assertTrue(list.contains(new Attribute("key2", "value2"))); [EOL] }
public void testHtmlWithNoAttributes() { [EOL] Attributes attributes = new Attributes(); [EOL] String result = attributes.html(); [EOL] assertEquals("", result); [EOL] }
public void testHtmlWithSingleAttribute() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key", "value"); [EOL] String result = attributes.html(); [EOL] assertEquals(" key=\"value\"", result); [EOL] }
public void testHtmlWithMultipleAttributes() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key1", "value1"); [EOL] attributes.put("key2", "value2"); [EOL] attributes.put("key3", "value3"); [EOL] String result = attributes.html(); [EOL] assertEquals(" key1=\"value1\" key2=\"value2\" key3=\"value3\"", result); [EOL] }
public void testHashCode_whenAttributesNotNull() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "value"); [EOL] int result = element.hashCode(); [EOL] assertNotEquals(0, result); [EOL] } [EOL] public void testHashCode_whenAttributesNull() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attributes = null; [EOL] int result = element.hashCode(); [EOL] assertEquals(0, result); [EOL] }
public void testDataNodeConstructorWithValidData() { [EOL] String data = "some data"; [EOL] String baseUri = "http://example.com"; [EOL] DataNode node = new DataNode(data, baseUri); [EOL] assertEquals(data, node.attributes.get("data")); [EOL] assertEquals(baseUri, node.baseUri()); [EOL] }
public void testDataNodeConstructorWithEmptyData() { [EOL] String data = "";// Empty data [EOL] String baseUri = "http://example.com"; [EOL] DataNode node = new DataNode(data, baseUri); [EOL] assertEquals(data, node.attributes.get("data")); [EOL] assertEquals(baseUri, node.baseUri()); [EOL] }
public void testDataNodeConstructorWithNullData() { [EOL] String data = null;// Null data [EOL] String baseUri = "http://example.com"; [EOL] DataNode node = new DataNode(data, baseUri); [EOL] assertNull(node.attributes.get("data")); [EOL] assertEquals(baseUri, node.baseUri()); [EOL] }
public void testCanContain_BlockChildCannotContainBlock() { [EOL] Tag parent = new Tag("div"); [EOL] parent.canContainBlock = false; [EOL] Tag child = new Tag("p"); [EOL] child.isBlock = true; [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_InlineChildCannotContainInline() { [EOL] Tag parent = new Tag("span"); [EOL] parent.canContainInline = false; [EOL] Tag child = new Tag("span"); [EOL] child.isBlock = false; [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_OptionalClosingSameTag() { [EOL] Tag parent = new Tag("div"); [EOL] parent.optionalClosing = true; [EOL] Tag child = new Tag("div"); [EOL] assertTrue(parent.equals(child)); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_EmptyTag() { [EOL] Tag parent = new Tag("br"); [EOL] parent.empty = true; [EOL] Tag child = new Tag("span"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_IsDataTag() { [EOL] Tag parent = new Tag("script"); [EOL] parent.isData = true; [EOL] Tag child = new Tag("div"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_HeadTagWithValidChild() { [EOL] Tag parent = new Tag("head"); [EOL] Tag child = new Tag("meta"); [EOL] assertTrue(parent.canContain(child)); [EOL] }
public void testCanContain_HeadTagWithInvalidChild() { [EOL] Tag parent = new Tag("head"); [EOL] Tag child = new Tag("div"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_DtTagWithDdChild() { [EOL] Tag parent = new Tag("dt"); [EOL] Tag child = new Tag("dd"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_DdTagWithDtChild() { [EOL] Tag parent = new Tag("dd"); [EOL] Tag child = new Tag("dt"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_ValidParentChildCombination() { [EOL] Tag parent = new Tag("body"); [EOL] Tag child = new Tag("div"); [EOL] assertTrue(parent.canContain(child)); [EOL] }
