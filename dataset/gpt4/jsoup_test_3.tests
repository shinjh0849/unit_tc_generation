@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>"); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.hasAttr("class")); [EOL]     assertFalse(ps.hasAttr("style")); [EOL] }
@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>"); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.hasAttr("class")); [EOL]     assertFalse(ps.hasAttr("style")); [EOL] }
@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>"); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.hasAttr("class")); [EOL]     assertFalse(ps.hasAttr("style")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("class"); [EOL]     Element span = els.get(0); [EOL]     assertEquals("mellow yellow", span.className()); [EOL]     assertTrue(span.hasClass("mellow")); [EOL]     assertTrue(span.hasClass("yellow")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains("mellow")); [EOL]     assertTrue(classes.contains("yellow")); [EOL]     assertEquals("", doc.className()); [EOL]     assertFalse(doc.hasClass("mellow")); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("class"); [EOL]     Element span = els.get(0); [EOL]     assertEquals("mellow yellow", span.className()); [EOL]     assertTrue(span.hasClass("mellow")); [EOL]     assertTrue(span.hasClass("yellow")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains("mellow")); [EOL]     assertTrue(classes.contains("yellow")); [EOL]     assertEquals("", doc.className()); [EOL]     assertFalse(doc.hasClass("mellow")); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("class"); [EOL]     Element span = els.get(0); [EOL]     assertEquals("mellow yellow", span.className()); [EOL]     assertTrue(span.hasClass("mellow")); [EOL]     assertTrue(span.hasClass("yellow")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains("mellow")); [EOL]     assertTrue(classes.contains("yellow")); [EOL]     assertEquals("", doc.className()); [EOL]     assertFalse(doc.hasClass("mellow")); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("class"); [EOL]     Element span = els.get(0); [EOL]     assertEquals("mellow yellow", span.className()); [EOL]     assertTrue(span.hasClass("mellow")); [EOL]     assertTrue(span.hasClass("yellow")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains("mellow")); [EOL]     assertTrue(classes.contains("yellow")); [EOL]     assertEquals("", doc.className()); [EOL]     assertFalse(doc.hasClass("mellow")); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("class"); [EOL]     Element span = els.get(0); [EOL]     assertEquals("mellow yellow", span.className()); [EOL]     assertTrue(span.hasClass("mellow")); [EOL]     assertTrue(span.hasClass("yellow")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains("mellow")); [EOL]     assertTrue(classes.contains("yellow")); [EOL]     assertEquals("", doc.className()); [EOL]     assertFalse(doc.hasClass("mellow")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void setTextPreservesDocumentStructure() { [EOL]     Document doc = Jsoup.parse("<p>Hello</p>"); [EOL]     doc.text("Replaced"); [EOL]     assertEquals("Replaced", doc.text()); [EOL]     assertEquals("Replaced", doc.body().text()); [EOL]     assertEquals(1, doc.select("head").size()); [EOL] }
@Test [EOL] public void setTextPreservesDocumentStructure() { [EOL]     Document doc = Jsoup.parse("<p>Hello</p>"); [EOL]     doc.text("Replaced"); [EOL]     assertEquals("Replaced", doc.text()); [EOL]     assertEquals("Replaced", doc.body().text()); [EOL]     assertEquals(1, doc.select("head").size()); [EOL] }
@Test [EOL] public void setTextPreservesDocumentStructure() { [EOL]     Document doc = Jsoup.parse("<p>Hello</p>"); [EOL]     doc.text("Replaced"); [EOL]     assertEquals("Replaced", doc.text()); [EOL]     assertEquals("Replaced", doc.body().text()); [EOL]     assertEquals(1, doc.select("head").size()); [EOL] }
@Test [EOL] public void mixCombinatorGroup() { [EOL]     String h = "<div class=foo><ol><li>One<li>Two<li>Three</ol></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(".foo > ol, ol > li + li"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals("ol", els.get(0).tagName()); [EOL]     assertEquals("Two", els.get(1).text()); [EOL]     assertEquals("Three", els.get(2).text()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.html("<p>there</p><p>now</p>"); [EOL]     assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.html("<p>there</p><p>now</p>"); [EOL]     assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.html("<p>there</p><p>now</p>"); [EOL]     assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.html("<p>there</p><p>now</p>"); [EOL]     assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("class"); [EOL]     Element span = els.get(0); [EOL]     assertEquals("mellow yellow", span.className()); [EOL]     assertTrue(span.hasClass("mellow")); [EOL]     assertTrue(span.hasClass("yellow")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains("mellow")); [EOL]     assertTrue(classes.contains("yellow")); [EOL]     assertEquals("", doc.className()); [EOL]     assertFalse(doc.hasClass("mellow")); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("class"); [EOL]     Element span = els.get(0); [EOL]     assertEquals("mellow yellow", span.className()); [EOL]     assertTrue(span.hasClass("mellow")); [EOL]     assertTrue(span.hasClass("yellow")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains("mellow")); [EOL]     assertTrue(classes.contains("yellow")); [EOL]     assertEquals("", doc.className()); [EOL]     assertFalse(doc.hasClass("mellow")); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("class"); [EOL]     Element span = els.get(0); [EOL]     assertEquals("mellow yellow", span.className()); [EOL]     assertTrue(span.hasClass("mellow")); [EOL]     assertTrue(span.hasClass("yellow")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains("mellow")); [EOL]     assertTrue(classes.contains("yellow")); [EOL]     assertEquals("", doc.className()); [EOL]     assertFalse(doc.hasClass("mellow")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testGetText() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     assertEquals("Hello Another element", doc.text()); [EOL]     assertEquals("Another element", doc.getElementsByTag("p").get(1).text()); [EOL] }
@Test [EOL] public void testGetText() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     assertEquals("Hello Another element", doc.text()); [EOL]     assertEquals("Another element", doc.getElementsByTag("p").get(1).text()); [EOL] }
@Test [EOL] public void testGetText() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     assertEquals("Hello Another element", doc.text()); [EOL]     assertEquals("Another element", doc.getElementsByTag("p").get(1).text()); [EOL] }
@Test [EOL] public void testGetText() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     assertEquals("Hello Another element", doc.text()); [EOL]     assertEquals("Another element", doc.getElementsByTag("p").get(1).text()); [EOL] }
@Test [EOL] public void testGetText() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     assertEquals("Hello Another element", doc.text()); [EOL]     assertEquals("Another element", doc.getElementsByTag("p").get(1).text()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div>"); [EOL]     Element div = doc.select("div").first(); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div>"); [EOL]     Element div = doc.select("div").first(); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div>"); [EOL]     Element div = doc.select("div").first(); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div>"); [EOL]     Element div = doc.select("div").first(); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div>"); [EOL]     Element div = doc.select("div").first(); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void parsesRoughAttributes() { [EOL]     String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     assertEquals("foo > bar", p.attr("class")); [EOL] }
@Test [EOL] public void parsesRoughAttributes() { [EOL]     String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     assertEquals("foo > bar", p.attr("class")); [EOL] }
@Test [EOL] public void parsesRoughAttributes() { [EOL]     String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     assertEquals("foo > bar", p.attr("class")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile("/htmltests/thumb.jpg"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8"); [EOL]     assertTrue(doc.text().contains("gd-jpeg")); [EOL] }
