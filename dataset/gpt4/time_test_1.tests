public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testIsBefore_YMD() { [EOL]     YearMonthDay test1 = new YearMonthDay(2005, 6, 2); [EOL]     YearMonthDay test1a = new YearMonthDay(2005, 6, 2); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     YearMonthDay test2 = new YearMonthDay(2005, 7, 2); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new YearMonthDay(2005, 7, 2).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_YMD() { [EOL]     YearMonthDay test1 = new YearMonthDay(2005, 6, 2); [EOL]     YearMonthDay test1a = new YearMonthDay(2005, 6, 2); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     YearMonthDay test2 = new YearMonthDay(2005, 7, 2); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new YearMonthDay(2005, 7, 2).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_YM() { [EOL]     YearMonth test1 = new YearMonth(2005, 6); [EOL]     YearMonth test1a = new YearMonth(2005, 6); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     YearMonth test2 = new YearMonth(2005, 7); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new YearMonth(2005, 7).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_YM() { [EOL]     YearMonth test1 = new YearMonth(2005, 6); [EOL]     YearMonth test1a = new YearMonth(2005, 6); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     YearMonth test2 = new YearMonth(2005, 7); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new YearMonth(2005, 7).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_YM() { [EOL]     YearMonth test1 = new YearMonth(2005, 6); [EOL]     YearMonth test1a = new YearMonth(2005, 6); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     YearMonth test2 = new YearMonth(2005, 7); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new YearMonth(2005, 7).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusDays_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusDays(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusDays(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusDays(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusDays(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusDays(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testToDateTimeAtMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testPropertyGetMaxMinValuesDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] }
public void testPropertyGetMaxMinValuesDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] }
public void testPropertyGetMaxMinValuesDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] }
public void testPropertyGetMaxMinValuesDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.year().addWrapFieldToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1); [EOL]     check(copy, -292275054, 6, 9); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1); [EOL]     check(copy, 292278993, 6, 9); [EOL] }
public void testConstructor_long_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testWithPeriodType3() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard()); [EOL]     try { [EOL]         test.withPeriodType(PeriodType.dayTime()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithPeriodType3() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard()); [EOL]     try { [EOL]         test.withPeriodType(PeriodType.dayTime()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFields2() { [EOL]     Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test2 = null; [EOL]     Period result = test1.withFields(test2); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1); [EOL]     assertSame(test1, result); [EOL] }
public void testWithFields2() { [EOL]     Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test2 = null; [EOL]     Period result = test1.withFields(test2); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1); [EOL]     assertSame(test1, result); [EOL] }
public void testWithFieldAdded3() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.years(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded3() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.years(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded3() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.years(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testToStandardDays_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDays().getDays()); [EOL] }
public void testToStandardDays_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDays().getDays()); [EOL] }
public void testToStandardDays_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDays().getDays()); [EOL] }
public void testToStandardDays_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDays().getDays()); [EOL] }
public void testToStandardDays_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDays().getDays()); [EOL] }
public void testToStandardDays_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDays().getDays()); [EOL] }
public void testToStandardDays_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDays().getDays()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance().withUTC()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance().withUTC()); [EOL] }
public void testToString() { [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("IslamicChronology[Asia/Tokyo]", IslamicChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance().toString()); [EOL]     assertEquals("IslamicChronology[UTC]", IslamicChronology.getInstanceUTC().toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("IslamicChronology[Asia/Tokyo]", IslamicChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance().toString()); [EOL]     assertEquals("IslamicChronology[UTC]", IslamicChronology.getInstanceUTC().toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("IslamicChronology[Asia/Tokyo]", IslamicChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance().toString()); [EOL]     assertEquals("IslamicChronology[UTC]", IslamicChronology.getInstanceUTC().toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("IslamicChronology[Asia/Tokyo]", IslamicChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance().toString()); [EOL]     assertEquals("IslamicChronology[UTC]", IslamicChronology.getInstanceUTC().toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("IslamicChronology[Asia/Tokyo]", IslamicChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance().toString()); [EOL]     assertEquals("IslamicChronology[UTC]", IslamicChronology.getInstanceUTC().toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("IslamicChronology[Asia/Tokyo]", IslamicChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance().toString()); [EOL]     assertEquals("IslamicChronology[UTC]", IslamicChronology.getInstanceUTC().toString()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance().withUTC()); [EOL] }
public void testWithZone() { [EOL]     assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstanceUTC().withZone(PARIS)); [EOL] }
public void testWithZone() { [EOL]     assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstanceUTC().withZone(PARIS)); [EOL] }
public void testWithZone() { [EOL]     assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstanceUTC().withZone(PARIS)); [EOL] }
public void testToString() { [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("IslamicChronology[Asia/Tokyo]", IslamicChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance().toString()); [EOL]     assertEquals("IslamicChronology[UTC]", IslamicChronology.getInstanceUTC().toString()); [EOL] }
public void testFactory_Zone_RI() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L)); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(new Instant(0L), chrono.getGregorianCutover()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L)).getClass()); [EOL]     DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     chrono = GJChronology.getInstance(TOKYO, null); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(cutover.toInstant(), chrono.getGregorianCutover()); [EOL] }
public void testFactory_Zone_RI() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L)); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(new Instant(0L), chrono.getGregorianCutover()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L)).getClass()); [EOL]     DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     chrono = GJChronology.getInstance(TOKYO, null); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(cutover.toInstant(), chrono.getGregorianCutover()); [EOL] }
public void testFactory_Zone_RI() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L)); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(new Instant(0L), chrono.getGregorianCutover()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L)).getClass()); [EOL]     DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     chrono = GJChronology.getInstance(TOKYO, null); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(cutover.toInstant(), chrono.getGregorianCutover()); [EOL] }
public void testFactory_Zone_RI() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L)); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(new Instant(0L), chrono.getGregorianCutover()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L)).getClass()); [EOL]     DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     chrono = GJChronology.getInstance(TOKYO, null); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(cutover.toInstant(), chrono.getGregorianCutover()); [EOL] }
public void testFactory_Zone_RI() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L)); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(new Instant(0L), chrono.getGregorianCutover()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L)).getClass()); [EOL]     DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     chrono = GJChronology.getInstance(TOKYO, null); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(cutover.toInstant(), chrono.getGregorianCutover()); [EOL] }
public void testIllegalDates() { [EOL]     try { [EOL]         new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testIllegalDates() { [EOL]     try { [EOL]         new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testIllegalDates() { [EOL]     try { [EOL]         new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testIllegalDates() { [EOL]     try { [EOL]         new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testIllegalDates() { [EOL]     try { [EOL]         new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testIllegalDates() { [EOL]     try { [EOL]         new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void test_plusWeekyears_positiveToZero_crossCutover() { [EOL]     LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek()); [EOL]     assertEquals(expected, date.weekyear().addToCopy(-2003)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP_GJChronology() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP_GJChronology() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP_GJChronology() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = new int[] { 3, 4, 5, 6 }; [EOL]     int[] actual = StringConverter.INSTANCE.getPartialValues(tod, "T03:04:05.006", ISOChronology.getInstance()); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] }
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = new int[] { 3, 4, 5, 6 }; [EOL]     int[] actual = StringConverter.INSTANCE.getPartialValues(tod, "T03:04:05.006", ISOChronology.getInstance()); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] }
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = new int[] { 3, 4, 5, 6 }; [EOL]     int[] actual = StringConverter.INSTANCE.getPartialValues(tod, "T03:04:05.006", ISOChronology.getInstance()); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoPeriod_Object3() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M48.034S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(48, m.getSeconds()); [EOL]     assertEquals(34, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object3() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M48.034S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(48, m.getSeconds()); [EOL]     assertEquals(34, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object3() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M48.034S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(48, m.getSeconds()); [EOL]     assertEquals(34, m.getMillis()); [EOL] }
public void testSetIntoIntervalEx_Object_Chronology4() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "/P1Y", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology4() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "/P1Y", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology4() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "/P1Y", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology4() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "/P1Y", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology4() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "/P1Y", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology4() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "/P1Y", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology4() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "/P1Y", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatPrintZeroAlways() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroAlways().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroNever() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroNever().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroAlways() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroAlways().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroAlways() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroAlways().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void test_wordBased_es_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas y 5 horas")); [EOL] }
public void test_wordBased_es_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas y 5 horas")); [EOL] }
public void test_wordBased_es_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas y 5 horas")); [EOL] }
public void test_wordBased_es_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas y 5 horas")); [EOL] }
public void test_wordBased_es_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas y 5 horas")); [EOL] }
public void test_wordBased_es_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas y 5 horas")); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testParseStandardFail3() { [EOL]     PeriodFormatter parser = ISOPeriodFormat.standard(); [EOL]     try { [EOL]         parser.parsePeriod("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatPrintZeroAlways() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroAlways().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroAlways() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroAlways().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroAlways() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroAlways().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroAlways() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroAlways().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroAlways() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroAlways().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testParseStandardFail3() { [EOL]     PeriodFormatter parser = ISOPeriodFormat.standard(); [EOL]     try { [EOL]         parser.parsePeriod("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseStandardFail3() { [EOL]     PeriodFormatter parser = ISOPeriodFormat.standard(); [EOL]     try { [EOL]         parser.parsePeriod("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseStandardFail3() { [EOL]     PeriodFormatter parser = ISOPeriodFormat.standard(); [EOL]     try { [EOL]         parser.parsePeriod("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseStandardFail3() { [EOL]     PeriodFormatter parser = ISOPeriodFormat.standard(); [EOL]     try { [EOL]         parser.parsePeriod("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseStandardFail3() { [EOL]     PeriodFormatter parser = ISOPeriodFormat.standard(); [EOL]     try { [EOL]         parser.parsePeriod("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseStandardFail3() { [EOL]     PeriodFormatter parser = ISOPeriodFormat.standard(); [EOL]     try { [EOL]         parser.parsePeriod("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public void testForStyle_shortTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("-S"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getTimeInstance(DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     if (TimeZone.getDefault() instanceof SimpleTimeZone) { [EOL]     } else { [EOL]         DateTime date = new DateTime(DateFormat.getTimeInstance(DateFormat.SHORT, FRANCE).parse(expect)); [EOL]         assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL]     } [EOL] }
public void testSubclassableConstructor() { [EOL]     DateTimeFormat f = new DateTimeFormat() { [EOL]     }; [EOL]     assertNotNull(f); [EOL] }
public void testFormat_dayOfWeek() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("e").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "3", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "3", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "3", f.print(dt)); [EOL] }
public void testForStyle_stringLengths() { [EOL]     try { [EOL]         DateTimeFormat.forStyle(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle(""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("SSS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForStyle_stringLengths() { [EOL]     try { [EOL]         DateTimeFormat.forStyle(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle(""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("SSS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForStyle_stringLengths() { [EOL]     try { [EOL]         DateTimeFormat.forStyle(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle(""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("SSS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForStyle_stringLengths() { [EOL]     try { [EOL]         DateTimeFormat.forStyle(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle(""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("SSS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardDays_long() throws Throwable { [EOL]     Duration test = Duration.standardDays(1); [EOL]     assertEquals(24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(2); [EOL]     assertEquals(2L * 24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardDays_long() throws Throwable { [EOL]     Duration test = Duration.standardDays(1); [EOL]     assertEquals(24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(2); [EOL]     assertEquals(2L * 24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardDays_long() throws Throwable { [EOL]     Duration test = Duration.standardDays(1); [EOL]     assertEquals(24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(2); [EOL]     assertEquals(2L * 24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardDays_long() throws Throwable { [EOL]     Duration test = Duration.standardDays(1); [EOL]     assertEquals(24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(2); [EOL]     assertEquals(2L * 24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardDays_long() throws Throwable { [EOL]     Duration test = Duration.standardDays(1); [EOL]     assertEquals(24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(2); [EOL]     assertEquals(2L * 24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_millis_long() throws Throwable { [EOL]     Duration test = Duration.millis(1); [EOL]     assertEquals(1L, test.getMillis()); [EOL]     test = Duration.millis(2); [EOL]     assertEquals(2L, test.getMillis()); [EOL]     test = Duration.millis(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_millis_long() throws Throwable { [EOL]     Duration test = Duration.millis(1); [EOL]     assertEquals(1L, test.getMillis()); [EOL]     test = Duration.millis(2); [EOL]     assertEquals(2L, test.getMillis()); [EOL]     test = Duration.millis(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_millis_long() throws Throwable { [EOL]     Duration test = Duration.millis(1); [EOL]     assertEquals(1L, test.getMillis()); [EOL]     test = Duration.millis(2); [EOL]     assertEquals(2L, test.getMillis()); [EOL]     test = Duration.millis(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis()); [EOL] }
public void testConstructor_Object3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Long base = new Long(length); [EOL]     Duration test = new Duration(base); [EOL]     assertEquals(length, test.getMillis()); [EOL] }
public void testToStandardDays() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L); [EOL]     assertEquals(Days.days(2), test.toStandardDays()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L); [EOL]     assertEquals(Days.days(-1), test.toStandardDays()); [EOL] }
public void testToStandardDays() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L); [EOL]     assertEquals(Days.days(2), test.toStandardDays()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L); [EOL]     assertEquals(Days.days(-1), test.toStandardDays()); [EOL] }
public void testToStandardDays() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L); [EOL]     assertEquals(Days.days(2), test.toStandardDays()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L); [EOL]     assertEquals(Days.days(-1), test.toStandardDays()); [EOL] }
public void testToStandardDays() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L); [EOL]     assertEquals(Days.days(2), test.toStandardDays()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L); [EOL]     assertEquals(Days.days(-1), test.toStandardDays()); [EOL] }
public void testWithMillis1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withMillis(123L); [EOL]     assertSame(test, result); [EOL] }
public void testWithMillis1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withMillis(123L); [EOL]     assertSame(test, result); [EOL] }
public void testWithDurationAdded_RD_int5() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(new Duration(8000L), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithDurationAdded_RD_int5() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(new Duration(8000L), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithDurationAdded_RD_int5() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(new Duration(8000L), 0); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD3() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD3() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(null); [EOL]     assertSame(test, result); [EOL] }
public void testSubclassableConstructor() { [EOL]     ISOPeriodFormat f = new ISOPeriodFormat() { [EOL]     }; [EOL]     assertNotNull(f); [EOL] }
public void testParseStandard4() { [EOL]     PeriodFormatter parser = ISOPeriodFormat.standard(); [EOL]     Period p = parser.parsePeriod("P2Y3DT5H6M7.008S"); [EOL]     assertEquals(new Period(2, 0, 0, 3, 5, 6, 7, 8), p); [EOL] }
public void testFormatAlternate() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P00010204T050607.008", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(1, 2, 3, 4, 5, 6, 7, 0); [EOL]     assertEquals("P00010204T050607", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(0); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved()); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p)); [EOL]     assertEquals("P00010004T050607.008", ISOPeriodFormat.alternate().print(YEAR_DAY_PERIOD)); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals("P00010204T000000", ISOPeriodFormat.alternate().print(DATE_PERIOD)); [EOL]     assertEquals("P00000000T050607.008", ISOPeriodFormat.alternate().print(TIME_PERIOD)); [EOL] }
public void testFormatAlternate() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P00010204T050607.008", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(1, 2, 3, 4, 5, 6, 7, 0); [EOL]     assertEquals("P00010204T050607", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(0); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved()); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p)); [EOL]     assertEquals("P00010004T050607.008", ISOPeriodFormat.alternate().print(YEAR_DAY_PERIOD)); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals("P00010204T000000", ISOPeriodFormat.alternate().print(DATE_PERIOD)); [EOL]     assertEquals("P00000000T050607.008", ISOPeriodFormat.alternate().print(TIME_PERIOD)); [EOL] }
public void testFormatAlternateWithWeeks() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P0001W0304T050607.008", ISOPeriodFormat.alternateWithWeeks().print(p)); [EOL]     p = new Period(1, 2, 3, 4, 5, 6, 7, 0); [EOL]     assertEquals("P0001W0304T050607", ISOPeriodFormat.alternateWithWeeks().print(p)); [EOL]     p = new Period(0); [EOL]     assertEquals("P0000W0000T000000", ISOPeriodFormat.alternateWithWeeks().print(p)); [EOL]     p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved()); [EOL]     assertEquals("P0000W0000T000000", ISOPeriodFormat.alternateWithWeeks().print(p)); [EOL]     assertEquals("P0001W0004T050607.008", ISOPeriodFormat.alternateWithWeeks().print(YEAR_DAY_PERIOD)); [EOL]     assertEquals("P0000W0000T000000", ISOPeriodFormat.alternateWithWeeks().print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals("P0001W0304T000000", ISOPeriodFormat.alternateWithWeeks().print(DATE_PERIOD)); [EOL]     assertEquals("P0000W0000T050607.008", ISOPeriodFormat.alternateWithWeeks().print(TIME_PERIOD)); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testSerialization() throws Exception { [EOL]     CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testSerialization() throws Exception { [EOL]     CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void test_getValue_long_long() { [EOL]     assertEquals(0, iField.getValue(0L, 567L)); [EOL]     assertEquals(12345678 / 90, iField.getValue(12345678L, 567L)); [EOL]     assertEquals(-1234 / 90, iField.getValue(-1234L, 567L)); [EOL]     assertEquals(INTEGER_MAX / 90, iField.getValue(LONG_INTEGER_MAX, 567L)); [EOL]     try { [EOL]         iField.getValue(LONG_INTEGER_MAX + 1L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long_long() { [EOL]     assertEquals(0, iField.getValue(0L, 567L)); [EOL]     assertEquals(12345678 / 90, iField.getValue(12345678L, 567L)); [EOL]     assertEquals(-1234 / 90, iField.getValue(-1234L, 567L)); [EOL]     assertEquals(INTEGER_MAX / 90, iField.getValue(LONG_INTEGER_MAX, 567L)); [EOL]     try { [EOL]         iField.getValue(LONG_INTEGER_MAX + 1L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getMillis_long_long() { [EOL]     assertEquals(0L, iField.getMillis(0L, 567L)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234L, 567L)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234L, 567L)); [EOL]     try { [EOL]         iField.getMillis(LONG_MAX, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testPartialDayOfYearAdd() { [EOL]     Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366)); [EOL]     assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366))); [EOL] }
public void testPartialDayOfYearAdd() { [EOL]     Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366)); [EOL]     assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366))); [EOL] }
public void testPartialDayOfYearAdd() { [EOL]     Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366)); [EOL]     assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366))); [EOL] }
public void testPartialDayOfYearAdd() { [EOL]     Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366)); [EOL]     assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366))); [EOL] }
public void testDurationFields() { [EOL]     final ISOChronology iso = ISOChronology.getInstance(); [EOL]     assertEquals("eras", iso.eras().getName()); [EOL]     assertEquals("centuries", iso.centuries().getName()); [EOL]     assertEquals("years", iso.years().getName()); [EOL]     assertEquals("weekyears", iso.weekyears().getName()); [EOL]     assertEquals("months", iso.months().getName()); [EOL]     assertEquals("weeks", iso.weeks().getName()); [EOL]     assertEquals("days", iso.days().getName()); [EOL]     assertEquals("halfdays", iso.halfdays().getName()); [EOL]     assertEquals("hours", iso.hours().getName()); [EOL]     assertEquals("minutes", iso.minutes().getName()); [EOL]     assertEquals("seconds", iso.seconds().getName()); [EOL]     assertEquals("millis", iso.millis().getName()); [EOL]     assertEquals(false, iso.eras().isSupported()); [EOL]     assertEquals(true, iso.centuries().isSupported()); [EOL]     assertEquals(true, iso.years().isSupported()); [EOL]     assertEquals(true, iso.weekyears().isSupported()); [EOL]     assertEquals(true, iso.months().isSupported()); [EOL]     assertEquals(true, iso.weeks().isSupported()); [EOL]     assertEquals(true, iso.days().isSupported()); [EOL]     assertEquals(true, iso.halfdays().isSupported()); [EOL]     assertEquals(true, iso.hours().isSupported()); [EOL]     assertEquals(true, iso.minutes().isSupported()); [EOL]     assertEquals(true, iso.seconds().isSupported()); [EOL]     assertEquals(true, iso.millis().isSupported()); [EOL]     assertEquals(false, iso.centuries().isPrecise()); [EOL]     assertEquals(false, iso.years().isPrecise()); [EOL]     assertEquals(false, iso.weekyears().isPrecise()); [EOL]     assertEquals(false, iso.months().isPrecise()); [EOL]     assertEquals(false, iso.weeks().isPrecise()); [EOL]     assertEquals(false, iso.days().isPrecise()); [EOL]     assertEquals(false, iso.halfdays().isPrecise()); [EOL]     assertEquals(true, iso.hours().isPrecise()); [EOL]     assertEquals(true, iso.minutes().isPrecise()); [EOL]     assertEquals(true, iso.seconds().isPrecise()); [EOL]     assertEquals(true, iso.millis().isPrecise()); [EOL]     final ISOChronology isoUTC = ISOChronology.getInstanceUTC(); [EOL]     assertEquals(false, isoUTC.centuries().isPrecise()); [EOL]     assertEquals(false, isoUTC.years().isPrecise()); [EOL]     assertEquals(false, isoUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, isoUTC.months().isPrecise()); [EOL]     assertEquals(true, isoUTC.weeks().isPrecise()); [EOL]     assertEquals(true, isoUTC.days().isPrecise()); [EOL]     assertEquals(true, isoUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, isoUTC.hours().isPrecise()); [EOL]     assertEquals(true, isoUTC.minutes().isPrecise()); [EOL]     assertEquals(true, isoUTC.seconds().isPrecise()); [EOL]     assertEquals(true, isoUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final ISOChronology isoGMT = ISOChronology.getInstance(gmt); [EOL]     assertEquals(false, isoGMT.centuries().isPrecise()); [EOL]     assertEquals(false, isoGMT.years().isPrecise()); [EOL]     assertEquals(false, isoGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, isoGMT.months().isPrecise()); [EOL]     assertEquals(true, isoGMT.weeks().isPrecise()); [EOL]     assertEquals(true, isoGMT.days().isPrecise()); [EOL]     assertEquals(true, isoGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, isoGMT.hours().isPrecise()); [EOL]     assertEquals(true, isoGMT.minutes().isPrecise()); [EOL]     assertEquals(true, isoGMT.seconds().isPrecise()); [EOL]     assertEquals(true, isoGMT.millis().isPrecise()); [EOL]     final DateTimeZone offset = DateTimeZone.forOffsetHours(1); [EOL]     final ISOChronology isoOffset1 = ISOChronology.getInstance(offset); [EOL]     assertEquals(false, isoOffset1.centuries().isPrecise()); [EOL]     assertEquals(false, isoOffset1.years().isPrecise()); [EOL]     assertEquals(false, isoOffset1.weekyears().isPrecise()); [EOL]     assertEquals(false, isoOffset1.months().isPrecise()); [EOL]     assertEquals(true, isoOffset1.weeks().isPrecise()); [EOL]     assertEquals(true, isoOffset1.days().isPrecise()); [EOL]     assertEquals(true, isoOffset1.halfdays().isPrecise()); [EOL]     assertEquals(true, isoOffset1.hours().isPrecise()); [EOL]     assertEquals(true, isoOffset1.minutes().isPrecise()); [EOL]     assertEquals(true, isoOffset1.seconds().isPrecise()); [EOL]     assertEquals(true, isoOffset1.millis().isPrecise()); [EOL] }
public void testToString() { [EOL]     assertEquals("ISOChronology[Europe/London]", ISOChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("ISOChronology[Asia/Tokyo]", ISOChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("ISOChronology[Europe/London]", ISOChronology.getInstance().toString()); [EOL]     assertEquals("ISOChronology[UTC]", ISOChronology.getInstanceUTC().toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("ISOChronology[Europe/London]", ISOChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("ISOChronology[Asia/Tokyo]", ISOChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("ISOChronology[Europe/London]", ISOChronology.getInstance().toString()); [EOL]     assertEquals("ISOChronology[UTC]", ISOChronology.getInstanceUTC().toString()); [EOL] }
public void testDurationFields() { [EOL]     final ISOChronology iso = ISOChronology.getInstance(); [EOL]     assertEquals("eras", iso.eras().getName()); [EOL]     assertEquals("centuries", iso.centuries().getName()); [EOL]     assertEquals("years", iso.years().getName()); [EOL]     assertEquals("weekyears", iso.weekyears().getName()); [EOL]     assertEquals("months", iso.months().getName()); [EOL]     assertEquals("weeks", iso.weeks().getName()); [EOL]     assertEquals("days", iso.days().getName()); [EOL]     assertEquals("halfdays", iso.halfdays().getName()); [EOL]     assertEquals("hours", iso.hours().getName()); [EOL]     assertEquals("minutes", iso.minutes().getName()); [EOL]     assertEquals("seconds", iso.seconds().getName()); [EOL]     assertEquals("millis", iso.millis().getName()); [EOL]     assertEquals(false, iso.eras().isSupported()); [EOL]     assertEquals(true, iso.centuries().isSupported()); [EOL]     assertEquals(true, iso.years().isSupported()); [EOL]     assertEquals(true, iso.weekyears().isSupported()); [EOL]     assertEquals(true, iso.months().isSupported()); [EOL]     assertEquals(true, iso.weeks().isSupported()); [EOL]     assertEquals(true, iso.days().isSupported()); [EOL]     assertEquals(true, iso.halfdays().isSupported()); [EOL]     assertEquals(true, iso.hours().isSupported()); [EOL]     assertEquals(true, iso.minutes().isSupported()); [EOL]     assertEquals(true, iso.seconds().isSupported()); [EOL]     assertEquals(true, iso.millis().isSupported()); [EOL]     assertEquals(false, iso.centuries().isPrecise()); [EOL]     assertEquals(false, iso.years().isPrecise()); [EOL]     assertEquals(false, iso.weekyears().isPrecise()); [EOL]     assertEquals(false, iso.months().isPrecise()); [EOL]     assertEquals(false, iso.weeks().isPrecise()); [EOL]     assertEquals(false, iso.days().isPrecise()); [EOL]     assertEquals(false, iso.halfdays().isPrecise()); [EOL]     assertEquals(true, iso.hours().isPrecise()); [EOL]     assertEquals(true, iso.minutes().isPrecise()); [EOL]     assertEquals(true, iso.seconds().isPrecise()); [EOL]     assertEquals(true, iso.millis().isPrecise()); [EOL]     final ISOChronology isoUTC = ISOChronology.getInstanceUTC(); [EOL]     assertEquals(false, isoUTC.centuries().isPrecise()); [EOL]     assertEquals(false, isoUTC.years().isPrecise()); [EOL]     assertEquals(false, isoUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, isoUTC.months().isPrecise()); [EOL]     assertEquals(true, isoUTC.weeks().isPrecise()); [EOL]     assertEquals(true, isoUTC.days().isPrecise()); [EOL]     assertEquals(true, isoUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, isoUTC.hours().isPrecise()); [EOL]     assertEquals(true, isoUTC.minutes().isPrecise()); [EOL]     assertEquals(true, isoUTC.seconds().isPrecise()); [EOL]     assertEquals(true, isoUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final ISOChronology isoGMT = ISOChronology.getInstance(gmt); [EOL]     assertEquals(false, isoGMT.centuries().isPrecise()); [EOL]     assertEquals(false, isoGMT.years().isPrecise()); [EOL]     assertEquals(false, isoGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, isoGMT.months().isPrecise()); [EOL]     assertEquals(true, isoGMT.weeks().isPrecise()); [EOL]     assertEquals(true, isoGMT.days().isPrecise()); [EOL]     assertEquals(true, isoGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, isoGMT.hours().isPrecise()); [EOL]     assertEquals(true, isoGMT.minutes().isPrecise()); [EOL]     assertEquals(true, isoGMT.seconds().isPrecise()); [EOL]     assertEquals(true, isoGMT.millis().isPrecise()); [EOL]     final DateTimeZone offset = DateTimeZone.forOffsetHours(1); [EOL]     final ISOChronology isoOffset1 = ISOChronology.getInstance(offset); [EOL]     assertEquals(false, isoOffset1.centuries().isPrecise()); [EOL]     assertEquals(false, isoOffset1.years().isPrecise()); [EOL]     assertEquals(false, isoOffset1.weekyears().isPrecise()); [EOL]     assertEquals(false, isoOffset1.months().isPrecise()); [EOL]     assertEquals(true, isoOffset1.weeks().isPrecise()); [EOL]     assertEquals(true, isoOffset1.days().isPrecise()); [EOL]     assertEquals(true, isoOffset1.halfdays().isPrecise()); [EOL]     assertEquals(true, isoOffset1.hours().isPrecise()); [EOL]     assertEquals(true, isoOffset1.minutes().isPrecise()); [EOL]     assertEquals(true, isoOffset1.seconds().isPrecise()); [EOL]     assertEquals(true, isoOffset1.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final ISOChronology iso = ISOChronology.getInstance(); [EOL]     assertEquals("eras", iso.eras().getName()); [EOL]     assertEquals("centuries", iso.centuries().getName()); [EOL]     assertEquals("years", iso.years().getName()); [EOL]     assertEquals("weekyears", iso.weekyears().getName()); [EOL]     assertEquals("months", iso.months().getName()); [EOL]     assertEquals("weeks", iso.weeks().getName()); [EOL]     assertEquals("days", iso.days().getName()); [EOL]     assertEquals("halfdays", iso.halfdays().getName()); [EOL]     assertEquals("hours", iso.hours().getName()); [EOL]     assertEquals("minutes", iso.minutes().getName()); [EOL]     assertEquals("seconds", iso.seconds().getName()); [EOL]     assertEquals("millis", iso.millis().getName()); [EOL]     assertEquals(false, iso.eras().isSupported()); [EOL]     assertEquals(true, iso.centuries().isSupported()); [EOL]     assertEquals(true, iso.years().isSupported()); [EOL]     assertEquals(true, iso.weekyears().isSupported()); [EOL]     assertEquals(true, iso.months().isSupported()); [EOL]     assertEquals(true, iso.weeks().isSupported()); [EOL]     assertEquals(true, iso.days().isSupported()); [EOL]     assertEquals(true, iso.halfdays().isSupported()); [EOL]     assertEquals(true, iso.hours().isSupported()); [EOL]     assertEquals(true, iso.minutes().isSupported()); [EOL]     assertEquals(true, iso.seconds().isSupported()); [EOL]     assertEquals(true, iso.millis().isSupported()); [EOL]     assertEquals(false, iso.centuries().isPrecise()); [EOL]     assertEquals(false, iso.years().isPrecise()); [EOL]     assertEquals(false, iso.weekyears().isPrecise()); [EOL]     assertEquals(false, iso.months().isPrecise()); [EOL]     assertEquals(false, iso.weeks().isPrecise()); [EOL]     assertEquals(false, iso.days().isPrecise()); [EOL]     assertEquals(false, iso.halfdays().isPrecise()); [EOL]     assertEquals(true, iso.hours().isPrecise()); [EOL]     assertEquals(true, iso.minutes().isPrecise()); [EOL]     assertEquals(true, iso.seconds().isPrecise()); [EOL]     assertEquals(true, iso.millis().isPrecise()); [EOL]     final ISOChronology isoUTC = ISOChronology.getInstanceUTC(); [EOL]     assertEquals(false, isoUTC.centuries().isPrecise()); [EOL]     assertEquals(false, isoUTC.years().isPrecise()); [EOL]     assertEquals(false, isoUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, isoUTC.months().isPrecise()); [EOL]     assertEquals(true, isoUTC.weeks().isPrecise()); [EOL]     assertEquals(true, isoUTC.days().isPrecise()); [EOL]     assertEquals(true, isoUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, isoUTC.hours().isPrecise()); [EOL]     assertEquals(true, isoUTC.minutes().isPrecise()); [EOL]     assertEquals(true, isoUTC.seconds().isPrecise()); [EOL]     assertEquals(true, isoUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final ISOChronology isoGMT = ISOChronology.getInstance(gmt); [EOL]     assertEquals(false, isoGMT.centuries().isPrecise()); [EOL]     assertEquals(false, isoGMT.years().isPrecise()); [EOL]     assertEquals(false, isoGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, isoGMT.months().isPrecise()); [EOL]     assertEquals(true, isoGMT.weeks().isPrecise()); [EOL]     assertEquals(true, isoGMT.days().isPrecise()); [EOL]     assertEquals(true, isoGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, isoGMT.hours().isPrecise()); [EOL]     assertEquals(true, isoGMT.minutes().isPrecise()); [EOL]     assertEquals(true, isoGMT.seconds().isPrecise()); [EOL]     assertEquals(true, isoGMT.millis().isPrecise()); [EOL]     final DateTimeZone offset = DateTimeZone.forOffsetHours(1); [EOL]     final ISOChronology isoOffset1 = ISOChronology.getInstance(offset); [EOL]     assertEquals(false, isoOffset1.centuries().isPrecise()); [EOL]     assertEquals(false, isoOffset1.years().isPrecise()); [EOL]     assertEquals(false, isoOffset1.weekyears().isPrecise()); [EOL]     assertEquals(false, isoOffset1.months().isPrecise()); [EOL]     assertEquals(true, isoOffset1.weeks().isPrecise()); [EOL]     assertEquals(true, isoOffset1.days().isPrecise()); [EOL]     assertEquals(true, isoOffset1.halfdays().isPrecise()); [EOL]     assertEquals(true, isoOffset1.hours().isPrecise()); [EOL]     assertEquals(true, isoOffset1.minutes().isPrecise()); [EOL]     assertEquals(true, isoOffset1.seconds().isPrecise()); [EOL]     assertEquals(true, isoOffset1.millis().isPrecise()); [EOL] }
public void testFactory_standardHoursIn_RPeriod() { [EOL]     assertEquals(0, Hours.standardHoursIn((ReadablePeriod) null).getHours()); [EOL]     assertEquals(0, Hours.standardHoursIn(Period.ZERO).getHours()); [EOL]     assertEquals(1, Hours.standardHoursIn(new Period(0, 0, 0, 0, 1, 0, 0, 0)).getHours()); [EOL]     assertEquals(123, Hours.standardHoursIn(Period.hours(123)).getHours()); [EOL]     assertEquals(-987, Hours.standardHoursIn(Period.hours(-987)).getHours()); [EOL]     assertEquals(1, Hours.standardHoursIn(Period.minutes(119)).getHours()); [EOL]     assertEquals(2, Hours.standardHoursIn(Period.minutes(120)).getHours()); [EOL]     assertEquals(2, Hours.standardHoursIn(Period.minutes(121)).getHours()); [EOL]     assertEquals(48, Hours.standardHoursIn(Period.days(2)).getHours()); [EOL]     try { [EOL]         Hours.standardHoursIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactoryUTC() { [EOL]     assertEquals(DateTimeZone.UTC, CopticChronology.getInstanceUTC().getZone()); [EOL]     assertSame(CopticChronology.class, CopticChronology.getInstanceUTC().getClass()); [EOL] }
public void testEquality() { [EOL]     assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS)); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC()); [EOL]     assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON)); [EOL] }
public void testEquality() { [EOL]     assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS)); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC()); [EOL]     assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON)); [EOL] }
public void testEquality() { [EOL]     assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS)); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC()); [EOL]     assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON)); [EOL] }
public void testEquality() { [EOL]     assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS)); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC()); [EOL]     assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON)); [EOL] }
public void testEquality() { [EOL]     assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS)); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC()); [EOL]     assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON)); [EOL] }
public void testEquality() { [EOL]     assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS)); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC()); [EOL]     assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON)); [EOL] }
public void testEquality() { [EOL]     assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS)); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC()); [EOL]     assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON)); [EOL] }
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(18, dt.getCenturyOfEra()); [EOL]     assertEquals(20, dt.getYearOfCentury()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(18, dt.getCenturyOfEra()); [EOL]     assertEquals(20, dt.getYearOfCentury()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Interval test = new Interval(base, null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Interval test = new Interval(base, null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Interval test = new Interval(base, null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Interval test = new Interval(base, null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testWithDurationBeforeEnd4() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationBeforeEnd(base.toDuration()); [EOL]     assertSame(base, test); [EOL] }
public void testWithDurationBeforeEnd4() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationBeforeEnd(base.toDuration()); [EOL]     assertSame(base, test); [EOL] }
public void testWithPeriodAfterStart1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodAfterStart(dur); [EOL]     assertEquals(new Interval(dt, dur), test); [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(GREGORIAN_PARIS)); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(GREGORIAN_PARIS)); [EOL] }
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonth expected = new YearMonth(1970, 2); [EOL]     assertEquals(expected, YearMonth.fromCalendarFields(cal)); [EOL]     try { [EOL]         YearMonth.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonth expected = new YearMonth(1970, 2); [EOL]     assertEquals(expected, YearMonth.fromCalendarFields(cal)); [EOL]     try { [EOL]         YearMonth.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     YearMonth test = new YearMonth(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testWithers() { [EOL]     YearMonth test = new YearMonth(1970, 6); [EOL]     check(test.withYear(2000), 2000, 6); [EOL]     check(test.withMonthOfYear(2), 1970, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonth test = new YearMonth(1970, 6); [EOL]     check(test.withYear(2000), 2000, 6); [EOL]     check(test.withMonthOfYear(2), 1970, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonth test = new YearMonth(1970, 6); [EOL]     check(test.withYear(2000), 2000, 6); [EOL]     check(test.withMonthOfYear(2), 1970, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonth test = new YearMonth(1970, 6); [EOL]     check(test.withYear(2000), 2000, 6); [EOL]     check(test.withMonthOfYear(2), 1970, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonth test = new YearMonth(1970, 6); [EOL]     check(test.withYear(2000), 2000, 6); [EOL]     check(test.withMonthOfYear(2), 1970, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     YearMonth test1 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonth test2 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] }
public void test_getMaximumValue_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(59, field.getMaximumValue(0L)); [EOL] }
public void test_getMaximumValue_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(59, field.getMaximumValue(0L)); [EOL] }
public void test_getAsText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("40", field.getAsText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] }
public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void test_getDifference_long_long() { [EOL]     MockCountingDurationField.difference_long = 0; [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(30, field.getDifference(0L, 0L)); [EOL]     assertEquals(1, MockCountingDurationField.difference_long); [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     MockCountingDurationField.difference_long = 0; [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(30, field.getDifferenceAsLong(0L, 0L)); [EOL]     assertEquals(1, MockCountingDurationField.difference_long); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_getLeapAmount_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0, field.getLeapAmount(0L)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_getMaximumValue_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(59, field.getMaximumValue(0L)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_getMaximumShortTextLength_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH)); [EOL] }
public void test_roundHalfEven_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(29L)); [EOL]     assertEquals(0L, field.roundHalfEven(30L)); [EOL]     assertEquals(60L, field.roundHalfEven(31L)); [EOL]     assertEquals(60L, field.roundHalfEven(60L)); [EOL]     assertEquals(60L, field.roundHalfEven(89L)); [EOL]     assertEquals(120L, field.roundHalfEven(90L)); [EOL]     assertEquals(120L, field.roundHalfEven(91L)); [EOL] }
public void test_roundHalfEven_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(29L)); [EOL]     assertEquals(0L, field.roundHalfEven(30L)); [EOL]     assertEquals(60L, field.roundHalfEven(31L)); [EOL]     assertEquals(60L, field.roundHalfEven(60L)); [EOL]     assertEquals(60L, field.roundHalfEven(89L)); [EOL]     assertEquals(120L, field.roundHalfEven(90L)); [EOL]     assertEquals(120L, field.roundHalfEven(91L)); [EOL] }
public void test_roundHalfEven_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(29L)); [EOL]     assertEquals(0L, field.roundHalfEven(30L)); [EOL]     assertEquals(60L, field.roundHalfEven(31L)); [EOL]     assertEquals(60L, field.roundHalfEven(60L)); [EOL]     assertEquals(60L, field.roundHalfEven(89L)); [EOL]     assertEquals(120L, field.roundHalfEven(90L)); [EOL]     assertEquals(120L, field.roundHalfEven(91L)); [EOL] }
public void test_roundHalfEven_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(29L)); [EOL]     assertEquals(0L, field.roundHalfEven(30L)); [EOL]     assertEquals(60L, field.roundHalfEven(31L)); [EOL]     assertEquals(60L, field.roundHalfEven(60L)); [EOL]     assertEquals(60L, field.roundHalfEven(89L)); [EOL]     assertEquals(120L, field.roundHalfEven(90L)); [EOL]     assertEquals(120L, field.roundHalfEven(91L)); [EOL] }
public void test_toString() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay()); [EOL]     assertEquals("DateTimeField[secondOfDay]", field.toString()); [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), JULIAN)); [EOL]     assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), JULIAN)); [EOL] }
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), JULIAN)); [EOL]     assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), JULIAN)); [EOL] }
public void testTimeFields() { [EOL]     final BuddhistChronology buddhist = BuddhistChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", buddhist.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", buddhist.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", buddhist.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", buddhist.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", buddhist.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", buddhist.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", buddhist.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", buddhist.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", buddhist.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", buddhist.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", buddhist.millisOfSecond().getName()); [EOL]     assertEquals(true, buddhist.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, buddhist.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, buddhist.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.hourOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.minuteOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.minuteOfHour().isSupported()); [EOL]     assertEquals(true, buddhist.secondOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.secondOfMinute().isSupported()); [EOL]     assertEquals(true, buddhist.millisOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.millisOfSecond().isSupported()); [EOL] }
public void testTimeFields() { [EOL]     final BuddhistChronology buddhist = BuddhistChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", buddhist.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", buddhist.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", buddhist.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", buddhist.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", buddhist.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", buddhist.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", buddhist.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", buddhist.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", buddhist.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", buddhist.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", buddhist.millisOfSecond().getName()); [EOL]     assertEquals(true, buddhist.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, buddhist.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, buddhist.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.hourOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.minuteOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.minuteOfHour().isSupported()); [EOL]     assertEquals(true, buddhist.secondOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.secondOfMinute().isSupported()); [EOL]     assertEquals(true, buddhist.millisOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.millisOfSecond().isSupported()); [EOL] }
public void testTimeFields() { [EOL]     final BuddhistChronology buddhist = BuddhistChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", buddhist.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", buddhist.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", buddhist.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", buddhist.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", buddhist.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", buddhist.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", buddhist.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", buddhist.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", buddhist.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", buddhist.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", buddhist.millisOfSecond().getName()); [EOL]     assertEquals(true, buddhist.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, buddhist.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, buddhist.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.hourOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.minuteOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.minuteOfHour().isSupported()); [EOL]     assertEquals(true, buddhist.secondOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.secondOfMinute().isSupported()); [EOL]     assertEquals(true, buddhist.millisOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.millisOfSecond().isSupported()); [EOL] }
public void testPropertyGetMaxMinValuesDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] }
public void testPropertyGetMaxMinValuesDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] }
public void testPropertyGetMaxMinValuesDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] }
public void testPropertyGetMaxMinValuesDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     YearMonth test1 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonth test2 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = iField; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testConstructor_Type_int() throws Throwable { [EOL]     Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(4, test.getValue(0)); [EOL]     assertEquals(4, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL] }
public void testConstructor_Type_int() throws Throwable { [EOL]     Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(4, test.getValue(0)); [EOL]     assertEquals(4, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL] }
public void testConstructor_Type_int() throws Throwable { [EOL]     Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(4, test.getValue(0)); [EOL]     assertEquals(4, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL] }
public void testSafeSubtractLong() { [EOL]     assertEquals(0L, FieldUtils.safeSubtract(0L, 0L)); [EOL]     assertEquals(-1L, FieldUtils.safeSubtract(2L, 3L)); [EOL]     assertEquals(5L, FieldUtils.safeSubtract(2L, -3L)); [EOL]     assertEquals(-5L, FieldUtils.safeSubtract(-2L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeSubtract(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeSubtract(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeSubtract(Long.MIN_VALUE, -1L)); [EOL]     assertEquals(0, FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MIN_VALUE)); [EOL]     assertEquals(0, FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MAX_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, -100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeSubtractLong() { [EOL]     assertEquals(0L, FieldUtils.safeSubtract(0L, 0L)); [EOL]     assertEquals(-1L, FieldUtils.safeSubtract(2L, 3L)); [EOL]     assertEquals(5L, FieldUtils.safeSubtract(2L, -3L)); [EOL]     assertEquals(-5L, FieldUtils.safeSubtract(-2L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeSubtract(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeSubtract(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeSubtract(Long.MIN_VALUE, -1L)); [EOL]     assertEquals(0, FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MIN_VALUE)); [EOL]     assertEquals(0, FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MAX_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, -100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeSubtractLong() { [EOL]     assertEquals(0L, FieldUtils.safeSubtract(0L, 0L)); [EOL]     assertEquals(-1L, FieldUtils.safeSubtract(2L, 3L)); [EOL]     assertEquals(5L, FieldUtils.safeSubtract(2L, -3L)); [EOL]     assertEquals(-5L, FieldUtils.safeSubtract(-2L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeSubtract(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeSubtract(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeSubtract(Long.MIN_VALUE, -1L)); [EOL]     assertEquals(0, FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MIN_VALUE)); [EOL]     assertEquals(0, FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MAX_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, -100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testConstructor_int_int_int_Chronology() throws Throwable { [EOL]     DateMidnight test = new DateMidnight(2002, 6, 9, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     try { [EOL]         new DateMidnight(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 0, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 13, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 31, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new DateMidnight(2002, 7, 31, GregorianChronology.getInstance()); [EOL]     try { [EOL]         new DateMidnight(2002, 7, 32, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int_int_Chronology() throws Throwable { [EOL]     DateMidnight test = new DateMidnight(2002, 6, 9, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     try { [EOL]         new DateMidnight(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 0, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 13, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 31, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new DateMidnight(2002, 7, 31, GregorianChronology.getInstance()); [EOL]     try { [EOL]         new DateMidnight(2002, 7, 32, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int_int_Chronology() throws Throwable { [EOL]     DateMidnight test = new DateMidnight(2002, 6, 9, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     try { [EOL]         new DateMidnight(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 0, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 13, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 31, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new DateMidnight(2002, 7, 31, GregorianChronology.getInstance()); [EOL]     try { [EOL]         new DateMidnight(2002, 7, 32, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] }
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] }
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] }
public void testRemoveInstantConverter3() { [EOL]     InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testRemoveInstantConverter3() { [EOL]     InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testRemoveInstantConverter3() { [EOL]     InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testRemoveInstantConverter3() { [EOL]     InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testAddPartialConverter2() { [EOL]     PartialConverter c = new PartialConverter() { [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getPartialConverter("").getSupportedType()); [EOL]         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddPartialConverter2() { [EOL]     PartialConverter c = new PartialConverter() { [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getPartialConverter("").getSupportedType()); [EOL]         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddPartialConverter2() { [EOL]     PartialConverter c = new PartialConverter() { [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getPartialConverter("").getSupportedType()); [EOL]         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddPartialConverter2() { [EOL]     PartialConverter c = new PartialConverter() { [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getPartialConverter("").getSupportedType()); [EOL]         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddDurationConverter2() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getDurationConverter("").getSupportedType()); [EOL]         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testAddDurationConverter2() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getDurationConverter("").getSupportedType()); [EOL]         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testAddDurationConverter2() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getDurationConverter("").getSupportedType()); [EOL]         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testAddDurationConverter2() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getDurationConverter("").getSupportedType()); [EOL]         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testAddDurationConverter2() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getDurationConverter("").getSupportedType()); [EOL]         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testAddDurationConverter2() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getDurationConverter("").getSupportedType()); [EOL]         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testAddDurationConverter2() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getDurationConverter("").getSupportedType()); [EOL]         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testRemovePeriodConverter3() { [EOL]     PeriodConverter removed = ConverterManager.getInstance().removePeriodConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testRemovePeriodConverter3() { [EOL]     PeriodConverter removed = ConverterManager.getInstance().removePeriodConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testRemovePeriodConverter3() { [EOL]     PeriodConverter removed = ConverterManager.getInstance().removePeriodConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testRemoveIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testRemoveIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testRemoveIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testRemoveIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testRemoveIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testRemoveIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testRemoveIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testToString() { [EOL]     assertEquals("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", ConverterManager.getInstance().toString()); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(18, dt.getCenturyOfEra()); [EOL]     assertEquals(20, dt.getYearOfCentury()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(18, dt.getCenturyOfEra()); [EOL]     assertEquals(20, dt.getYearOfCentury()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP_GJChronology() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12, GJ); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     YearMonth test1 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonth test2 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public void testStaticGetInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[]", c.toString()); [EOL] }
public void testStaticGetInstanceLower() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL] }
public void testStaticGetInstanceLower() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL] }
public void testStaticGetInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[]", c.toString()); [EOL] }
public void testStaticGetInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[]", c.toString()); [EOL] }
public void testListWOW() { [EOL]     String[] dtStrs = { "2002-04-01T10:00:00", "2002-01-01T10:00:00", "2002-12-01T10:00:00", "2002-09-01T10:00:00", "2002-09-01T10:00:00", "2002-02-01T10:00:00", "2002-10-01T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cWeekOfWeekyear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListWOW", !isSorted1, isSorted2); [EOL] }
public void testListWOW() { [EOL]     String[] dtStrs = { "2002-04-01T10:00:00", "2002-01-01T10:00:00", "2002-12-01T10:00:00", "2002-09-01T10:00:00", "2002-09-01T10:00:00", "2002-02-01T10:00:00", "2002-10-01T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cWeekOfWeekyear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListWOW", !isSorted1, isSorted2); [EOL] }
public void testStaticGetInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[]", c.toString()); [EOL] }
public void testStaticGetInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[]", c.toString()); [EOL] }
public void testStaticGetInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[]", c.toString()); [EOL] }
public void testStaticGetInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[]", c.toString()); [EOL] }
public void testStaticGetInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[]", c.toString()); [EOL] }
public void testValueIndexMethods() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(20, test.getValue(0)); [EOL]     try { [EOL]         test.getValue(1); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testValueIndexMethods() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(20, test.getValue(0)); [EOL]     try { [EOL]         test.getValue(1); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     Single test1 = new Single(21); [EOL]     Single test2 = new Single(22); [EOL]     Single test3 = new Single(23); [EOL]     assertEquals(true, test1.compareTo(test1) == 0); [EOL]     assertEquals(true, test1.compareTo(test2) < 0); [EOL]     assertEquals(true, test1.compareTo(test3) < 0); [EOL]     assertEquals(true, test2.compareTo(test1) > 0); [EOL]     assertEquals(true, test2.compareTo(test2) == 0); [EOL]     assertEquals(true, test2.compareTo(test3) < 0); [EOL]     assertEquals(true, test3.compareTo(test1) > 0); [EOL]     assertEquals(true, test3.compareTo(test2) > 0); [EOL]     assertEquals(true, test3.compareTo(test3) == 0); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     Single test1 = new Single(21); [EOL]     Single test2 = new Single(22); [EOL]     Single test3 = new Single(23); [EOL]     assertEquals(true, test1.compareTo(test1) == 0); [EOL]     assertEquals(true, test1.compareTo(test2) < 0); [EOL]     assertEquals(true, test1.compareTo(test3) < 0); [EOL]     assertEquals(true, test2.compareTo(test1) > 0); [EOL]     assertEquals(true, test2.compareTo(test2) == 0); [EOL]     assertEquals(true, test2.compareTo(test3) < 0); [EOL]     assertEquals(true, test3.compareTo(test1) > 0); [EOL]     assertEquals(true, test3.compareTo(test2) > 0); [EOL]     assertEquals(true, test3.compareTo(test3) == 0); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     Single test1 = new Single(21); [EOL]     Single test2 = new Single(22); [EOL]     Single test3 = new Single(23); [EOL]     assertEquals(true, test1.compareTo(test1) == 0); [EOL]     assertEquals(true, test1.compareTo(test2) < 0); [EOL]     assertEquals(true, test1.compareTo(test3) < 0); [EOL]     assertEquals(true, test2.compareTo(test1) > 0); [EOL]     assertEquals(true, test2.compareTo(test2) == 0); [EOL]     assertEquals(true, test2.compareTo(test3) < 0); [EOL]     assertEquals(true, test3.compareTo(test1) > 0); [EOL]     assertEquals(true, test3.compareTo(test2) > 0); [EOL]     assertEquals(true, test3.compareTo(test3) == 0); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     Single test1 = new Single(21); [EOL]     Single test2 = new Single(22); [EOL]     Single test3 = new Single(23); [EOL]     assertEquals(true, test1.compareTo(test1) == 0); [EOL]     assertEquals(true, test1.compareTo(test2) < 0); [EOL]     assertEquals(true, test1.compareTo(test3) < 0); [EOL]     assertEquals(true, test2.compareTo(test1) > 0); [EOL]     assertEquals(true, test2.compareTo(test2) == 0); [EOL]     assertEquals(true, test2.compareTo(test3) < 0); [EOL]     assertEquals(true, test3.compareTo(test1) > 0); [EOL]     assertEquals(true, test3.compareTo(test2) > 0); [EOL]     assertEquals(true, test3.compareTo(test3) == 0); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(0, Seconds.secondsIn((ReadableInterval) null).getSeconds()); [EOL]     assertEquals(3, Seconds.secondsIn(new Interval(start, end1)).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsIn(new Interval(start, start)).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsIn(new Interval(end1, end1)).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsIn(new Interval(start, end2)).getSeconds()); [EOL] }
public void testFactory_secondsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(0, Seconds.secondsIn((ReadableInterval) null).getSeconds()); [EOL]     assertEquals(3, Seconds.secondsIn(new Interval(start, end1)).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsIn(new Interval(start, start)).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsIn(new Interval(end1, end1)).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsIn(new Interval(start, end2)).getSeconds()); [EOL] }
public void testFactory_standardSecondsIn_RPeriod() { [EOL]     assertEquals(0, Seconds.standardSecondsIn((ReadablePeriod) null).getSeconds()); [EOL]     assertEquals(0, Seconds.standardSecondsIn(Period.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.standardSecondsIn(new Period(0, 0, 0, 0, 0, 0, 1, 0)).getSeconds()); [EOL]     assertEquals(123, Seconds.standardSecondsIn(Period.seconds(123)).getSeconds()); [EOL]     assertEquals(-987, Seconds.standardSecondsIn(Period.seconds(-987)).getSeconds()); [EOL]     assertEquals(2 * 24 * 60 * 60, Seconds.standardSecondsIn(Period.days(2)).getSeconds()); [EOL]     try { [EOL]         Seconds.standardSecondsIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardSecondsIn_RPeriod() { [EOL]     assertEquals(0, Seconds.standardSecondsIn((ReadablePeriod) null).getSeconds()); [EOL]     assertEquals(0, Seconds.standardSecondsIn(Period.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.standardSecondsIn(new Period(0, 0, 0, 0, 0, 0, 1, 0)).getSeconds()); [EOL]     assertEquals(123, Seconds.standardSecondsIn(Period.seconds(123)).getSeconds()); [EOL]     assertEquals(-987, Seconds.standardSecondsIn(Period.seconds(-987)).getSeconds()); [EOL]     assertEquals(2 * 24 * 60 * 60, Seconds.standardSecondsIn(Period.days(2)).getSeconds()); [EOL]     try { [EOL]         Seconds.standardSecondsIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardSecondsIn_RPeriod() { [EOL]     assertEquals(0, Seconds.standardSecondsIn((ReadablePeriod) null).getSeconds()); [EOL]     assertEquals(0, Seconds.standardSecondsIn(Period.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.standardSecondsIn(new Period(0, 0, 0, 0, 0, 0, 1, 0)).getSeconds()); [EOL]     assertEquals(123, Seconds.standardSecondsIn(Period.seconds(123)).getSeconds()); [EOL]     assertEquals(-987, Seconds.standardSecondsIn(Period.seconds(-987)).getSeconds()); [EOL]     assertEquals(2 * 24 * 60 * 60, Seconds.standardSecondsIn(Period.days(2)).getSeconds()); [EOL]     try { [EOL]         Seconds.standardSecondsIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Seconds expected = Seconds.seconds(2 * 7 * 24 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testMinus_int() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds result = test2.minus(3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(-1, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus(0).getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds result = test2.minus(3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(-1, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus(0).getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds result = test2.minus(3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(-1, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus(0).getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(18, dt.getCenturyOfEra()); [EOL]     assertEquals(20, dt.getYearOfCentury()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(18, dt.getCenturyOfEra()); [EOL]     assertEquals(20, dt.getYearOfCentury()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(18, dt.getCenturyOfEra()); [EOL]     assertEquals(20, dt.getYearOfCentury()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(18, dt.getCenturyOfEra()); [EOL]     assertEquals(20, dt.getYearOfCentury()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testConstructor_int_int_int_Chronology() throws Throwable { [EOL]     DateMidnight test = new DateMidnight(2002, 6, 9, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     try { [EOL]         new DateMidnight(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 0, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 13, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 31, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new DateMidnight(2002, 7, 31, GregorianChronology.getInstance()); [EOL]     try { [EOL]         new DateMidnight(2002, 7, 32, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int_int_Chronology() throws Throwable { [EOL]     DateMidnight test = new DateMidnight(2002, 6, 9, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     try { [EOL]         new DateMidnight(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 0, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 13, 9, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateMidnight(2002, 6, 31, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new DateMidnight(2002, 7, 31, GregorianChronology.getInstance()); [EOL]     try { [EOL]         new DateMidnight(2002, 7, 32, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_String_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public void testToString_String_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public void testToString_String_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public void testWeeks() { [EOL]     Weeks test = Weeks.weeks(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P5W", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Weeks.class, str)); [EOL] }
public void testToStandardSeconds() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Seconds expected = Seconds.seconds(2 * 7 * 24 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Seconds expected = Seconds.seconds(2 * 7 * 24 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Seconds expected = Seconds.seconds(2 * 7 * 24 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardDuration() { [EOL]     Weeks test = Weeks.weeks(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_WEEK); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_WEEK); [EOL]     assertEquals(expected, Weeks.MAX_VALUE.toStandardDuration()); [EOL] }
public void testToStandardDuration() { [EOL]     Weeks test = Weeks.weeks(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_WEEK); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_WEEK); [EOL]     assertEquals(expected, Weeks.MAX_VALUE.toStandardDuration()); [EOL] }
public void testToStandardDuration() { [EOL]     Weeks test = Weeks.weeks(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_WEEK); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_WEEK); [EOL]     assertEquals(expected, Weeks.MAX_VALUE.toStandardDuration()); [EOL] }
public void testMultipliedBy_int() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     assertEquals(6, test.multipliedBy(3).getWeeks()); [EOL]     assertEquals(2, test.getWeeks()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getWeeks()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Weeks halfMax = Weeks.weeks(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     assertEquals(6, test.multipliedBy(3).getWeeks()); [EOL]     assertEquals(2, test.getWeeks()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getWeeks()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Weeks halfMax = Weeks.weeks(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     assertEquals(6, test.multipliedBy(3).getWeeks()); [EOL]     assertEquals(2, test.getWeeks()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getWeeks()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Weeks halfMax = Weeks.weeks(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     assertEquals(6, test.multipliedBy(3).getWeeks()); [EOL]     assertEquals(2, test.getWeeks()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getWeeks()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Weeks halfMax = Weeks.weeks(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testWeeks() { [EOL]     Weeks test = Weeks.weeks(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P5W", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Weeks.class, str)); [EOL] }
public void testWeeks() { [EOL]     Weeks test = Weeks.weeks(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P5W", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Weeks.class, str)); [EOL] }
public void testWeeks() { [EOL]     Weeks test = Weeks.weeks(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P5W", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Weeks.class, str)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--dd MM HH").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new DateTime(2010, 6, 30, 13, 0, ISOChronology.getInstance(PARIS)), DateTime.parse("2010--30 06 13", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--dd MM HH").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new DateTime(2010, 6, 30, 13, 0, ISOChronology.getInstance(PARIS)), DateTime.parse("2010--30 06 13", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--dd MM HH").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new DateTime(2010, 6, 30, 13, 0, ISOChronology.getInstance(PARIS)), DateTime.parse("2010--30 06 13", f)); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testListYOYY() { [EOL]     String[] dtStrs = { "2010-04-01T10:00:00", "2002-01-01T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cWeekyear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListYOYY", !isSorted1, isSorted2); [EOL] }
public void testListYOYY() { [EOL]     String[] dtStrs = { "2010-04-01T10:00:00", "2002-01-01T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cWeekyear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListYOYY", !isSorted1, isSorted2); [EOL] }
public void testListYOYY() { [EOL]     String[] dtStrs = { "2010-04-01T10:00:00", "2002-01-01T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cWeekyear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListYOYY", !isSorted1, isSorted2); [EOL] }
public void testListYOYY() { [EOL]     String[] dtStrs = { "2010-04-01T10:00:00", "2002-01-01T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cWeekyear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListYOYY", !isSorted1, isSorted2); [EOL] }
public void testConstructor_int_int_int_int_int_int() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testWithTime_int_int_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1 - 12345L, BUDDHIST_UTC); [EOL]     DateTime result = test.withTime(12, 24, 0, 0); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL]     assertEquals(BUDDHIST_UTC, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withTime(25, 1, 1, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithTime_int_int_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1 - 12345L, BUDDHIST_UTC); [EOL]     DateTime result = test.withTime(12, 24, 0, 0); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL]     assertEquals(BUDDHIST_UTC, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withTime(25, 1, 1, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithTime_int_int_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1 - 12345L, BUDDHIST_UTC); [EOL]     DateTime result = test.withTime(12, 24, 0, 0); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL]     assertEquals(BUDDHIST_UTC, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withTime(25, 1, 1, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithTime_int_int_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1 - 12345L, BUDDHIST_UTC); [EOL]     DateTime result = test.withTime(12, 24, 0, 0); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL]     assertEquals(BUDDHIST_UTC, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withTime(25, 1, 1, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithTime_int_int_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1 - 12345L, BUDDHIST_UTC); [EOL]     DateTime result = test.withTime(12, 24, 0, 0); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL]     assertEquals(BUDDHIST_UTC, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withTime(25, 1, 1, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded1() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test); [EOL]     assertEquals(new DateTime(2010, 6, 9, 0, 0, 0, 0), result); [EOL] }
public void testWithFieldAdded1() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test); [EOL]     assertEquals(new DateTime(2010, 6, 9, 0, 0, 0, 0), result); [EOL] }
public void testWithFieldAdded1() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test); [EOL]     assertEquals(new DateTime(2010, 6, 9, 0, 0, 0, 0), result); [EOL] }
public void testWithDurationAdded_RD_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(new Duration(123456789L), 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_RD_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(new Duration(123456789L), 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_RD_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(new Duration(123456789L), 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_RD_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(new Duration(123456789L), 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_RD_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(new Duration(123456789L), 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPlusSecondsInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.plusSeconds(1); [EOL]     assertEquals("2010-10-31T02:30:11.123+02:00", test.toString()); [EOL] }
public void testMinusMonths_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMonths(1); [EOL]     DateTime expected = new DateTime(2002, 4, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMonths(1); [EOL]     DateTime expected = new DateTime(2002, 4, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMonths(1); [EOL]     DateTime expected = new DateTime(2002, 4, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusHours_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusHours(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 0, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusHours_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusHours(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 0, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusHours_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusHours(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 0, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMinutes(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 1, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMinutes(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 1, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMinutes(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 1, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testToLocalDateTime() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     LocalDateTime test = base.toLocalDateTime(); [EOL]     assertEquals(new LocalDateTime(TEST_TIME1, COPTIC_DEFAULT), test); [EOL] }
public void testToLocalTime() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     LocalTime test = base.toLocalTime(); [EOL]     assertEquals(new LocalTime(TEST_TIME1, COPTIC_DEFAULT), test); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void test_DateTime_withDay_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-02T00:00:00.000-04:00", dt.toString()); [EOL]     DateTime res = dt.withDayOfMonth(1); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", res.toString()); [EOL] }
public void test_DateTime_withDay_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-02T00:00:00.000-04:00", dt.toString()); [EOL]     DateTime res = dt.withDayOfMonth(1); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", res.toString()); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testPropertyToIntervalYearOfEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfEra().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] }
public void testPropertySetYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().setCopy(1960); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("1960-06-09T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testPropertyGetMinuteOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().minuteOfDay(), test.minuteOfDay().getField()); [EOL]     assertEquals("minuteOfDay", test.minuteOfDay().getName()); [EOL]     assertEquals("Property[minuteOfDay]", test.minuteOfDay().toString()); [EOL]     assertSame(test, test.minuteOfDay().getDateTime()); [EOL]     assertEquals(803, test.minuteOfDay().get()); [EOL]     assertEquals("803", test.minuteOfDay().getAsString()); [EOL]     assertEquals("803", test.minuteOfDay().getAsText()); [EOL]     assertEquals("803", test.minuteOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("803", test.minuteOfDay().getAsShortText()); [EOL]     assertEquals("803", test.minuteOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.minuteOfDay().getRangeDurationField()); [EOL]     assertEquals(4, test.minuteOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(4, test.minuteOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testSerializedDateTimeProperty() throws Exception { [EOL]     DateTime.Property test = new DateTime().hourOfDay(); [EOL]     loadAndCompare(test, "DateTimeProperty", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testSerializedDateTimeProperty() throws Exception { [EOL]     DateTime.Property test = new DateTime().hourOfDay(); [EOL]     loadAndCompare(test, "DateTimeProperty", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().setCopy("12"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().setCopy("12"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().setCopy("12"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().setCopy("12"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().setCopy("12"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().setCopy("12"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyRoundHalfCeilingHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundHalfCeilingCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     copy = test.hourOfDay().roundHalfCeilingCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     copy = test.hourOfDay().roundHalfCeilingCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] }
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] }
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] }
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] }
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] }
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] }
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] }
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] }
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] }
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] }
public void testToString2() { [EOL]     Partial test = new Partial(); [EOL]     assertEquals("[]", test.toString()); [EOL] }
public void testConstructorEx8_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL] }
public void testConstructorEx8_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL] }
public void testConstructorEx8_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL] }
public void testConstructorEx8_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL] }
public void testConstructorEx8_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL] }
public void testConstructorEx8_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL] }
public void testConstructorEx8_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL] }
public void testConstructorEx8_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL] }
public void testWithChronologyRetainFields_sameChrono() { [EOL]     Partial base = createHourMinPartial(COPTIC_PARIS); [EOL]     Partial test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] }
public void testWithChronologyRetainFields_sameChrono() { [EOL]     Partial base = createHourMinPartial(COPTIC_PARIS); [EOL]     Partial test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] }
public void testWith2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.with(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] }
public void testWith2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.with(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] }
public void testWith2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.with(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] }
public void testWith2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.with(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] }
public void testWithFieldAdded1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]     assertEquals(createHourMinPartial(), test); [EOL]     check(test, 10, 20); [EOL]     check(result, 16, 20); [EOL] }
public void testWithFieldAdded1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]     assertEquals(createHourMinPartial(), test); [EOL]     check(test, 10, 20); [EOL]     check(result, 16, 20); [EOL] }
public void testWithFieldAdded1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]     assertEquals(createHourMinPartial(), test); [EOL]     check(test, 10, 20); [EOL]     check(result, 16, 20); [EOL] }
public void testWithFieldAddWrapped8() { [EOL]     Partial test = createHourMinPartial(0, 0, ISO_UTC); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), -1); [EOL]     check(test, 0, 0); [EOL]     check(result, 23, 59); [EOL]     test = createHourMinPartial(0, 0, ISO_UTC); [EOL]     result = test.withFieldAddWrapped(DurationFieldType.hours(), -1); [EOL]     check(test, 0, 0); [EOL]     check(result, 23, 0); [EOL] }
public void testWithFieldAddWrapped8() { [EOL]     Partial test = createHourMinPartial(0, 0, ISO_UTC); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), -1); [EOL]     check(test, 0, 0); [EOL]     check(result, 23, 59); [EOL]     test = createHourMinPartial(0, 0, ISO_UTC); [EOL]     result = test.withFieldAddWrapped(DurationFieldType.hours(), -1); [EOL]     check(test, 0, 0); [EOL]     check(result, 23, 0); [EOL] }
public void testIsMatch_Instant() { [EOL]     Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2); [EOL]     DateTime instant = new DateTime(2005, 7, 5, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 4, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 6, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 12, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 19, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 26, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 8, 2, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2006, 7, 5, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 6, 5, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL] }
public void testIsMatch_Instant() { [EOL]     Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2); [EOL]     DateTime instant = new DateTime(2005, 7, 5, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 4, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 6, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 12, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 19, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 26, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 8, 2, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2006, 7, 5, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 6, 5, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL] }
public void testToString2() { [EOL]     Partial test = new Partial(); [EOL]     assertEquals("[]", test.toString()); [EOL] }
public void testToString2() { [EOL]     Partial test = new Partial(); [EOL]     assertEquals("[]", test.toString()); [EOL] }
public void testToString2() { [EOL]     Partial test = new Partial(); [EOL]     assertEquals("[]", test.toString()); [EOL] }
public void testToString2() { [EOL]     Partial test = new Partial(); [EOL]     assertEquals("[]", test.toString()); [EOL] }
public void testToString2() { [EOL]     Partial test = new Partial(); [EOL]     assertEquals("[]", test.toString()); [EOL] }
public void testToString2() { [EOL]     Partial test = new Partial(); [EOL]     assertEquals("[]", test.toString()); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis()); [EOL] }
public void testConstructor_Object3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Long base = new Long(length); [EOL]     Duration test = new Duration(base); [EOL]     assertEquals(length, test.getMillis()); [EOL] }
public void testConstructor_Object3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Long base = new Long(length); [EOL]     Duration test = new Duration(base); [EOL]     assertEquals(length, test.getMillis()); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testToPeriodTo() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodTo(dt); [EOL]     assertEquals(new Period(test, dt), result); [EOL] }
public void testToPeriodTo() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodTo(dt); [EOL]     assertEquals(new Period(test, dt), result); [EOL] }
public void testToIntervalTo() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval result = test.toIntervalTo(dt); [EOL]     assertEquals(new Interval(test, dt), result); [EOL] }
public void testToIntervalTo() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval result = test.toIntervalTo(dt); [EOL]     assertEquals(new Interval(test, dt), result); [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Years test = Years.years(2); [EOL]     assertEquals(6, test.multipliedBy(3).getYears()); [EOL]     assertEquals(2, test.getYears()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getYears()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Years halfMax = Years.years(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Years test = Years.years(2); [EOL]     assertEquals(6, test.multipliedBy(3).getYears()); [EOL]     assertEquals(2, test.getYears()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getYears()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Years halfMax = Years.years(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Years test = Years.years(2); [EOL]     assertEquals(6, test.multipliedBy(3).getYears()); [EOL]     assertEquals(2, test.getYears()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getYears()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Years halfMax = Years.years(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Years test = Years.years(2); [EOL]     assertEquals(6, test.multipliedBy(3).getYears()); [EOL]     assertEquals(2, test.getYears()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getYears()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Years halfMax = Years.years(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testWithDurationAdded_long_int() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.withDurationAdded(123456789L, 1); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new Instant(TEST_TIME1 + (2L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new Instant(TEST_TIME1 - (3L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_long_int() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.withDurationAdded(123456789L, 1); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new Instant(TEST_TIME1 + (2L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new Instant(TEST_TIME1 - (3L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_long_int() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.withDurationAdded(123456789L, 1); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new Instant(TEST_TIME1 + (2L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new Instant(TEST_TIME1 - (3L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testToMutableDateTimeISO() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTimeISO(); [EOL]     assertSame(MutableDateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testToMutableDateTimeISO() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTimeISO(); [EOL]     assertSame(MutableDateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testFactory_fromDateFields_before1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(1969, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromDateFields(cal.getTime())); [EOL] }
public void testFactory_fromDateFields_before1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(1969, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromDateFields(cal.getTime())); [EOL] }
public void testFactory_fromDateFields_before1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(1969, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromDateFields(cal.getTime())); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDate base = new LocalDate(2007, 10, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2); [EOL]         assertEquals("Tue Oct 02 00:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDate base = new LocalDate(2007, 10, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2); [EOL]         assertEquals("Tue Oct 02 00:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToDateMidnight() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToLocalDateTime_LocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     LocalDateTime test = base.toLocalDateTime(tod); [EOL]     check(base, 2005, 6, 9); [EOL]     LocalDateTime expected = new LocalDateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_UTC); [EOL]     assertEquals(expected, test); [EOL] }
public void testToLocalDateTime_LocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     LocalDateTime test = base.toLocalDateTime(tod); [EOL]     check(base, 2005, 6, 9); [EOL]     LocalDateTime expected = new LocalDateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_UTC); [EOL]     assertEquals(expected, test); [EOL] }
public void testToLocalDateTime_LocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     LocalDateTime test = base.toLocalDateTime(tod); [EOL]     check(base, 2005, 6, 9); [EOL]     LocalDateTime expected = new LocalDateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_UTC); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTime_LocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     DateTime test = base.toDateTime(tod); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTime_LocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     DateTime test = base.toDateTime(tod); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDate base = new LocalDate(2007, 10, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2); [EOL]         assertEquals("Tue Oct 02 00:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDate base = new LocalDate(2007, 10, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2); [EOL]         assertEquals("Tue Oct 02 00:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDate base = new LocalDate(2007, 10, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2); [EOL]         assertEquals("Tue Oct 02 00:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertEquals(new LocalDate(2010, 6, 9), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertEquals(new LocalDate(2010, 6, 9), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertEquals(new LocalDate(2010, 6, 9), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertEquals(new LocalDate(2010, 6, 9), result); [EOL] }
public void testPlusMonths_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusMonths(1); [EOL]     LocalDate expected = new LocalDate(2002, 6, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusMonths(1); [EOL]     LocalDate expected = new LocalDate(2002, 6, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusMonths(1); [EOL]     LocalDate expected = new LocalDate(2002, 6, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusYears(1); [EOL]     LocalDate expected = new LocalDate(2001, 5, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusYears(1); [EOL]     LocalDate expected = new LocalDate(2001, 5, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusYears(1); [EOL]     LocalDate expected = new LocalDate(2001, 5, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] }
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] }
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] }
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] }
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSubclassableConstructor() { [EOL]     PeriodFormat f = new PeriodFormat() { [EOL]     }; [EOL]     assertNotNull(f); [EOL] }
public void test_wordBased_default() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 Tag, 5 Stunden, 6 Minuten, 7 Sekunden und 8 Millisekunden", PeriodFormat.wordBased().print(p)); [EOL] }
public void testWithUTC() { [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC()); [EOL] }
public void testWithUTC() { [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, PARIS).withChronology(ETHIOPIC_UTC); [EOL]     assertEquals(EthiopicChronology.EE, dt.getEra()); [EOL]     assertEquals(1996, dt.getYear()); [EOL]     assertEquals(1996, dt.getYearOfEra()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     assertEquals(10, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testFormatParse_textEraAD_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$ap. J.-C.2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textEraAD_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$ap. J.-C.2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textEraAD_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$ap. J.-C.2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textEraAD_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$ap. J.-C.2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textEraAD_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$ap. J.-C.2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals(PeriodType.months(), test.getPeriodType()); [EOL] }
public void testDays() throws Exception { [EOL]     PeriodType type = PeriodType.days(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(0)); [EOL]     assertEquals("Days", type.getName()); [EOL]     assertEquals("PeriodType[Days]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.days()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.days().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testForFields1() throws Exception { [EOL]     PeriodType type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.years() }); [EOL]     assertSame(PeriodType.years(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.months() }); [EOL]     assertSame(PeriodType.months(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.weeks() }); [EOL]     assertSame(PeriodType.weeks(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.days() }); [EOL]     assertSame(PeriodType.days(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.hours() }); [EOL]     assertSame(PeriodType.hours(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.minutes() }); [EOL]     assertSame(PeriodType.minutes(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.seconds() }); [EOL]     assertSame(PeriodType.seconds(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.millis() }); [EOL]     assertSame(PeriodType.millis(), type); [EOL] }
public void testGetPeriodType() { [EOL]     Minutes test = Minutes.minutes(20); [EOL]     assertEquals(PeriodType.minutes(), test.getPeriodType()); [EOL] }
public void testWithPeriodType3() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard()); [EOL]     try { [EOL]         test.withPeriodType(PeriodType.dayTime()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMaskYears() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withYearsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withYearsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withYearsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoYears", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoYears]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskYears() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withYearsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withYearsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withYearsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoYears", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoYears]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskMillis() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withMillisRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withMillisRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withMillisRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoMillis", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoMillis]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskMillis() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withMillisRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withMillisRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withMillisRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoMillis", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoMillis]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testClass() { [EOL]     Class<?> cls = DateTimeUtils.class; [EOL]     assertEquals(true, Modifier.isPublic(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isFinal(cls.getModifiers())); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(cls.getDeclaredConstructors()[0].getModifiers())); [EOL]     new DateTimeUtils() { [EOL]     }; [EOL] }
public void testMillisProvider() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisProvider(new MillisProvider() { [EOL]  [EOL]             public long getMillis() { [EOL]                 return 1L; [EOL]             } [EOL]         }); [EOL]         assertEquals(1L, DateTimeUtils.currentTimeMillis()); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testSupportedType() throws Exception { [EOL]     assertEquals(null, NullConverter.INSTANCE.getSupportedType()); [EOL] }
public void testConstructor_RI_RP6() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval(dt, (ReadablePeriod) null); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP6() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval(dt, (ReadablePeriod) null); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testForTimeZone_TimeZone() { [EOL]     assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null)); [EOL]     DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("Europe/London")); [EOL]     assertEquals("Europe/London", zone.getID()); [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone("UTC"))); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+01:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+1:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT-02:00")); [EOL]     assertEquals("-02:00", zone.getID()); [EOL]     assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+2")); [EOL]     assertEquals("+02:00", zone.getID()); [EOL]     assertEquals((2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("EST")); [EOL]     assertEquals("America/New_York", zone.getID()); [EOL] }
public void testForTimeZone_TimeZone() { [EOL]     assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null)); [EOL]     DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("Europe/London")); [EOL]     assertEquals("Europe/London", zone.getID()); [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone("UTC"))); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+01:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+1:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT-02:00")); [EOL]     assertEquals("-02:00", zone.getID()); [EOL]     assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+2")); [EOL]     assertEquals("+02:00", zone.getID()); [EOL]     assertEquals((2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("EST")); [EOL]     assertEquals("America/New_York", zone.getID()); [EOL] }
public void testForTimeZone_TimeZone() { [EOL]     assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null)); [EOL]     DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("Europe/London")); [EOL]     assertEquals("Europe/London", zone.getID()); [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone("UTC"))); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+01:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+1:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT-02:00")); [EOL]     assertEquals("-02:00", zone.getID()); [EOL]     assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+2")); [EOL]     assertEquals("+02:00", zone.getID()); [EOL]     assertEquals((2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("EST")); [EOL]     assertEquals("America/New_York", zone.getID()); [EOL] }
public void testForTimeZone_TimeZone() { [EOL]     assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null)); [EOL]     DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("Europe/London")); [EOL]     assertEquals("Europe/London", zone.getID()); [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone("UTC"))); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+01:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+1:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT-02:00")); [EOL]     assertEquals("-02:00", zone.getID()); [EOL]     assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+2")); [EOL]     assertEquals("+02:00", zone.getID()); [EOL]     assertEquals((2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("EST")); [EOL]     assertEquals("America/New_York", zone.getID()); [EOL] }
public void testForTimeZone_TimeZone() { [EOL]     assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null)); [EOL]     DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("Europe/London")); [EOL]     assertEquals("Europe/London", zone.getID()); [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone("UTC"))); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+01:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+1:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT-02:00")); [EOL]     assertEquals("-02:00", zone.getID()); [EOL]     assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+2")); [EOL]     assertEquals("+02:00", zone.getID()); [EOL]     assertEquals((2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("EST")); [EOL]     assertEquals("America/New_York", zone.getID()); [EOL] }
public void testForTimeZone_TimeZone() { [EOL]     assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null)); [EOL]     DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("Europe/London")); [EOL]     assertEquals("Europe/London", zone.getID()); [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone("UTC"))); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00:00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+00")); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+01:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+1:23")); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT-02:00")); [EOL]     assertEquals("-02:00", zone.getID()); [EOL]     assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+2")); [EOL]     assertEquals("+02:00", zone.getID()); [EOL]     assertEquals((2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("EST")); [EOL]     assertEquals("America/New_York", zone.getID()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testNameProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testNameProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testNameProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testNameProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testNameProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testNameProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testNameProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testGetOffset_RI() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER))); [EOL]     assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER))); [EOL]     assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null)); [EOL] }
public void testGetOffset_RI() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER))); [EOL]     assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER))); [EOL]     assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null)); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] }
public void testGetMillisKeepLocal() { [EOL]     long millisLondon = TEST_TIME_SUMMER; [EOL]     long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR; [EOL]     assertEquals(millisLondon, LONDON.getMillisKeepLocal(LONDON, millisLondon)); [EOL]     assertEquals(millisParis, LONDON.getMillisKeepLocal(LONDON, millisParis)); [EOL]     assertEquals(millisLondon, PARIS.getMillisKeepLocal(PARIS, millisLondon)); [EOL]     assertEquals(millisParis, PARIS.getMillisKeepLocal(PARIS, millisParis)); [EOL]     assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon)); [EOL]     assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis)); [EOL]     DateTimeZone zone = DateTimeZone.getDefault(); [EOL]     try { [EOL]         DateTimeZone.setDefault(LONDON); [EOL]         assertEquals(millisLondon, PARIS.getMillisKeepLocal(null, millisParis)); [EOL]     } finally { [EOL]         DateTimeZone.setDefault(zone); [EOL]     } [EOL] }
public void testGetMillisKeepLocal() { [EOL]     long millisLondon = TEST_TIME_SUMMER; [EOL]     long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR; [EOL]     assertEquals(millisLondon, LONDON.getMillisKeepLocal(LONDON, millisLondon)); [EOL]     assertEquals(millisParis, LONDON.getMillisKeepLocal(LONDON, millisParis)); [EOL]     assertEquals(millisLondon, PARIS.getMillisKeepLocal(PARIS, millisLondon)); [EOL]     assertEquals(millisParis, PARIS.getMillisKeepLocal(PARIS, millisParis)); [EOL]     assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon)); [EOL]     assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis)); [EOL]     DateTimeZone zone = DateTimeZone.getDefault(); [EOL]     try { [EOL]         DateTimeZone.setDefault(LONDON); [EOL]         assertEquals(millisLondon, PARIS.getMillisKeepLocal(null, millisParis)); [EOL]     } finally { [EOL]         DateTimeZone.setDefault(zone); [EOL]     } [EOL] }
public void testGetMillisKeepLocal() { [EOL]     long millisLondon = TEST_TIME_SUMMER; [EOL]     long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR; [EOL]     assertEquals(millisLondon, LONDON.getMillisKeepLocal(LONDON, millisLondon)); [EOL]     assertEquals(millisParis, LONDON.getMillisKeepLocal(LONDON, millisParis)); [EOL]     assertEquals(millisLondon, PARIS.getMillisKeepLocal(PARIS, millisLondon)); [EOL]     assertEquals(millisParis, PARIS.getMillisKeepLocal(PARIS, millisParis)); [EOL]     assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon)); [EOL]     assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis)); [EOL]     DateTimeZone zone = DateTimeZone.getDefault(); [EOL]     try { [EOL]         DateTimeZone.setDefault(LONDON); [EOL]         assertEquals(millisLondon, PARIS.getMillisKeepLocal(null, millisParis)); [EOL]     } finally { [EOL]         DateTimeZone.setDefault(zone); [EOL]     } [EOL] }
public void testSerialization() throws Exception { [EOL]     CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSetIntoInterval_Object2() throws Exception { [EOL]     Interval i = new Interval(0L, 123L, CopticChronology.getInstance()); [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance()); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(GJChronology.getInstance(), m.getChronology()); [EOL] }
public void testToString() { [EOL]     assertEquals("GregorianChronology[Europe/London]", GregorianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("GregorianChronology[Asia/Tokyo]", GregorianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("GregorianChronology[Europe/London]", GregorianChronology.getInstance().toString()); [EOL]     assertEquals("GregorianChronology[UTC]", GregorianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("GregorianChronology[UTC,mdfw=2]", GregorianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("GregorianChronology[Europe/London]", GregorianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("GregorianChronology[Asia/Tokyo]", GregorianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("GregorianChronology[Europe/London]", GregorianChronology.getInstance().toString()); [EOL]     assertEquals("GregorianChronology[UTC]", GregorianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("GregorianChronology[UTC,mdfw=2]", GregorianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("GregorianChronology[Europe/London]", GregorianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("GregorianChronology[Asia/Tokyo]", GregorianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("GregorianChronology[Europe/London]", GregorianChronology.getInstance().toString()); [EOL]     assertEquals("GregorianChronology[UTC]", GregorianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("GregorianChronology[UTC,mdfw=2]", GregorianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testPartialDayOfYearAdd() { [EOL]     Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366)); [EOL]     assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366))); [EOL] }
public void testPartialDayOfYearAdd() { [EOL]     Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366)); [EOL]     assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366))); [EOL] }
public void testPartialDayOfYearAdd() { [EOL]     Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366)); [EOL]     assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366))); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testToDateTime_TOD_nullZone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO); [EOL]     DateTime test = base.toDateTime(tod, null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] }
public void testConstructor_RP_RP_PeriodType7() throws Throwable { [EOL]     Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.monthOfYear(), 12); [EOL]     Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithPeriodType3() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard()); [EOL]     try { [EOL]         test.withPeriodType(PeriodType.dayTime()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded3() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.years(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_W() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_W() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_W() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_W() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_W() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_W() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_W() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_W() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_date() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.date().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.date().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.date().print(dt)); [EOL] }
public void testFormat_time_partial() { [EOL]     Partial dt = new Partial(new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }, new int[] { 10, 20, 30, 40 }); [EOL]     assertEquals("10:20:30.040", ISODateTimeFormat.time().print(dt)); [EOL] }
public void test_dateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateTime(); [EOL]     assertParse(parser, "2006-02-04T10:20:30.400999999Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-04T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-04T10:20:30.40Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-04T10:20:30.4Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-4T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-2-04T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-2-4T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-04T5:6:7.800Z", new DateTime(2006, 2, 4, 5, 6, 7, 800)); [EOL]     assertParse(parser, false, "2006-02-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-12T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-1T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006T10:20:30.400Z"); [EOL]     assertParse(parser, false, "200T10:20:30.400Z"); [EOL]     assertParse(parser, false, "20T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-02-04T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-02-04T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-02-04T10.400Z"); [EOL]     assertParse(parser, false, "2006-02-04T1.400Z"); [EOL] }
public void test_dateTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateTimeNoMillis(); [EOL]     assertParse(parser, "2006-02-04T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0)); [EOL]     assertParse(parser, "2006-02-4T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0)); [EOL]     assertParse(parser, "2006-2-04T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0)); [EOL]     assertParse(parser, "2006-2-4T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0)); [EOL]     assertParse(parser, "2006-02-04T5:6:7Z", new DateTime(2006, 2, 4, 5, 6, 7, 0)); [EOL]     assertParse(parser, false, "2006-02-T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-12T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-1T10:20:30Z"); [EOL]     assertParse(parser, false, "2006T10:20:30Z"); [EOL]     assertParse(parser, false, "200T10:20:30Z"); [EOL]     assertParse(parser, false, "20T10:20:30Z"); [EOL]     assertParse(parser, false, "2T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-02-04T10:20Z"); [EOL]     assertParse(parser, false, "2006-02-04T10:2Z"); [EOL]     assertParse(parser, false, "2006-02-04T10Z"); [EOL]     assertParse(parser, false, "2006-02-04T1Z"); [EOL] }
public void test_ordinalDateTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTimeNoMillis(); [EOL]     assertParse(parser, "2006-123T10:20:30Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-12T10:20:30Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(12)); [EOL]     assertParse(parser, "2006-1T10:20:30Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(1)); [EOL]     assertParse(parser, "2006-123T5:6:7Z", new DateTime(2006, 1, 1, 5, 6, 7, 0).withDayOfYear(123)); [EOL]     assertParse(parser, false, "2006-T10:20:30Z"); [EOL]     assertParse(parser, false, "2006T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-123T10:20Z"); [EOL]     assertParse(parser, false, "2006-123T10:2Z"); [EOL]     assertParse(parser, false, "2006-123T10Z"); [EOL]     assertParse(parser, false, "2006-123T1Z"); [EOL] }
public void testFormat_weekDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekDate().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekDate().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekDate().print(dt)); [EOL] }
public void test_basicTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTime(); [EOL]     assertParse(parser, "102030.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "102030.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "102030.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "102030.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, false, "10203.400Z"); [EOL]     assertParse(parser, false, "1020.400Z"); [EOL]     assertParse(parser, false, "102.400Z"); [EOL]     assertParse(parser, false, "10.400Z"); [EOL]     assertParse(parser, false, "1.400Z"); [EOL] }
public void testFormat_hourMinute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20", ISODateTimeFormat.hourMinute().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20", ISODateTimeFormat.hourMinute().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20", ISODateTimeFormat.hourMinute().print(dt)); [EOL] }
public void testFormat_hourMinuteSecond() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20:30", ISODateTimeFormat.hourMinuteSecond().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20:30", ISODateTimeFormat.hourMinuteSecond().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20:30", ISODateTimeFormat.hourMinuteSecond().print(dt)); [EOL] }
public void testFormat_hourMinuteSecondMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20:30.040", ISODateTimeFormat.hourMinuteSecondMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20:30.040", ISODateTimeFormat.hourMinuteSecondMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20:30.040", ISODateTimeFormat.hourMinuteSecondMillis().print(dt)); [EOL] }
public void testFormat_hourMinuteSecondFraction() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20:30.040", ISODateTimeFormat.hourMinuteSecondFraction().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20:30.040", ISODateTimeFormat.hourMinuteSecondFraction().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20:30.040", ISODateTimeFormat.hourMinuteSecondFraction().print(dt)); [EOL] }
public void testFormat_dateHourMinute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20", ISODateTimeFormat.dateHourMinute().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20", ISODateTimeFormat.dateHourMinute().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20", ISODateTimeFormat.dateHourMinute().print(dt)); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testFactory_minutesIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS); [EOL]     assertEquals(0, Minutes.minutesIn((ReadableInterval) null).getMinutes()); [EOL]     assertEquals(3, Minutes.minutesIn(new Interval(start, end1)).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesIn(new Interval(start, start)).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesIn(new Interval(end1, end1)).getMinutes()); [EOL]     assertEquals(6, Minutes.minutesIn(new Interval(start, end2)).getMinutes()); [EOL] }
public void testFactory_minutesIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS); [EOL]     assertEquals(0, Minutes.minutesIn((ReadableInterval) null).getMinutes()); [EOL]     assertEquals(3, Minutes.minutesIn(new Interval(start, end1)).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesIn(new Interval(start, start)).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesIn(new Interval(end1, end1)).getMinutes()); [EOL]     assertEquals(6, Minutes.minutesIn(new Interval(start, end2)).getMinutes()); [EOL] }
public void testGetPeriodType() { [EOL]     Minutes test = Minutes.minutes(20); [EOL]     assertEquals(PeriodType.minutes(), test.getPeriodType()); [EOL] }
public void testToStandardDuration() { [EOL]     Minutes test = Minutes.minutes(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_MINUTE); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_MINUTE); [EOL]     assertEquals(expected, Minutes.MAX_VALUE.toStandardDuration()); [EOL] }
public void testToStandardDuration() { [EOL]     Minutes test = Minutes.minutes(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_MINUTE); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_MINUTE); [EOL]     assertEquals(expected, Minutes.MAX_VALUE.toStandardDuration()); [EOL] }
public void testToStandardDuration() { [EOL]     Minutes test = Minutes.minutes(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_MINUTE); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_MINUTE); [EOL]     assertEquals(expected, Minutes.MAX_VALUE.toStandardDuration()); [EOL] }
public void testDividedBy_int() { [EOL]     Minutes test = Minutes.minutes(12); [EOL]     assertEquals(6, test.dividedBy(2).getMinutes()); [EOL]     assertEquals(12, test.getMinutes()); [EOL]     assertEquals(4, test.dividedBy(3).getMinutes()); [EOL]     assertEquals(3, test.dividedBy(4).getMinutes()); [EOL]     assertEquals(2, test.dividedBy(5).getMinutes()); [EOL]     assertEquals(2, test.dividedBy(6).getMinutes()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Minutes.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Minutes test = Minutes.minutes(12); [EOL]     assertEquals(6, test.dividedBy(2).getMinutes()); [EOL]     assertEquals(12, test.getMinutes()); [EOL]     assertEquals(4, test.dividedBy(3).getMinutes()); [EOL]     assertEquals(3, test.dividedBy(4).getMinutes()); [EOL]     assertEquals(2, test.dividedBy(5).getMinutes()); [EOL]     assertEquals(2, test.dividedBy(6).getMinutes()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Minutes.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Minutes test = Minutes.minutes(12); [EOL]     assertEquals(-12, test.negated().getMinutes()); [EOL]     assertEquals(12, test.getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Minutes test = Minutes.minutes(12); [EOL]     assertEquals(-12, test.negated().getMinutes()); [EOL]     assertEquals(12, test.getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Minutes test = Minutes.minutes(12); [EOL]     assertEquals(-12, test.negated().getMinutes()); [EOL]     assertEquals(12, test.getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testSetZoneRetainFields_DateTimeZone1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testNullValuesToGetInstanceThrowsException() { [EOL]     try { [EOL]         UnsupportedDateTimeField.getInstance(null, null); [EOL]         assertTrue(false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testNullValuesToGetInstanceThrowsException() { [EOL]     try { [EOL]         UnsupportedDateTimeField.getInstance(null, null); [EOL]         assertTrue(false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testNullValuesToGetInstanceThrowsException() { [EOL]     try { [EOL]         UnsupportedDateTimeField.getInstance(null, null); [EOL]         assertTrue(false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testEqualsHashCode_Zoned() { [EOL]     DateTimeZone zoneA = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTimeZone zoneB = DateTimeZone.forID("Asia/Tokyo"); [EOL]     Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Zoned() { [EOL]     DateTimeZone zoneA = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTimeZone zoneB = DateTimeZone.forID("Asia/Tokyo"); [EOL]     Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Zoned() { [EOL]     DateTimeZone zoneA = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTimeZone zoneB = DateTimeZone.forID("Asia/Tokyo"); [EOL]     Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Zoned() { [EOL]     DateTimeZone zoneA = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTimeZone zoneB = DateTimeZone.forID("Asia/Tokyo"); [EOL]     Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Zoned() { [EOL]     DateTimeZone zoneA = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTimeZone zoneB = DateTimeZone.forID("Asia/Tokyo"); [EOL]     Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Zoned() { [EOL]     DateTimeZone zoneA = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTimeZone zoneB = DateTimeZone.forID("Asia/Tokyo"); [EOL]     Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Zoned() { [EOL]     DateTimeZone zoneA = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTimeZone zoneB = DateTimeZone.forID("Asia/Tokyo"); [EOL]     Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] }
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, PARIS).withChronology(ETHIOPIC_UTC); [EOL]     assertEquals(EthiopicChronology.EE, dt.getEra()); [EOL]     assertEquals(1996, dt.getYear()); [EOL]     assertEquals(1996, dt.getYearOfEra()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     assertEquals(10, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testToString_String_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public void testToString_String_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public void testToString_String_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] }
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] }
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] }
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] }
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] }
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalTime test = new LocalTime(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(23, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(LONDON)); [EOL]     test = new LocalTime(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalTime test = new LocalTime(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(23, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(LONDON)); [EOL]     test = new LocalTime(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(PARIS)); [EOL] }
public void testFactoryMillisOfDay_long() throws Throwable { [EOL]     LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testFactoryMillisOfDay_long() throws Throwable { [EOL]     LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testFactoryMillisOfDay_long() throws Throwable { [EOL]     LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testFactoryMillisOfDay_long() throws Throwable { [EOL]     LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testFactoryMillisOfDay_long() throws Throwable { [EOL]     LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testFactory_FromCalendarFields_Calendar() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalTime expected = new LocalTime(4, 5, 6, 7); [EOL]     assertEquals(expected, LocalTime.fromCalendarFields(cal)); [EOL]     try { [EOL]         LocalTime.fromCalendarFields((Calendar) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromCalendarFields_Calendar() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalTime expected = new LocalTime(4, 5, 6, 7); [EOL]     assertEquals(expected, LocalTime.fromCalendarFields(cal)); [EOL]     try { [EOL]         LocalTime.fromCalendarFields((Calendar) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSerializedLocalTime() throws Exception { [EOL]     LocalTime test = new LocalTime(); [EOL]     loadAndCompare(test, "LocalTime", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalTime test = new LocalTime(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(23, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(LONDON)); [EOL]     test = new LocalTime(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalTime test = new LocalTime(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(23, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(LONDON)); [EOL]     test = new LocalTime(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(PARIS)); [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_long_DateTimeZone_2() throws Throwable { [EOL]     DateTime dt = new DateTime(2007, 6, 9, 1, 2, 3, 4, PARIS); [EOL]     DateTime dtUTC = new DateTime(1970, 1, 1, 1, 2, 3, 4, DateTimeZone.UTC); [EOL]     LocalTime test = new LocalTime(dt.getMillis(), PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL]     assertEquals(dtUTC.getMillis(), test.getLocalMillis()); [EOL] }
public void testConstructor_long_DateTimeZone_2() throws Throwable { [EOL]     DateTime dt = new DateTime(2007, 6, 9, 1, 2, 3, 4, PARIS); [EOL]     DateTime dtUTC = new DateTime(1970, 1, 1, 1, 2, 3, 4, DateTimeZone.UTC); [EOL]     LocalTime test = new LocalTime(dt.getMillis(), PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL]     assertEquals(dtUTC.getMillis(), test.getLocalMillis()); [EOL] }
public void testConstructor_long_DateTimeZone_2() throws Throwable { [EOL]     DateTime dt = new DateTime(2007, 6, 9, 1, 2, 3, 4, PARIS); [EOL]     DateTime dtUTC = new DateTime(1970, 1, 1, 1, 2, 3, 4, DateTimeZone.UTC); [EOL]     LocalTime test = new LocalTime(dt.getMillis(), PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL]     assertEquals(dtUTC.getMillis(), test.getLocalMillis()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalTime result = (LocalTime) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalTime result = (LocalTime) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalTime result = (LocalTime) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testGetField_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC); [EOL]     assertSame(COPTIC_UTC.hourOfDay(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC); [EOL]     assertSame(COPTIC_UTC.hourOfDay(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC); [EOL]     assertSame(COPTIC_UTC.hourOfDay(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC); [EOL]     assertSame(COPTIC_UTC.hourOfDay(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC); [EOL]     assertSame(COPTIC_UTC.hourOfDay(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_1() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 15); [EOL]     assertEquals(new LocalTime(10, 20, 30, 40), test); [EOL]     assertEquals(new LocalTime(15, 20, 30, 40), result); [EOL] }
public void testWithField_DateTimeFieldType_int_1() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 15); [EOL]     assertEquals(new LocalTime(10, 20, 30, 40), test); [EOL]     assertEquals(new LocalTime(15, 20, 30, 40), result); [EOL] }
public void testWithField_DateTimeFieldType_int_1() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 15); [EOL]     assertEquals(new LocalTime(10, 20, 30, 40), test); [EOL]     assertEquals(new LocalTime(15, 20, 30, 40), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.days(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.days(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.days(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.days(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusMillis_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMillis(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 3, 5, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillis_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMillis(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 3, 5, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillis_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMillis(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 3, 5, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusHours_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusHours(1); [EOL]     LocalTime expected = new LocalTime(0, 2, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusHours_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusHours(1); [EOL]     LocalTime expected = new LocalTime(0, 2, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusHours_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusHours(1); [EOL]     LocalTime expected = new LocalTime(0, 2, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testGetters() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillisOfDay()); [EOL] }
public void testToDateTimeTodayDefaultZone() { [EOL]     LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMinute() { [EOL]     LocalTime test1 = new LocalTime(TEST_TIME1); [EOL]     LocalTime test2 = new LocalTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 0, 20, 30, 40); [EOL] }
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 0, 20, 30, 40); [EOL] }
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void test_plusWeekyears_positiveToZero_crossCutover() { [EOL]     LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek()); [EOL]     assertEquals(expected, date.weekyear().addToCopy(-2003)); [EOL] }
public void test_plusWeekyears_positiveToZero_crossCutover() { [EOL]     LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek()); [EOL]     assertEquals(expected, date.weekyear().addToCopy(-2003)); [EOL] }
public void test_plusWeekyears_positiveToZero_crossCutover() { [EOL]     LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek()); [EOL]     assertEquals(expected, date.weekyear().addToCopy(-2003)); [EOL] }
public void test_plusWeekyears_positiveToZero_crossCutover() { [EOL]     LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek()); [EOL]     assertEquals(expected, date.weekyear().addToCopy(-2003)); [EOL] }
public void test_plusWeekyears_positiveToZero_crossCutover() { [EOL]     LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek()); [EOL]     assertEquals(expected, date.weekyear().addToCopy(-2003)); [EOL] }
public void test_plusWeekyears_positiveToZero_crossCutover() { [EOL]     LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek()); [EOL]     assertEquals(expected, date.weekyear().addToCopy(-2003)); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] }
public void test_now_Chronology() throws Throwable { [EOL]     MutableDateTime test = MutableDateTime.now(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void test_now_Chronology() throws Throwable { [EOL]     MutableDateTime test = MutableDateTime.now(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testSetZoneRetainFields_DateTimeZone1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL] }
public void testSetZoneRetainFields_DateTimeZone3() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS)); [EOL]     test.setZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1 + DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL] }
public void testSetZoneRetainFields_DateTimeZone3() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS)); [EOL]     test.setZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1 + DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_badconverterObject_DateTimeZone() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance()); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testConstructor_badconverterObject_DateTimeZone() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance()); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testConstructor_badconverterObject_DateTimeZone() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance()); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testConstructor_badconverterObject_DateTimeZone() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance()); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testAdd_long1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(123456L); [EOL]     assertEquals(TEST_TIME1 + 123456L, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testAdd_long1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(123456L); [EOL]     assertEquals(TEST_TIME1 + 123456L, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testAdd_long1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(123456L); [EOL]     assertEquals(TEST_TIME1 + 123456L, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testSetZone_DateTimeZone1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZone(PARIS); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL] }
public void testSetZone_DateTimeZone1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZone(PARIS); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL] }
public void testSet_DateTimeFieldType_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.set(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAddYears_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addYears(8); [EOL]     assertEquals("2010-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testAddYears_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addYears(8); [EOL]     assertEquals("2010-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testAddYears_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addYears(8); [EOL]     assertEquals("2010-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testAddDays_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addDays(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testAddDays_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addDays(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testAddDays_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addDays(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testAddMinutes_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMinutes(13); [EOL]     assertEquals("2002-06-09T05:19:07.008+01:00", test.toString()); [EOL] }
public void testAddMinutes_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMinutes(13); [EOL]     assertEquals("2002-06-09T05:19:07.008+01:00", test.toString()); [EOL] }
public void testAddMinutes_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMinutes(13); [EOL]     assertEquals("2002-06-09T05:19:07.008+01:00", test.toString()); [EOL] }
public void testSetSecondOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setSecondOfDay(13); [EOL]     assertEquals("2002-06-09T00:00:13.008+01:00", test.toString()); [EOL] }
public void testSetSecondOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setSecondOfDay(13); [EOL]     assertEquals("2002-06-09T00:00:13.008+01:00", test.toString()); [EOL] }
public void testSetSecondOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setSecondOfDay(13); [EOL]     assertEquals("2002-06-09T00:00:13.008+01:00", test.toString()); [EOL] }
public void testAddMillis_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addMillis(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testAddMillis_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addMillis(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testAddMillis_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addMillis(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetTime_RI1() { [EOL]     DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(setter); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(7, test.getMinuteOfHour()); [EOL]     assertEquals(9, test.getSecondOfMinute()); [EOL]     assertEquals(11, test.getMillisOfSecond()); [EOL] }
public void testSetTime_RI1() { [EOL]     DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(setter); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(7, test.getMinuteOfHour()); [EOL]     assertEquals(9, test.getSecondOfMinute()); [EOL]     assertEquals(11, test.getMillisOfSecond()); [EOL] }
public void testSetTime_RI1() { [EOL]     DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(setter); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(7, test.getMinuteOfHour()); [EOL]     assertEquals(9, test.getSecondOfMinute()); [EOL]     assertEquals(11, test.getMillisOfSecond()); [EOL] }
public void testSetTime_RI1() { [EOL]     DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(setter); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(7, test.getMinuteOfHour()); [EOL]     assertEquals(9, test.getSecondOfMinute()); [EOL]     assertEquals(11, test.getMillisOfSecond()); [EOL] }
public void testSetTime_RI1() { [EOL]     DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(setter); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(7, test.getMinuteOfHour()); [EOL]     assertEquals(9, test.getSecondOfMinute()); [EOL]     assertEquals(11, test.getMillisOfSecond()); [EOL] }
public void testSetTime_RI1() { [EOL]     DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(setter); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(7, test.getMinuteOfHour()); [EOL]     assertEquals(9, test.getSecondOfMinute()); [EOL]     assertEquals(11, test.getMillisOfSecond()); [EOL] }
public void testPropertyGetCenturyOfEra() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField()); [EOL]     assertEquals("centuryOfEra", test.centuryOfEra().getName()); [EOL]     assertEquals("Property[centuryOfEra]", test.centuryOfEra().toString()); [EOL]     assertEquals(20, test.centuryOfEra().get()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField()); [EOL]     assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumTextLength(null)); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().weekyear(), test.weekyear().getField()); [EOL]     assertEquals("weekyear", test.weekyear().getName()); [EOL]     assertEquals("Property[weekyear]", test.weekyear().toString()); [EOL]     assertEquals(2004, test.weekyear().get()); [EOL]     assertEquals("2004", test.weekyear().getAsText()); [EOL]     assertEquals("2004", test.weekyear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("2004", test.weekyear().getAsShortText()); [EOL]     assertEquals("2004", test.weekyear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().weekyears(), test.weekyear().getDurationField()); [EOL]     assertEquals(null, test.weekyear().getRangeDurationField()); [EOL]     assertEquals(9, test.weekyear().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.weekyear().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyAddLongDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().add(1L); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyAddLongDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().add(1L); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", test.toString()); [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testFactory_standardHoursIn_RPeriod() { [EOL]     assertEquals(0, Hours.standardHoursIn((ReadablePeriod) null).getHours()); [EOL]     assertEquals(0, Hours.standardHoursIn(Period.ZERO).getHours()); [EOL]     assertEquals(1, Hours.standardHoursIn(new Period(0, 0, 0, 0, 1, 0, 0, 0)).getHours()); [EOL]     assertEquals(123, Hours.standardHoursIn(Period.hours(123)).getHours()); [EOL]     assertEquals(-987, Hours.standardHoursIn(Period.hours(-987)).getHours()); [EOL]     assertEquals(1, Hours.standardHoursIn(Period.minutes(119)).getHours()); [EOL]     assertEquals(2, Hours.standardHoursIn(Period.minutes(120)).getHours()); [EOL]     assertEquals(2, Hours.standardHoursIn(Period.minutes(121)).getHours()); [EOL]     assertEquals(48, Hours.standardHoursIn(Period.days(2)).getHours()); [EOL]     try { [EOL]         Hours.standardHoursIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetFieldType() { [EOL]     Hours test = Hours.hours(20); [EOL]     assertEquals(DurationFieldType.hours(), test.getFieldType()); [EOL] }
public void testToStandardWeeks() { [EOL]     Hours test = Hours.hours(24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Hours test = Hours.hours(24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Hours test = Hours.hours(24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Hours test = Hours.hours(24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testGetMethods() { [EOL]     Hours test = Hours.hours(20); [EOL]     assertEquals(20, test.getHours()); [EOL] }
public void testDividedBy_int() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(6, test.dividedBy(2).getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     assertEquals(4, test.dividedBy(3).getHours()); [EOL]     assertEquals(3, test.dividedBy(4).getHours()); [EOL]     assertEquals(2, test.dividedBy(5).getHours()); [EOL]     assertEquals(2, test.dividedBy(6).getHours()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Hours.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(6, test.dividedBy(2).getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     assertEquals(4, test.dividedBy(3).getHours()); [EOL]     assertEquals(3, test.dividedBy(4).getHours()); [EOL]     assertEquals(2, test.dividedBy(5).getHours()); [EOL]     assertEquals(2, test.dividedBy(6).getHours()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Hours.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(6, test.dividedBy(2).getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     assertEquals(4, test.dividedBy(3).getHours()); [EOL]     assertEquals(3, test.dividedBy(4).getHours()); [EOL]     assertEquals(2, test.dividedBy(5).getHours()); [EOL]     assertEquals(2, test.dividedBy(6).getHours()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Hours.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(6, test.dividedBy(2).getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     assertEquals(4, test.dividedBy(3).getHours()); [EOL]     assertEquals(3, test.dividedBy(4).getHours()); [EOL]     assertEquals(2, test.dividedBy(5).getHours()); [EOL]     assertEquals(2, test.dividedBy(6).getHours()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Hours.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testRemoveIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testAddPartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddPartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddPartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddPartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddPartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddPartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testRemoveNullRemoved1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.remove(c3, null); [EOL]     assertEquals(4, set.size()); [EOL]     assertEquals(3, result.size()); [EOL] }
public void testRemoveNullRemoved1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.remove(c3, null); [EOL]     assertEquals(4, set.size()); [EOL]     assertEquals(3, result.size()); [EOL] }
public void testRemoveNullRemoved1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.remove(c3, null); [EOL]     assertEquals(4, set.size()); [EOL]     assertEquals(3, result.size()); [EOL] }
public void testRemoveNullRemoved1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.remove(c3, null); [EOL]     assertEquals(4, set.size()); [EOL]     assertEquals(3, result.size()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_canBuildPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     assertEquals(false, bld.canBuildPrinter()); [EOL]     bld.appendLiteral('X'); [EOL]     assertEquals(true, bld.canBuildPrinter()); [EOL] }
public void test_append_Printer() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimePrinter p = bld.toPrinter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(p); [EOL]     bld2.appendLiteral('Z'); [EOL]     DateTimeFormatter f = bld2.toFormatter(); [EOL]     assertEquals(true, f.isPrinter()); [EOL]     assertEquals(false, f.isParser()); [EOL]     assertEquals("XYZ", f.print(0L)); [EOL] }
public void test_append_Printer() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimePrinter p = bld.toPrinter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(p); [EOL]     bld2.appendLiteral('Z'); [EOL]     DateTimeFormatter f = bld2.toFormatter(); [EOL]     assertEquals(true, f.isPrinter()); [EOL]     assertEquals(false, f.isParser()); [EOL]     assertEquals("XYZ", f.print(0L)); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void testFormat_dayOfWeekShortText() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("E").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "Wed", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "Wed", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "Wed", f.print(dt)); [EOL]     f = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(dt.toString(), "mer.", f.print(dt)); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010--06", f)); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public void testToString_String_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public void testToString_String_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("mar. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("1970-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("1970-06-09", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("mar. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("1970-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("1970-06-09", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("mar. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("1970-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("1970-06-09", test.toString(null, null)); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void test_toPrinter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toPrinter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toPrinter()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] }
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     TimeOfDay expected = new TimeOfDay(4, 5, 6, 7); [EOL]     assertEquals(expected, TimeOfDay.fromCalendarFields(cal)); [EOL]     try { [EOL]         TimeOfDay.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     TimeOfDay expected = new TimeOfDay(4, 5, 6, 7); [EOL]     assertEquals(expected, TimeOfDay.fromCalendarFields(cal)); [EOL]     try { [EOL]         TimeOfDay.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     TimeOfDay test = new TimeOfDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(23, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     test = new TimeOfDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     TimeOfDay test = new TimeOfDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testWithChronologyRetainFields_sameChrono() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     TimeOfDay test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] }
public void testWithChronologyRetainFields_sameChrono() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     TimeOfDay test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] }
public void testWithField4() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay result = test.withField(DateTimeFieldType.hourOfDay(), 10); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testContains_RI_zeroDuration() { [EOL]     assertEquals(false, interval33.contains(new Instant(2))); [EOL]     assertEquals(false, interval33.contains(new Instant(3))); [EOL]     assertEquals(false, interval33.contains(new Instant(4))); [EOL] }
public void testContains_RI_zeroDuration() { [EOL]     assertEquals(false, interval33.contains(new Instant(2))); [EOL]     assertEquals(false, interval33.contains(new Instant(3))); [EOL]     assertEquals(false, interval33.contains(new Instant(4))); [EOL] }
public void testIsEqual_RI() { [EOL]     assertEquals(false, interval37.isEqual(interval33)); [EOL]     assertEquals(true, interval37.isEqual(interval37)); [EOL] }
public void testIsEqual_RI() { [EOL]     assertEquals(false, interval37.isEqual(interval33)); [EOL]     assertEquals(true, interval37.isEqual(interval37)); [EOL] }
public void testIsEqual_RI() { [EOL]     assertEquals(false, interval37.isEqual(interval33)); [EOL]     assertEquals(true, interval37.isEqual(interval37)); [EOL] }
public void testIsEqual_RI() { [EOL]     assertEquals(false, interval37.isEqual(interval33)); [EOL]     assertEquals(true, interval37.isEqual(interval37)); [EOL] }
public void testIsBefore_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL] }
public void testIsBefore_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL] }
public void testIsBefore_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL] }
public void testIsBefore_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL] }
public void testIsBefore_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL] }
public void testIsBefore_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL] }
public void testIsBefore_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL] }
public void testIsAfterNow() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL] }
public void testIsAfterNow() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL] }
public void testIsAfterNow() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL] }
public void testIsAfterNow() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL] }
public void testIsAfterNow() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL] }
public void testIsAfterNow() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL] }
public void testIsAfter_RI() { [EOL]     assertEquals(true, interval37.isAfter(new Instant(2))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(3))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(4))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(5))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(6))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(7))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(8))); [EOL] }
public void testIsAfter_RI() { [EOL]     assertEquals(true, interval37.isAfter(new Instant(2))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(3))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(4))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(5))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(6))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(7))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(8))); [EOL] }
public void testIsAfter_RI() { [EOL]     assertEquals(true, interval37.isAfter(new Instant(2))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(3))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(4))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(5))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(6))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(7))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(8))); [EOL] }
public void testIsAfter_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1))); [EOL]     assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1))); [EOL]     assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1))); [EOL]     assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isAfter(new Interval(TEST_TIME2, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isAfter(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isAfter((ReadableInterval) null)); [EOL] }
public void testIsAfter_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1))); [EOL]     assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1))); [EOL]     assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1))); [EOL]     assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isAfter(new Interval(TEST_TIME2, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isAfter(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isAfter((ReadableInterval) null)); [EOL] }
public void testIsAfter_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1))); [EOL]     assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1))); [EOL]     assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1))); [EOL]     assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isAfter(new Interval(TEST_TIME2, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isAfter(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isAfter((ReadableInterval) null)); [EOL] }
public void testToInterval1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval result = test.toInterval(); [EOL]     assertEquals(test, result); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testEqualsHashCode() { [EOL]     MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] }
public void testToString() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.UTC); [EOL]     Interval test = new Interval(dt1, dt2); [EOL]     assertEquals("2004-06-09T07:08:09.010Z/2005-08-13T12:14:16.018Z", test.toString()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testFormatAlternate() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P00010204T050607.008", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(1, 2, 3, 4, 5, 6, 7, 0); [EOL]     assertEquals("P00010204T050607", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(0); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved()); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p)); [EOL]     assertEquals("P00010004T050607.008", ISOPeriodFormat.alternate().print(YEAR_DAY_PERIOD)); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals("P00010204T000000", ISOPeriodFormat.alternate().print(DATE_PERIOD)); [EOL]     assertEquals("P00000000T050607.008", ISOPeriodFormat.alternate().print(TIME_PERIOD)); [EOL] }
public void testFormatAlternate() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P00010204T050607.008", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(1, 2, 3, 4, 5, 6, 7, 0); [EOL]     assertEquals("P00010204T050607", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(0); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p)); [EOL]     p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved()); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p)); [EOL]     assertEquals("P00010004T050607.008", ISOPeriodFormat.alternate().print(YEAR_DAY_PERIOD)); [EOL]     assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals("P00010204T000000", ISOPeriodFormat.alternate().print(DATE_PERIOD)); [EOL]     assertEquals("P00000000T050607.008", ISOPeriodFormat.alternate().print(TIME_PERIOD)); [EOL] }
public void testFactory_standardHoursIn_RPeriod() { [EOL]     assertEquals(0, Hours.standardHoursIn((ReadablePeriod) null).getHours()); [EOL]     assertEquals(0, Hours.standardHoursIn(Period.ZERO).getHours()); [EOL]     assertEquals(1, Hours.standardHoursIn(new Period(0, 0, 0, 0, 1, 0, 0, 0)).getHours()); [EOL]     assertEquals(123, Hours.standardHoursIn(Period.hours(123)).getHours()); [EOL]     assertEquals(-987, Hours.standardHoursIn(Period.hours(-987)).getHours()); [EOL]     assertEquals(1, Hours.standardHoursIn(Period.minutes(119)).getHours()); [EOL]     assertEquals(2, Hours.standardHoursIn(Period.minutes(120)).getHours()); [EOL]     assertEquals(2, Hours.standardHoursIn(Period.minutes(121)).getHours()); [EOL]     assertEquals(48, Hours.standardHoursIn(Period.days(2)).getHours()); [EOL]     try { [EOL]         Hours.standardHoursIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_nullPeriodFormatter() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", test.toString((PeriodFormatter) null)); [EOL] }
public void testToString_nullPeriodFormatter() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", test.toString((PeriodFormatter) null)); [EOL] }
public void testSetPeriod_long_long_NoMinutes() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withMinutesRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(61, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testSetPeriod_long_long_NoMinutes() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withMinutesRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(61, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testSetYears() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(10); [EOL]     assertEquals(10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(-10); [EOL]     assertEquals(-10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(0); [EOL]     assertEquals(0, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(1); [EOL]     assertEquals(1, test.getYears()); [EOL]     test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis()); [EOL]     try { [EOL]         test.setYears(1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testConstructor_RI_RI_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RD2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_RI_RD2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_RI_RD2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(64, test.getWeeks()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(64, test.getWeeks()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(64, test.getWeeks()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(64, test.getWeeks()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testSet_Field() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.set(DurationFieldType.years(), 10); [EOL]     assertEquals(10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.set(null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSet_Field() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.set(DurationFieldType.years(), 10); [EOL]     assertEquals(10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.set(null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetPeriod_RI_RI2() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt2, dt1); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(-1, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testSetPeriod_RI_RI2() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt2, dt1); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(-1, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testSetPeriod_long_long_NoMinutes() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withMinutesRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(61, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RD1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Duration(100L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RD1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Duration(100L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testSetYears() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(10); [EOL]     assertEquals(10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(-10); [EOL]     assertEquals(-10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(0); [EOL]     assertEquals(0, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(1); [EOL]     assertEquals(1, test.getYears()); [EOL]     test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis()); [EOL]     try { [EOL]         test.setYears(1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetYears() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(10); [EOL]     assertEquals(10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(-10); [EOL]     assertEquals(-10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(0); [EOL]     assertEquals(0, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(1); [EOL]     assertEquals(1, test.getYears()); [EOL]     test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis()); [EOL]     try { [EOL]         test.setYears(1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetYears() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(10); [EOL]     assertEquals(10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(-10); [EOL]     assertEquals(-10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(0); [EOL]     assertEquals(0, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(1); [EOL]     assertEquals(1, test.getYears()); [EOL]     test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis()); [EOL]     try { [EOL]         test.setYears(1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testAddMonths() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(10); [EOL]     assertEquals(12, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(-10); [EOL]     assertEquals(-8, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(0); [EOL]     assertEquals(2, test.getMonths()); [EOL] }
public void testAddMonths() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(10); [EOL]     assertEquals(12, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(-10); [EOL]     assertEquals(-8, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(0); [EOL]     assertEquals(2, test.getMonths()); [EOL] }
public void testAddMonths() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(10); [EOL]     assertEquals(12, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(-10); [EOL]     assertEquals(-8, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(0); [EOL]     assertEquals(2, test.getMonths()); [EOL] }
public void testAddWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(10); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(-10); [EOL]     assertEquals(-7, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(0); [EOL]     assertEquals(3, test.getWeeks()); [EOL] }
public void testAddWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(10); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(-10); [EOL]     assertEquals(-7, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(0); [EOL]     assertEquals(3, test.getWeeks()); [EOL] }
public void testAddWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(10); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(-10); [EOL]     assertEquals(-7, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(0); [EOL]     assertEquals(3, test.getWeeks()); [EOL] }
public void testAddMillis() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMillis(10); [EOL]     assertEquals(18, test.getMillis()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMillis(-10); [EOL]     assertEquals(-2, test.getMillis()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMillis(0); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void test_set_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0, field.set(120L, 0)); [EOL]     assertEquals(29 * 60, field.set(120L, 29)); [EOL] }
public void test_set_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0, field.set(120L, 0)); [EOL]     assertEquals(29 * 60, field.set(120L, 29)); [EOL] }
public void test_set_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0, field.set(120L, 0)); [EOL]     assertEquals(29 * 60, field.set(120L, 29)); [EOL] }
public void test_add_long_int() { [EOL]     MockCountingDurationField.add_int = 0; [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(61, field.add(1L, 1)); [EOL]     assertEquals(1, MockCountingDurationField.add_int); [EOL] }
public void test_set_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0, field.set(120L, 0)); [EOL]     assertEquals(29 * 60, field.set(120L, 29)); [EOL] }
public void test_set_RP_int_intarray_int() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, 29); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] }
public void test_set_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0, field.set(120L, 0)); [EOL]     assertEquals(29 * 60, field.set(120L, 29)); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] }
public void testFormatParse_textEraAD_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$ap. J.-C.2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
public void testToStandardSeconds() { [EOL]     Days test = Days.days(2); [EOL]     Seconds expected = Seconds.seconds(2 * 24 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Days test = Days.days(2); [EOL]     Seconds expected = Seconds.seconds(2 * 24 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Days test = Days.days(2); [EOL]     Seconds expected = Seconds.seconds(2 * 24 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_int() { [EOL]     Days test2 = Days.days(2); [EOL]     Days result = test2.plus(3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(5, result.getDays()); [EOL]     assertEquals(1, Days.ONE.plus(0).getDays()); [EOL]     try { [EOL]         Days.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_int() { [EOL]     Days test2 = Days.days(2); [EOL]     Days result = test2.plus(3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(5, result.getDays()); [EOL]     assertEquals(1, Days.ONE.plus(0).getDays()); [EOL]     try { [EOL]         Days.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(6, test.dividedBy(2).getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     assertEquals(4, test.dividedBy(3).getDays()); [EOL]     assertEquals(3, test.dividedBy(4).getDays()); [EOL]     assertEquals(2, test.dividedBy(5).getDays()); [EOL]     assertEquals(2, test.dividedBy(6).getDays()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Days.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(6, test.dividedBy(2).getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     assertEquals(4, test.dividedBy(3).getDays()); [EOL]     assertEquals(3, test.dividedBy(4).getDays()); [EOL]     assertEquals(2, test.dividedBy(5).getDays()); [EOL]     assertEquals(2, test.dividedBy(6).getDays()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Days.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(6, test.dividedBy(2).getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     assertEquals(4, test.dividedBy(3).getDays()); [EOL]     assertEquals(3, test.dividedBy(4).getDays()); [EOL]     assertEquals(2, test.dividedBy(5).getDays()); [EOL]     assertEquals(2, test.dividedBy(6).getDays()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Days.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToString() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals("P20D", test.toString()); [EOL]     test = Days.days(-20); [EOL]     assertEquals("P-20D", test.toString()); [EOL] }
public void testToString() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals("P20D", test.toString()); [EOL]     test = Days.days(-20); [EOL]     assertEquals("P-20D", test.toString()); [EOL] }
public void testToString() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals("P20D", test.toString()); [EOL]     test = Days.days(-20); [EOL]     assertEquals("P-20D", test.toString()); [EOL] }
public void testPropertyToIntervalYearOfEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfEra().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] }
public void testPropertyToIntervalYearOfEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfEra().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now(GREGORIAN_PARIS)); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now(GREGORIAN_PARIS)); [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusMonths_int_wrap() { [EOL]     MonthDay test = new MonthDay(6, 5, ISO_UTC); [EOL]     MonthDay result = test.plusMonths(10); [EOL]     MonthDay expected = new MonthDay(4, 5, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusMonths_int_wrap() { [EOL]     MonthDay test = new MonthDay(6, 5, ISO_UTC); [EOL]     MonthDay result = test.plusMonths(10); [EOL]     MonthDay expected = new MonthDay(4, 5, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusMonths_int_wrap() { [EOL]     MonthDay test = new MonthDay(6, 5, ISO_UTC); [EOL]     MonthDay result = test.plusMonths(10); [EOL]     MonthDay expected = new MonthDay(4, 5, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusMonths_int_wrap() { [EOL]     MonthDay test = new MonthDay(6, 5, ISO_UTC); [EOL]     MonthDay result = test.plusMonths(10); [EOL]     MonthDay expected = new MonthDay(4, 5, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL] }
public void testToLocalDate() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_UTC); [EOL]     LocalDate test = base.toLocalDate(2009); [EOL]     assertEquals(new LocalDate(2009, 6, 6, COPTIC_UTC), test); [EOL]     try { [EOL]         base.toLocalDate(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(6, 30, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(30, test.getDayOfMonth()); [EOL] }
public void testConstructor_int_int_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(6, 30, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(30, test.getDayOfMonth()); [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_PARIS, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalDateTime.now(GREGORIAN_PARIS)); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_PARIS, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalDateTime.now(GREGORIAN_PARIS)); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDateTime(2010, 6, 30, 1, 20), LocalDateTime.parse("2010-06-30T01:20")); [EOL]     assertEquals(new LocalDateTime(2010, 1, 2, 14, 50, 30, 432), LocalDateTime.parse("2010-002T14:50:30.432")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDateTime(2010, 6, 30, 1, 20), LocalDateTime.parse("2010-06-30T01:20")); [EOL]     assertEquals(new LocalDateTime(2010, 1, 2, 14, 50, 30, 432), LocalDateTime.parse("2010-002T14:50:30.432")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDateTime(2010, 6, 30, 1, 20), LocalDateTime.parse("2010-06-30T01:20")); [EOL]     assertEquals(new LocalDateTime(2010, 1, 2, 14, 50, 30, 432), LocalDateTime.parse("2010-002T14:50:30.432")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDateTime(2010, 6, 30, 1, 20), LocalDateTime.parse("2010-06-30T01:20")); [EOL]     assertEquals(new LocalDateTime(2010, 1, 2, 14, 50, 30, 432), LocalDateTime.parse("2010-002T14:50:30.432")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDateTime(2010, 6, 30, 1, 20), LocalDateTime.parse("2010-06-30T01:20")); [EOL]     assertEquals(new LocalDateTime(2010, 1, 2, 14, 50, 30, 432), LocalDateTime.parse("2010-002T14:50:30.432")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDateTime(2010, 6, 30, 1, 20), LocalDateTime.parse("2010-06-30T01:20")); [EOL]     assertEquals(new LocalDateTime(2010, 1, 2, 14, 50, 30, 432), LocalDateTime.parse("2010-002T14:50:30.432")); [EOL] }
public void testFactory_fromDateFields_after1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7); [EOL]     assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime())); [EOL] }
public void testFactory_fromDateFields_after1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7); [EOL]     assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime())); [EOL] }
public void testFactory_fromDateFields_after1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7); [EOL]     assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime())); [EOL] }
public void testSerializedLocalDateTime() throws Exception { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     loadAndCompare(test, "LocalDateTime", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testSerializedLocalDateTime() throws Exception { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     loadAndCompare(test, "LocalDateTime", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testSerializedLocalDateTime() throws Exception { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     loadAndCompare(test, "LocalDateTime", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("2002 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("2002 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("2002 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("2002 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("2002 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testToDateTime() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTime(); [EOL]     check(base, 2005, 6, 9, 6, 7, 8, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] }
public void testWithDate() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withDate(2006, 2, 1); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2006, 2, 1, 10, 20, 30, 40); [EOL] }
public void testWithDate() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withDate(2006, 2, 1); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2006, 2, 1, 10, 20, 30, 40); [EOL] }
public void testWithDate() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withDate(2006, 2, 1); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2006, 2, 1, 10, 20, 30, 40); [EOL] }
public void testWithDate() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withDate(2006, 2, 1); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2006, 2, 1, 10, 20, 30, 40); [EOL] }
public void testPlusWeeks_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusWeeks(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 10, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusWeeks_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusWeeks(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 10, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusWeeks_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusWeeks(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 10, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMillis(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMillis(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMillis(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("2002 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] }
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] }
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] }
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void test_printParseOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO); [EOL]     assertEquals("2007-03-04 12:30 +09:00", f.print(dt)); [EOL]     assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt, f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +09:00")); [EOL]     assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +09:00")); [EOL] }
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] }
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] }
public void testToDateTimeToday_Zone() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void test_isSupported() { [EOL]     assertEquals(true, MillisDurationField.INSTANCE.isSupported()); [EOL] }
public void test_compareTo() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE)); [EOL]     assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_getValue_long_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L, 567L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L, 567L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L, 567L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L, 567L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L, 567L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValueAsLong_long_long() { [EOL]     assertEquals(0L, MillisDurationField.INSTANCE.getValueAsLong(0L, 567L)); [EOL]     assertEquals(1234L, MillisDurationField.INSTANCE.getValueAsLong(1234L, 567L)); [EOL]     assertEquals(-1234L, MillisDurationField.INSTANCE.getValueAsLong(-1234L, 567L)); [EOL]     assertEquals(((long) (Integer.MAX_VALUE)) + 1L, MillisDurationField.INSTANCE.getValueAsLong(((long) (Integer.MAX_VALUE)) + 1L, 567L)); [EOL] }
public void test_add_long_long() { [EOL]     assertEquals(567L, MillisDurationField.INSTANCE.add(567L, 0L)); [EOL]     assertEquals(567L + 1234L, MillisDurationField.INSTANCE.add(567L, 1234L)); [EOL]     assertEquals(567L - 1234L, MillisDurationField.INSTANCE.add(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.add(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_compareTo() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE)); [EOL]     assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_compareTo() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE)); [EOL]     assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_compareTo() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE)); [EOL]     assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testSetIntoPeriod_Object1() throws Exception { [EOL]     Interval i = new Interval(100L, 223L); [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.millis()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, null); [EOL]     assertEquals(0, m.getYears()); [EOL]     assertEquals(0, m.getMonths()); [EOL]     assertEquals(0, m.getWeeks()); [EOL]     assertEquals(0, m.getDays()); [EOL]     assertEquals(0, m.getHours()); [EOL]     assertEquals(0, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object1() throws Exception { [EOL]     Interval i = new Interval(100L, 223L); [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.millis()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, null); [EOL]     assertEquals(0, m.getYears()); [EOL]     assertEquals(0, m.getMonths()); [EOL]     assertEquals(0, m.getWeeks()); [EOL]     assertEquals(0, m.getDays()); [EOL]     assertEquals(0, m.getHours()); [EOL]     assertEquals(0, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testIsReadableInterval_Object_Chronology() throws Exception { [EOL]     Interval i = new Interval(1234L, 5678L); [EOL]     assertEquals(true, ReadableIntervalConverter.INSTANCE.isReadableInterval(i, null)); [EOL] }
public void testIsReadableInterval_Object_Chronology() throws Exception { [EOL]     Interval i = new Interval(1234L, 5678L); [EOL]     assertEquals(true, ReadableIntervalConverter.INSTANCE.isReadableInterval(i, null)); [EOL] }
public void testIsReadableInterval_Object_Chronology() throws Exception { [EOL]     Interval i = new Interval(1234L, 5678L); [EOL]     assertEquals(true, ReadableIntervalConverter.INSTANCE.isReadableInterval(i, null)); [EOL] }
public void testIsReadableInterval_Object_Chronology() throws Exception { [EOL]     Interval i = new Interval(1234L, 5678L); [EOL]     assertEquals(true, ReadableIntervalConverter.INSTANCE.isReadableInterval(i, null)); [EOL] }
public void testSetIntoInterval_Object2() throws Exception { [EOL]     Interval i = new Interval(0L, 123L, CopticChronology.getInstance()); [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance()); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(GJChronology.getInstance(), m.getChronology()); [EOL] }
public void testSetIntoInterval_Object2() throws Exception { [EOL]     Interval i = new Interval(0L, 123L, CopticChronology.getInstance()); [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance()); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(GJChronology.getInstance(), m.getChronology()); [EOL] }
public void testSupportedType() throws Exception { [EOL]     assertEquals(ReadableInterval.class, ReadableIntervalConverter.INSTANCE.getSupportedType()); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testPatchedNameKeysLondon() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0); [EOL]     String str1 = zone.getName(now.getMillis()); [EOL]     String str2 = zone.getName(now.plusMonths(6).getMillis()); [EOL]     assertEquals(false, str1.equals(str2)); [EOL] }
public void testFormatParse_textEraAD_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$ap. J.-C.2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textEraAD_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$ap. J.-C.2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] }
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] }
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] }
public void testParseInto_simple_precedence() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(24, f.parseInto(result, "Mon 2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testParseInto_simple_precedence() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(24, f.parseInto(result, "Mon 2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testMutableDateTime() { [EOL]     MutableDateTime test = new MutableDateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE)); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("2010-06-30T02:30:50.678+02:00", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MutableDateTime.class, str)); [EOL] }
public void testToMutableDateTime_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, PARIS); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL] }
public void testToMutableDateTime_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, PARIS); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testIsEqual_RI() { [EOL]     Instant test1 = new Instant(TEST_TIME1); [EOL]     Instant test1a = new Instant(TEST_TIME1); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     Instant test2 = new Instant(TEST_TIME2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(new MockInstant())); [EOL]     assertEquals(true, test1.isEqual(new MockInstant())); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqual(null)); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW).isEqual(null)); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqual(null)); [EOL] }
public void testIsEqual_RI() { [EOL]     Instant test1 = new Instant(TEST_TIME1); [EOL]     Instant test1a = new Instant(TEST_TIME1); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     Instant test2 = new Instant(TEST_TIME2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(new MockInstant())); [EOL]     assertEquals(true, test1.isEqual(new MockInstant())); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqual(null)); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW).isEqual(null)); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqual(null)); [EOL] }
public void testIsEqual_RI() { [EOL]     Instant test1 = new Instant(TEST_TIME1); [EOL]     Instant test1a = new Instant(TEST_TIME1); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     Instant test2 = new Instant(TEST_TIME2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(new MockInstant())); [EOL]     assertEquals(true, test1.isEqual(new MockInstant())); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqual(null)); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW).isEqual(null)); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqual(null)); [EOL] }
public void testSetInterval_RI_RI5() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testSetInterval_RI_RI5() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testSetInterval_RI_RI5() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testSetInterval_RI_RI5() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testSetPeriodBeforeEnd_RI1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setPeriodBeforeEnd(new Period(123L)); [EOL]     assertEquals(TEST_TIME2 - 123L, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetPeriodBeforeEnd_RI1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setPeriodBeforeEnd(new Period(123L)); [EOL]     assertEquals(TEST_TIME2 - 123L, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     assertEquals(new DateMidnight(2010, 6, 30, ISOChronology.getInstance(LONDON)), DateMidnight.parse("2010--30 06", DateTimeFormat.forPattern("yyyy--dd MM"))); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     assertEquals(new DateMidnight(2010, 6, 30, ISOChronology.getInstance(LONDON)), DateMidnight.parse("2010--30 06", DateTimeFormat.forPattern("yyyy--dd MM"))); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     assertEquals(new DateMidnight(2010, 6, 30, ISOChronology.getInstance(LONDON)), DateMidnight.parse("2010--30 06", DateTimeFormat.forPattern("yyyy--dd MM"))); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToDateMidnight() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToDateMidnight() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testWithField1() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new DateMidnight(2004, 6, 9), test); [EOL]     assertEquals(new DateMidnight(2006, 6, 9), result); [EOL] }
public void testWithField1() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new DateMidnight(2004, 6, 9), test); [EOL]     assertEquals(new DateMidnight(2006, 6, 9), result); [EOL] }
public void testWithFieldAdded2() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded2() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded2() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_long() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(123456789L); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusYears(1); [EOL]     DateMidnight expected = new DateMidnight(2001, 5, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusYears(1); [EOL]     DateMidnight expected = new DateMidnight(2001, 5, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusYears(1); [EOL]     DateMidnight expected = new DateMidnight(2001, 5, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testProperty() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.property(DateTimeFieldType.millisOfSecond()), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.property(DateTimeFieldType.millisOfSecond()), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.property(DateTimeFieldType.millisOfSecond()), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToLocalDate() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     LocalDate test = base.toLocalDate(); [EOL]     assertEquals(new LocalDate(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testToInterval() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     Interval test = base.toInterval(); [EOL]     DateMidnight end = base.plus(Period.days(1)); [EOL]     assertEquals(new Interval(base, end), test); [EOL] }
public void testToInterval() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     Interval test = base.toInterval(); [EOL]     DateMidnight end = base.plus(Period.days(1)); [EOL]     assertEquals(new Interval(base, end), test); [EOL] }
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.dayOfMonth().withMaximumValue(); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyGetEra() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateMidnight()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateMidnight()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().addToCopy(8); [EOL]     assertEquals(2005, copy.getYear()); [EOL]     assertEquals(2, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().addToCopy(8); [EOL]     assertEquals(2005, copy.getYear()); [EOL]     assertEquals(2, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().addToCopy(8); [EOL]     assertEquals(2005, copy.getYear()); [EOL]     assertEquals(2, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.dayOfMonth().withMaximumValue(); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.dayOfMonth().withMaximumValue(); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.dayOfMonth().withMaximumValue(); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.dayOfMonth().withMinimumValue(); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyRoundFloorMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 16); [EOL]     DateMidnight copy = test.monthOfYear().roundFloorCopy(); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyRoundCeilingMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 16); [EOL]     DateMidnight copy = test.monthOfYear().roundCeilingCopy(); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(GREGORIAN_PARIS)); [EOL] }
