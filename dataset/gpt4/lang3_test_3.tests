@Test [EOL] public void test_isNotFalse_Boolean() { [EOL]     assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE)); [EOL]     assertTrue(BooleanUtils.isNotFalse((Boolean) null)); [EOL] }
@Test [EOL] public void test_isNotFalse_Boolean() { [EOL]     assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE)); [EOL]     assertTrue(BooleanUtils.isNotFalse((Boolean) null)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBoolean_int_int_int_noMatch() { [EOL]     BooleanUtils.toBoolean(8, 6, 7); [EOL] }
@Test [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); [EOL] }
@Test [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); [EOL] }
@Test [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); [EOL] }
@Test [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); [EOL] }
@Test [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); [EOL] }
@Test [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); [EOL] }
@Test [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); [EOL] }
@Test [EOL] public void test_toInteger_boolean() { [EOL]     assertEquals(1, BooleanUtils.toInteger(true)); [EOL]     assertEquals(0, BooleanUtils.toInteger(false)); [EOL] }
@Test [EOL] public void test_toInteger_boolean() { [EOL]     assertEquals(1, BooleanUtils.toInteger(true)); [EOL]     assertEquals(0, BooleanUtils.toInteger(false)); [EOL] }
@Test [EOL] public void test_toIntegerObject_boolean() { [EOL]     assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(true)); [EOL]     assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(false)); [EOL] }
@Test [EOL] public void test_toIntegerObject_boolean() { [EOL]     assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(true)); [EOL]     assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(false)); [EOL] }
@Test [EOL] public void test_toInteger_Boolean_int_int_int() { [EOL]     assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8)); [EOL]     assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8)); [EOL]     assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8)); [EOL] }
@Test [EOL] public void test_toInteger_Boolean_int_int_int() { [EOL]     assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8)); [EOL]     assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8)); [EOL]     assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8)); [EOL] }
@Test [EOL] public void test_toInteger_Boolean_int_int_int() { [EOL]     assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8)); [EOL]     assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8)); [EOL]     assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8)); [EOL] }
@Test [EOL] public void test_toIntegerObject_Boolean_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight)); [EOL]     assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight)); [EOL]     assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null)); [EOL] }
@Test [EOL] public void test_toIntegerObject_Boolean_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight)); [EOL]     assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight)); [EOL]     assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null)); [EOL] }
@Test [EOL] public void test_toIntegerObject_Boolean_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight)); [EOL]     assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight)); [EOL]     assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null)); [EOL] }
@Test [EOL] public void test_toBooleanObject_String_String_String_String() { [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String_String_String_String() { [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String_String_String_String() { [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String_String_String_String() { [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String_String_String_String() { [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL] }
@Test [EOL] public void test_toStringOnOff_boolean() { [EOL]     assertEquals("on", BooleanUtils.toStringOnOff(true)); [EOL]     assertEquals("off", BooleanUtils.toStringOnOff(false)); [EOL] }
@Test [EOL] public void test_toStringOnOff_boolean() { [EOL]     assertEquals("on", BooleanUtils.toStringOnOff(true)); [EOL]     assertEquals("off", BooleanUtils.toStringOnOff(false)); [EOL] }
@Test [EOL] public void test_toStringYesNo_boolean() { [EOL]     assertEquals("yes", BooleanUtils.toStringYesNo(true)); [EOL]     assertEquals("no", BooleanUtils.toStringYesNo(false)); [EOL] }
@Test [EOL] public void test_toStringYesNo_boolean() { [EOL]     assertEquals("yes", BooleanUtils.toStringYesNo(true)); [EOL]     assertEquals("no", BooleanUtils.toStringYesNo(false)); [EOL] }
@Test [EOL] public void test_toStringOnOff_boolean() { [EOL]     assertEquals("on", BooleanUtils.toStringOnOff(true)); [EOL]     assertEquals("off", BooleanUtils.toStringOnOff(false)); [EOL] }
@Test [EOL] public void test_toStringOnOff_boolean() { [EOL]     assertEquals("on", BooleanUtils.toStringOnOff(true)); [EOL]     assertEquals("off", BooleanUtils.toStringOnOff(false)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_nullInput() { [EOL]     BooleanUtils.and((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_nullInput() { [EOL]     BooleanUtils.and((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_nullInput() { [EOL]     BooleanUtils.and((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_nullInput() { [EOL]     BooleanUtils.and((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullInput() { [EOL]     BooleanUtils.and((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullInput() { [EOL]     BooleanUtils.and((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullInput() { [EOL]     BooleanUtils.and((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullInput() { [EOL]     BooleanUtils.and((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullInput() { [EOL]     BooleanUtils.and((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_emptyInput() { [EOL]     BooleanUtils.or(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_emptyInput() { [EOL]     BooleanUtils.or(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_emptyInput() { [EOL]     BooleanUtils.or(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_emptyInput() { [EOL]     BooleanUtils.or(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_emptyInput() { [EOL]     BooleanUtils.or(new boolean[] {}); [EOL] }
@Test [EOL] public void testOr_object_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testOr_object_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testOr_object_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testOr_object_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testOr_object_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testOr_object_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testConstructor() throws Exception { [EOL]     assertNotNull(MethodUtils.class.newInstance()); [EOL] }
@Test [EOL] public void testGetAccessiblePublicMethod() throws Exception { [EOL]     assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class.getMethod("getValue", ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass()); [EOL] }
@Test [EOL] public void testToIntStringI() { [EOL]     assertTrue("toInt(String,int) 1 failed", NumberUtils.toInt("12345", 5) == 12345); [EOL]     assertTrue("toInt(String,int) 2 failed", NumberUtils.toInt("1234.5", 5) == 5); [EOL] }
@Test [EOL] public void testToLongString() { [EOL]     assertTrue("toLong(String) 1 failed", NumberUtils.toLong("12345") == 12345l); [EOL]     assertTrue("toLong(String) 2 failed", NumberUtils.toLong("abc") == 0l); [EOL]     assertTrue("toLong(String) 3 failed", NumberUtils.toLong("1L") == 0l); [EOL]     assertTrue("toLong(String) 4 failed", NumberUtils.toLong("1l") == 0l); [EOL]     assertTrue("toLong(Long.MAX_VALUE) failed", NumberUtils.toLong(Long.MAX_VALUE + "") == Long.MAX_VALUE); [EOL]     assertTrue("toLong(Long.MIN_VALUE) failed", NumberUtils.toLong(Long.MIN_VALUE + "") == Long.MIN_VALUE); [EOL]     assertTrue("toLong(empty) failed", NumberUtils.toLong("") == 0l); [EOL]     assertTrue("toLong(null) failed", NumberUtils.toLong(null) == 0l); [EOL] }
@Test [EOL] public void testToLongString() { [EOL]     assertTrue("toLong(String) 1 failed", NumberUtils.toLong("12345") == 12345l); [EOL]     assertTrue("toLong(String) 2 failed", NumberUtils.toLong("abc") == 0l); [EOL]     assertTrue("toLong(String) 3 failed", NumberUtils.toLong("1L") == 0l); [EOL]     assertTrue("toLong(String) 4 failed", NumberUtils.toLong("1l") == 0l); [EOL]     assertTrue("toLong(Long.MAX_VALUE) failed", NumberUtils.toLong(Long.MAX_VALUE + "") == Long.MAX_VALUE); [EOL]     assertTrue("toLong(Long.MIN_VALUE) failed", NumberUtils.toLong(Long.MIN_VALUE + "") == Long.MIN_VALUE); [EOL]     assertTrue("toLong(empty) failed", NumberUtils.toLong("") == 0l); [EOL]     assertTrue("toLong(null) failed", NumberUtils.toLong(null) == 0l); [EOL] }
@Test [EOL] public void testToLongString() { [EOL]     assertTrue("toLong(String) 1 failed", NumberUtils.toLong("12345") == 12345l); [EOL]     assertTrue("toLong(String) 2 failed", NumberUtils.toLong("abc") == 0l); [EOL]     assertTrue("toLong(String) 3 failed", NumberUtils.toLong("1L") == 0l); [EOL]     assertTrue("toLong(String) 4 failed", NumberUtils.toLong("1l") == 0l); [EOL]     assertTrue("toLong(Long.MAX_VALUE) failed", NumberUtils.toLong(Long.MAX_VALUE + "") == Long.MAX_VALUE); [EOL]     assertTrue("toLong(Long.MIN_VALUE) failed", NumberUtils.toLong(Long.MIN_VALUE + "") == Long.MIN_VALUE); [EOL]     assertTrue("toLong(empty) failed", NumberUtils.toLong("") == 0l); [EOL]     assertTrue("toLong(null) failed", NumberUtils.toLong(null) == 0l); [EOL] }
@Test [EOL] public void testToLongString() { [EOL]     assertTrue("toLong(String) 1 failed", NumberUtils.toLong("12345") == 12345l); [EOL]     assertTrue("toLong(String) 2 failed", NumberUtils.toLong("abc") == 0l); [EOL]     assertTrue("toLong(String) 3 failed", NumberUtils.toLong("1L") == 0l); [EOL]     assertTrue("toLong(String) 4 failed", NumberUtils.toLong("1l") == 0l); [EOL]     assertTrue("toLong(Long.MAX_VALUE) failed", NumberUtils.toLong(Long.MAX_VALUE + "") == Long.MAX_VALUE); [EOL]     assertTrue("toLong(Long.MIN_VALUE) failed", NumberUtils.toLong(Long.MIN_VALUE + "") == Long.MIN_VALUE); [EOL]     assertTrue("toLong(empty) failed", NumberUtils.toLong("") == 0l); [EOL]     assertTrue("toLong(null) failed", NumberUtils.toLong(null) == 0l); [EOL] }
@Test [EOL] public void testToFloatString() { [EOL]     assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); [EOL]     assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); [EOL]     assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); [EOL]     assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE + "") == Float.MAX_VALUE); [EOL]     assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE + "") == Float.MIN_VALUE); [EOL]     assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f); [EOL]     assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f); [EOL] }
@Test [EOL] public void testToFloatString() { [EOL]     assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); [EOL]     assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); [EOL]     assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); [EOL]     assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE + "") == Float.MAX_VALUE); [EOL]     assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE + "") == Float.MIN_VALUE); [EOL]     assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f); [EOL]     assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f); [EOL] }
@Test [EOL] public void testToFloatString() { [EOL]     assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); [EOL]     assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); [EOL]     assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); [EOL]     assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE + "") == Float.MAX_VALUE); [EOL]     assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE + "") == Float.MIN_VALUE); [EOL]     assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f); [EOL]     assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f); [EOL] }
@Test [EOL] public void testCreateDouble() { [EOL]     assertEquals("createDouble(String) failed", Double.valueOf("1234.5"), NumberUtils.createDouble("1234.5")); [EOL]     assertEquals("createDouble(null) failed", null, NumberUtils.createDouble(null)); [EOL]     this.testCreateDoubleFailure(""); [EOL]     this.testCreateDoubleFailure(" "); [EOL]     this.testCreateDoubleFailure("\b\t\n\f\r"); [EOL]     this.testCreateDoubleFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] }
@Test [EOL] public void testCreateBigDecimal() { [EOL]     assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5")); [EOL]     assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null)); [EOL]     this.testCreateBigDecimalFailure(""); [EOL]     this.testCreateBigDecimalFailure(" "); [EOL]     this.testCreateBigDecimalFailure("\b\t\n\f\r"); [EOL]     this.testCreateBigDecimalFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL]     this.testCreateBigDecimalFailure("-"); [EOL]     this.testCreateBigDecimalFailure("--"); [EOL]     this.testCreateBigDecimalFailure("--0"); [EOL]     this.testCreateBigDecimalFailure("+"); [EOL]     this.testCreateBigDecimalFailure("++"); [EOL]     this.testCreateBigDecimalFailure("++0"); [EOL] }
@Test [EOL] public void testCreateBigDecimal() { [EOL]     assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5")); [EOL]     assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null)); [EOL]     this.testCreateBigDecimalFailure(""); [EOL]     this.testCreateBigDecimalFailure(" "); [EOL]     this.testCreateBigDecimalFailure("\b\t\n\f\r"); [EOL]     this.testCreateBigDecimalFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL]     this.testCreateBigDecimalFailure("-"); [EOL]     this.testCreateBigDecimalFailure("--"); [EOL]     this.testCreateBigDecimalFailure("--0"); [EOL]     this.testCreateBigDecimalFailure("+"); [EOL]     this.testCreateBigDecimalFailure("++"); [EOL]     this.testCreateBigDecimalFailure("++0"); [EOL] }
@Test [EOL] public void testCreateBigDecimal() { [EOL]     assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5")); [EOL]     assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null)); [EOL]     this.testCreateBigDecimalFailure(""); [EOL]     this.testCreateBigDecimalFailure(" "); [EOL]     this.testCreateBigDecimalFailure("\b\t\n\f\r"); [EOL]     this.testCreateBigDecimalFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL]     this.testCreateBigDecimalFailure("-"); [EOL]     this.testCreateBigDecimalFailure("--"); [EOL]     this.testCreateBigDecimalFailure("--0"); [EOL]     this.testCreateBigDecimalFailure("+"); [EOL]     this.testCreateBigDecimalFailure("++"); [EOL]     this.testCreateBigDecimalFailure("++0"); [EOL] }
@Test [EOL] public void testCreateBigDecimal() { [EOL]     assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5")); [EOL]     assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null)); [EOL]     this.testCreateBigDecimalFailure(""); [EOL]     this.testCreateBigDecimalFailure(" "); [EOL]     this.testCreateBigDecimalFailure("\b\t\n\f\r"); [EOL]     this.testCreateBigDecimalFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL]     this.testCreateBigDecimalFailure("-"); [EOL]     this.testCreateBigDecimalFailure("--"); [EOL]     this.testCreateBigDecimalFailure("--0"); [EOL]     this.testCreateBigDecimalFailure("+"); [EOL]     this.testCreateBigDecimalFailure("++"); [EOL]     this.testCreateBigDecimalFailure("++0"); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxInt_emptyArray() { [EOL]     NumberUtils.max(new int[0]); [EOL] }
@Test [EOL] public void testMaxDouble() { [EOL]     final double[] d = null; [EOL]     try { [EOL]         NumberUtils.max(d); [EOL]         fail("No exception was thrown for null input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         NumberUtils.max(new double[0]); [EOL]         fail("No exception was thrown for empty input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("max(double[]) failed for array length 1", 5.1f, NumberUtils.max(new double[] { 5.1f }), 0); [EOL]     assertEquals("max(double[]) failed for array length 2", 9.2f, NumberUtils.max(new double[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(double[]) failed for float length 5", 10.4f, NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001); [EOL] }
@Test [EOL] public void testMaxDouble() { [EOL]     final double[] d = null; [EOL]     try { [EOL]         NumberUtils.max(d); [EOL]         fail("No exception was thrown for null input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         NumberUtils.max(new double[0]); [EOL]         fail("No exception was thrown for empty input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("max(double[]) failed for array length 1", 5.1f, NumberUtils.max(new double[] { 5.1f }), 0); [EOL]     assertEquals("max(double[]) failed for array length 2", 9.2f, NumberUtils.max(new double[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(double[]) failed for float length 5", 10.4f, NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001); [EOL] }
@Test [EOL] public void testMaxDouble() { [EOL]     final double[] d = null; [EOL]     try { [EOL]         NumberUtils.max(d); [EOL]         fail("No exception was thrown for null input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         NumberUtils.max(new double[0]); [EOL]         fail("No exception was thrown for empty input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("max(double[]) failed for array length 1", 5.1f, NumberUtils.max(new double[] { 5.1f }), 0); [EOL]     assertEquals("max(double[]) failed for array length 2", 9.2f, NumberUtils.max(new double[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(double[]) failed for float length 5", 10.4f, NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001); [EOL] }
@Test [EOL] public void testMaxDouble() { [EOL]     final double[] d = null; [EOL]     try { [EOL]         NumberUtils.max(d); [EOL]         fail("No exception was thrown for null input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         NumberUtils.max(new double[0]); [EOL]         fail("No exception was thrown for empty input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("max(double[]) failed for array length 1", 5.1f, NumberUtils.max(new double[] { 5.1f }), 0); [EOL]     assertEquals("max(double[]) failed for array length 2", 9.2f, NumberUtils.max(new double[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(double[]) failed for float length 5", 10.4f, NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001); [EOL] }
@Test [EOL] public void testMaxFloat() { [EOL]     assertEquals("max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); [EOL]     assertEquals("max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); [EOL] }
@Test [EOL] public void testMaxFloat() { [EOL]     assertEquals("max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); [EOL]     assertEquals("max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); [EOL] }
@Test [EOL] public void testMaxFloat() { [EOL]     assertEquals("max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); [EOL]     assertEquals("max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); [EOL] }
@Test [EOL] public void testMaxFloat() { [EOL]     assertEquals("max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); [EOL]     assertEquals("max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); [EOL] }
@Test [EOL] public void testMaxFloat() { [EOL]     assertEquals("max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); [EOL]     assertEquals("max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); [EOL] }
@Test [EOL] public void testMaxFloat() { [EOL]     assertEquals("max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); [EOL]     assertEquals("max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); [EOL] }
@Test [EOL] public void testMaxFloat() { [EOL]     assertEquals("max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); [EOL]     assertEquals("max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxInt_emptyArray() { [EOL]     NumberUtils.max(new int[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxInt_emptyArray() { [EOL]     NumberUtils.max(new int[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxInt_emptyArray() { [EOL]     NumberUtils.max(new int[0]); [EOL] }
@Test [EOL] public void testMinimumShort() { [EOL]     final short low = 1234; [EOL]     final short mid = 1234 + 1; [EOL]     final short high = 1234 + 2; [EOL]     assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, high)); [EOL]     assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, low, high)); [EOL]     assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, high, low)); [EOL]     assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, low)); [EOL] }
@Test [EOL] public void testMaximumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001); [EOL] }
@Test [EOL] public void testMaximumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001); [EOL] }
@Test [EOL] public void testMaximumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001); [EOL] }
@Test [EOL] public void testMaximumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001); [EOL] }
@Test [EOL] public void testInitializeUncheckedEx() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception cause = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.initializeUnchecked(init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertSame("Wrong cause", cause, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testInitializeUncheckedEx() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception cause = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.initializeUnchecked(init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertSame("Wrong cause", cause, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] }
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] public void testEqualsHashcode() { [EOL]     final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]     final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]     final String pattern = "Pattern: {0,testfmt}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     ExtendedMessageFormat other = null; [EOL]     assertTrue("same, equals()", emf.equals(emf)); [EOL]     assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertTrue("equal, equals()", emf.equals(other)); [EOL]     assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]     assertFalse("class, equals()", emf.equals(other)); [EOL]     assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]     assertFalse("pattern, equals()", emf.equals(other)); [EOL]     assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]     assertFalse("registry, equals()", emf.equals(other)); [EOL]     assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]     other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]     assertFalse("locale, equals()", emf.equals(other)); [EOL]     assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] public void testToStringNull() { [EOL]     final String s = new ConstantInitializer<Object>(null).toString(); [EOL]     assertTrue("Object not found: " + s, s.indexOf("object = null") > 0); [EOL] }
@Test [EOL] public void testToStringNull() { [EOL]     final String s = new ConstantInitializer<Object>(null).toString(); [EOL]     assertTrue("Object not found: " + s, s.indexOf("object = null") > 0); [EOL] }
@Test [EOL] public void testToStringNull() { [EOL]     final String s = new ConstantInitializer<Object>(null).toString(); [EOL]     assertTrue("Object not found: " + s, s.indexOf("object = null") > 0); [EOL] }
@Test [EOL] public void testEqualsTrue() { [EOL]     checkEquals(init, true); [EOL]     ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(Integer.valueOf(VALUE.intValue())); [EOL]     checkEquals(init2, true); [EOL]     init = new ConstantInitializer<Integer>(null); [EOL]     init2 = new ConstantInitializer<Integer>(null); [EOL]     checkEquals(init2, true); [EOL] }
@Test [EOL] public void testEqualsTrue() { [EOL]     checkEquals(init, true); [EOL]     ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(Integer.valueOf(VALUE.intValue())); [EOL]     checkEquals(init2, true); [EOL]     init = new ConstantInitializer<Integer>(null); [EOL]     init2 = new ConstantInitializer<Integer>(null); [EOL]     checkEquals(init2, true); [EOL] }
@Test [EOL] public void testEqualsTrue() { [EOL]     checkEquals(init, true); [EOL]     ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(Integer.valueOf(VALUE.intValue())); [EOL]     checkEquals(init2, true); [EOL]     init = new ConstantInitializer<Integer>(null); [EOL]     init2 = new ConstantInitializer<Integer>(null); [EOL]     checkEquals(init2, true); [EOL] }
@Test [EOL] public void testEqualsTrue() { [EOL]     checkEquals(init, true); [EOL]     ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(Integer.valueOf(VALUE.intValue())); [EOL]     checkEquals(init2, true); [EOL]     init = new ConstantInitializer<Integer>(null); [EOL]     init2 = new ConstantInitializer<Integer>(null); [EOL]     checkEquals(init2, true); [EOL] }
@Test [EOL] public void testEqualsTrue() { [EOL]     checkEquals(init, true); [EOL]     ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(Integer.valueOf(VALUE.intValue())); [EOL]     checkEquals(init2, true); [EOL]     init = new ConstantInitializer<Integer>(null); [EOL]     init2 = new ConstantInitializer<Integer>(null); [EOL]     checkEquals(init2, true); [EOL] }
@Test [EOL] public void testEqualsTrue() { [EOL]     checkEquals(init, true); [EOL]     ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(Integer.valueOf(VALUE.intValue())); [EOL]     checkEquals(init2, true); [EOL]     init = new ConstantInitializer<Integer>(null); [EOL]     init2 = new ConstantInitializer<Integer>(null); [EOL]     checkEquals(init2, true); [EOL] }
@Test [EOL] public void testEqualsTrue() { [EOL]     checkEquals(init, true); [EOL]     ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(Integer.valueOf(VALUE.intValue())); [EOL]     checkEquals(init2, true); [EOL]     init = new ConstantInitializer<Integer>(null); [EOL]     init2 = new ConstantInitializer<Integer>(null); [EOL]     checkEquals(init2, true); [EOL] }
@Test [EOL] public void testToStringNull() { [EOL]     final String s = new ConstantInitializer<Object>(null).toString(); [EOL]     assertTrue("Object not found: " + s, s.indexOf("object = null") > 0); [EOL] }
@Test [EOL] public void testToStringNull() { [EOL]     final String s = new ConstantInitializer<Object>(null).toString(); [EOL]     assertTrue("Object not found: " + s, s.indexOf("object = null") > 0); [EOL] }
@Test [EOL] public void testSerializeBytesUnserializable() throws Exception { [EOL]     try { [EOL]         iMap.put(new Object(), new Object()); [EOL]         SerializationUtils.serialize(iMap); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testBuildDefaults() { [EOL]     final BasicThreadFactory factory = builder.build(); [EOL]     checkFactoryDefaults(factory); [EOL] }
@Test [EOL] public void testBuildDefaults() { [EOL]     final BasicThreadFactory factory = builder.build(); [EOL]     checkFactoryDefaults(factory); [EOL] }
@Test [EOL] public void testBuildDefaults() { [EOL]     final BasicThreadFactory factory = builder.build(); [EOL]     checkFactoryDefaults(factory); [EOL] }
@Test [EOL] public void testBuildDefaults() { [EOL]     final BasicThreadFactory factory = builder.build(); [EOL]     checkFactoryDefaults(factory); [EOL] }
@Test [EOL] public void testBuildDefaults() { [EOL]     final BasicThreadFactory factory = builder.build(); [EOL]     checkFactoryDefaults(factory); [EOL] }
@Test [EOL] public void testBuildDefaults() { [EOL]     final BasicThreadFactory factory = builder.build(); [EOL]     checkFactoryDefaults(factory); [EOL] }
@Test [EOL] public void testNewThreadPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final int priority = Thread.NORM_PRIORITY + 1; [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", priority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final int priority = Thread.NORM_PRIORITY + 1; [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", priority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final int priority = Thread.NORM_PRIORITY + 1; [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", priority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final int priority = Thread.NORM_PRIORITY + 1; [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", priority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final int priority = Thread.NORM_PRIORITY + 1; [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", priority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testBuildNamingPatternNull() { [EOL]     builder.namingPattern(null); [EOL] }
@Test [EOL] public void testNewThreadPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final int priority = Thread.NORM_PRIORITY + 1; [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", priority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final int priority = Thread.NORM_PRIORITY + 1; [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", priority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final int priority = Thread.NORM_PRIORITY + 1; [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", priority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testInitInvalidPeriod() { [EOL]     new TimedSemaphore(0L, UNIT, LIMIT); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testInitInvalidPeriod() { [EOL]     new TimedSemaphore(0L, UNIT, LIMIT); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testInitInvalidPeriod() { [EOL]     new TimedSemaphore(0L, UNIT, LIMIT); [EOL] }
@Test(expected = IllegalStateException.class) [EOL] public void testPassAfterShutdown() throws InterruptedException { [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); [EOL]     semaphore.shutdown(); [EOL]     semaphore.acquire(); [EOL] }
@Test(expected = IllegalStateException.class) [EOL] public void testPassAfterShutdown() throws InterruptedException { [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); [EOL]     semaphore.shutdown(); [EOL]     semaphore.acquire(); [EOL] }
@Test(expected = IllegalStateException.class) [EOL] public void testPassAfterShutdown() throws InterruptedException { [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); [EOL]     semaphore.shutdown(); [EOL]     semaphore.acquire(); [EOL] }
@Test(expected = IllegalStateException.class) [EOL] public void testPassAfterShutdown() throws InterruptedException { [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); [EOL]     semaphore.shutdown(); [EOL]     semaphore.acquire(); [EOL] }
@Test(expected = IllegalStateException.class) [EOL] public void testPassAfterShutdown() throws InterruptedException { [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); [EOL]     semaphore.shutdown(); [EOL]     semaphore.acquire(); [EOL] }
@Test [EOL] public void testContextedExceptionString() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE); [EOL]     assertEquals(TEST_MESSAGE, exceptionContext.getMessage()); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionThrowable() { [EOL]     exceptionContext = new ContextedRuntimeException(new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionThrowable() { [EOL]     exceptionContext = new ContextedRuntimeException(new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testRemoveNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.removeListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testRemoveNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.removeListener(null); [EOL] }
@Test [EOL] public void testGetListeners() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     final VetoableChangeListener[] listeners = listenerSupport.getListeners(); [EOL]     assertEquals(0, listeners.length); [EOL]     assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); [EOL]     final VetoableChangeListener[] empty = listeners; [EOL]     assertSame(empty, listenerSupport.getListeners()); [EOL]     final VetoableChangeListener listener1 = EasyMock.createNiceMock(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(listener1); [EOL]     assertEquals(1, listenerSupport.getListeners().length); [EOL]     final VetoableChangeListener listener2 = EasyMock.createNiceMock(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(listener2); [EOL]     assertEquals(2, listenerSupport.getListeners().length); [EOL]     listenerSupport.removeListener(listener1); [EOL]     assertEquals(1, listenerSupport.getListeners().length); [EOL]     listenerSupport.removeListener(listener2); [EOL]     assertSame(empty, listenerSupport.getListeners()); [EOL] }
@Test [EOL] public void testGetListeners() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     final VetoableChangeListener[] listeners = listenerSupport.getListeners(); [EOL]     assertEquals(0, listeners.length); [EOL]     assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); [EOL]     final VetoableChangeListener[] empty = listeners; [EOL]     assertSame(empty, listenerSupport.getListeners()); [EOL]     final VetoableChangeListener listener1 = EasyMock.createNiceMock(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(listener1); [EOL]     assertEquals(1, listenerSupport.getListeners().length); [EOL]     final VetoableChangeListener listener2 = EasyMock.createNiceMock(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(listener2); [EOL]     assertEquals(2, listenerSupport.getListeners().length); [EOL]     listenerSupport.removeListener(listener1); [EOL]     assertEquals(1, listenerSupport.getListeners().length); [EOL]     listenerSupport.removeListener(listener2); [EOL]     assertSame(empty, listenerSupport.getListeners()); [EOL] }
@Test [EOL] public void testUuuuu() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\uuuuuuuu0047"; [EOL]     final String result = uu.translate(input); [EOL]     assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL] }
@Test [EOL] public void testUuuuu() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\uuuuuuuu0047"; [EOL]     final String result = uu.translate(input); [EOL]     assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL] }
@Test [EOL] public void testUuuuu() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\uuuuuuuu0047"; [EOL]     final String result = uu.translate(input); [EOL]     assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL] }
@Test [EOL] public void testUuuuu() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\uuuuuuuu0047"; [EOL]     final String result = uu.translate(input); [EOL]     assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL] }
@Test [EOL] public void testUuuuu() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\uuuuuuuu0047"; [EOL]     final String result = uu.translate(input); [EOL]     assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL] }
@Test [EOL] public void testUuuuu() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\uuuuuuuu0047"; [EOL]     final String result = uu.translate(input); [EOL]     assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL] }
@Test [EOL] public void testUuuuu() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\uuuuuuuu0047"; [EOL]     final String result = uu.translate(input); [EOL]     assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL] }
@Test [EOL] public void testUuuuu() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\uuuuuuuu0047"; [EOL]     final String result = uu.translate(input); [EOL]     assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL] }
@Test [EOL] public void test_getShortClassName_Object() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]     assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL] }
@Test [EOL] public void test_getShortClassName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName())); [EOL]     assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName())); [EOL]     assertEquals("", ClassUtils.getShortClassName((String) null)); [EOL]     assertEquals("", ClassUtils.getShortClassName("")); [EOL] }
@Test [EOL] public void test_getPackageName_String() { [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); [EOL]     assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); [EOL]     assertEquals("", ClassUtils.getPackageName((String) null)); [EOL]     assertEquals("", ClassUtils.getPackageName("")); [EOL] }
@Test [EOL] public void testPrimitivesToWrappers() { [EOL]     assertNull("null -> null", ClassUtils.primitivesToWrappers((Class<?>[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers())); [EOL]     final Class<?>[] castNull = ClassUtils.primitivesToWrappers((Class<?>) null); [EOL]     assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); [EOL]     assertArrayEquals("empty -> empty", ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     final Class<?>[] primitives = new Class[] { Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE, String.class, ClassUtils.class }; [EOL]     final Class<?>[] wrappers = ClassUtils.primitivesToWrappers(primitives); [EOL]     for (int i = 0; i < primitives.length; i++) { [EOL]         final Class<?> primitive = primitives[i]; [EOL]         final Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive); [EOL]         assertEquals(primitive + " -> " + expectedWrapper, expectedWrapper, wrappers[i]); [EOL]     } [EOL]     final Class<?>[] noPrimitives = new Class[] { String.class, ClassUtils.class, Void.TYPE }; [EOL]     assertNotSame("unmodified", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives)); [EOL] }
@Test [EOL] public void testPrimitivesToWrappers() { [EOL]     assertNull("null -> null", ClassUtils.primitivesToWrappers((Class<?>[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers())); [EOL]     final Class<?>[] castNull = ClassUtils.primitivesToWrappers((Class<?>) null); [EOL]     assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); [EOL]     assertArrayEquals("empty -> empty", ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     final Class<?>[] primitives = new Class[] { Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE, String.class, ClassUtils.class }; [EOL]     final Class<?>[] wrappers = ClassUtils.primitivesToWrappers(primitives); [EOL]     for (int i = 0; i < primitives.length; i++) { [EOL]         final Class<?> primitive = primitives[i]; [EOL]         final Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive); [EOL]         assertEquals(primitive + " -> " + expectedWrapper, expectedWrapper, wrappers[i]); [EOL]     } [EOL]     final Class<?>[] noPrimitives = new Class[] { String.class, ClassUtils.class, Void.TYPE }; [EOL]     assertNotSame("unmodified", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives)); [EOL] }
@Test [EOL] public void testPrimitivesToWrappers() { [EOL]     assertNull("null -> null", ClassUtils.primitivesToWrappers((Class<?>[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers())); [EOL]     final Class<?>[] castNull = ClassUtils.primitivesToWrappers((Class<?>) null); [EOL]     assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); [EOL]     assertArrayEquals("empty -> empty", ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     final Class<?>[] primitives = new Class[] { Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE, String.class, ClassUtils.class }; [EOL]     final Class<?>[] wrappers = ClassUtils.primitivesToWrappers(primitives); [EOL]     for (int i = 0; i < primitives.length; i++) { [EOL]         final Class<?> primitive = primitives[i]; [EOL]         final Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive); [EOL]         assertEquals(primitive + " -> " + expectedWrapper, expectedWrapper, wrappers[i]); [EOL]     } [EOL]     final Class<?>[] noPrimitives = new Class[] { String.class, ClassUtils.class, Void.TYPE }; [EOL]     assertNotSame("unmodified", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives)); [EOL] }
@Test [EOL] public void test_isInnerClass_Class() { [EOL]     assertTrue(ClassUtils.isInnerClass(Inner.class)); [EOL]     assertTrue(ClassUtils.isInnerClass(Map.Entry.class)); [EOL]     assertTrue(ClassUtils.isInnerClass(new Cloneable() { [EOL]     }.getClass())); [EOL]     assertFalse(ClassUtils.isInnerClass(this.getClass())); [EOL]     assertFalse(ClassUtils.isInnerClass(String.class)); [EOL]     assertFalse(ClassUtils.isInnerClass(null)); [EOL] }
@Test [EOL] public void test_isInnerClass_Class() { [EOL]     assertTrue(ClassUtils.isInnerClass(Inner.class)); [EOL]     assertTrue(ClassUtils.isInnerClass(Map.Entry.class)); [EOL]     assertTrue(ClassUtils.isInnerClass(new Cloneable() { [EOL]     }.getClass())); [EOL]     assertFalse(ClassUtils.isInnerClass(this.getClass())); [EOL]     assertFalse(ClassUtils.isInnerClass(String.class)); [EOL]     assertFalse(ClassUtils.isInnerClass(null)); [EOL] }
@Test [EOL] public void test_isInnerClass_Class() { [EOL]     assertTrue(ClassUtils.isInnerClass(Inner.class)); [EOL]     assertTrue(ClassUtils.isInnerClass(Map.Entry.class)); [EOL]     assertTrue(ClassUtils.isInnerClass(new Cloneable() { [EOL]     }.getClass())); [EOL]     assertFalse(ClassUtils.isInnerClass(this.getClass())); [EOL]     assertFalse(ClassUtils.isInnerClass(String.class)); [EOL]     assertFalse(ClassUtils.isInnerClass(null)); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testIsStartedAfterGet() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     checkInitialize(init); [EOL]     assertTrue("Not started", init.isStarted()); [EOL] }
@Test [EOL] public void testInitializeUncheckedEx() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception cause = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.initializeUnchecked(init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertSame("Wrong cause", cause, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testInitializeUncheckedEx() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception cause = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.initializeUnchecked(init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertSame("Wrong cause", cause, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testInitializeUncheckedEx() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception cause = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.initializeUnchecked(init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertSame("Wrong cause", cause, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testSystemProperiesLookup() { [EOL]     assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name")); [EOL]     assertEquals(null, StrLookup.systemPropertiesLookup().lookup("")); [EOL]     assertEquals(null, StrLookup.systemPropertiesLookup().lookup("other")); [EOL]     try { [EOL]         StrLookup.systemPropertiesLookup().lookup(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSystemProperiesLookup() { [EOL]     assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name")); [EOL]     assertEquals(null, StrLookup.systemPropertiesLookup().lookup("")); [EOL]     assertEquals(null, StrLookup.systemPropertiesLookup().lookup("other")); [EOL]     try { [EOL]         StrLookup.systemPropertiesLookup().lookup(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] }
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] }
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] }
@Test [EOL] public void testHandleCauseUncheckedNull() { [EOL]     ConcurrentUtils.handleCauseUnchecked(null); [EOL]     ConcurrentUtils.handleCauseUnchecked(new ExecutionException("Test", null)); [EOL] }
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] }
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] }
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] }
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] }
@Test [EOL] public void testInitializeUncheckedEx() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception cause = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.initializeUnchecked(init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertSame("Wrong cause", cause, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testInitializeUncheckedEx() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception cause = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.initializeUnchecked(init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertSame("Wrong cause", cause, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentKeyPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     EasyMock.replay(init); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     map.put(key, value); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentKeyPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     EasyMock.replay(init); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     map.put(key, value); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentKeyPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     EasyMock.replay(init); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     map.put(key, value); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentKeyPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     EasyMock.replay(init); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     map.put(key, value); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final DateParser parser1 = getInstance(YMD_SLASH); [EOL]     final DateParser parser2 = getInstance(YMD_SLASH); [EOL]     assertEquals(parser1, parser2); [EOL]     assertEquals(parser1.hashCode(), parser2.hashCode()); [EOL]     assertFalse(parser1.equals(new Object())); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testLocales_ShortNoEra_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT_NOERA, false); [EOL] }
@Test [EOL] public void testStaticReplaceSystemProperties() { [EOL]     final StrBuilder buf = new StrBuilder(); [EOL]     buf.append("Hi ").append(System.getProperty("user.name")); [EOL]     buf.append(", you are working with "); [EOL]     buf.append(System.getProperty("os.name")); [EOL]     buf.append(", your home directory is "); [EOL]     buf.append(System.getProperty("user.home")).append('.'); [EOL]     assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are " + "working with ${os.name}, your home " + "directory is ${user.home}.")); [EOL] }
@Test [EOL] public void testStaticReplaceSystemProperties() { [EOL]     final StrBuilder buf = new StrBuilder(); [EOL]     buf.append("Hi ").append(System.getProperty("user.name")); [EOL]     buf.append(", you are working with "); [EOL]     buf.append(System.getProperty("os.name")); [EOL]     buf.append(", your home directory is "); [EOL]     buf.append(System.getProperty("user.home")).append('.'); [EOL]     assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are " + "working with ${os.name}, your home " + "directory is ${user.home}.")); [EOL] }
@Test [EOL] public void testStaticReplaceSystemProperties() { [EOL]     final StrBuilder buf = new StrBuilder(); [EOL]     buf.append("Hi ").append(System.getProperty("user.name")); [EOL]     buf.append(", you are working with "); [EOL]     buf.append(System.getProperty("os.name")); [EOL]     buf.append(", your home directory is "); [EOL]     buf.append(System.getProperty("user.home")).append('.'); [EOL]     assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are " + "working with ${os.name}, your home " + "directory is ${user.home}.")); [EOL] }
@Test [EOL] public void testGetSetSuffix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariableSuffix('<'); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariableSuffix("<<"); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariableSuffix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariableSuffixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL]     try { [EOL]         sub.setVariableSuffixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL] }
@Test [EOL] public void testStaticReplaceSystemProperties() { [EOL]     final StrBuilder buf = new StrBuilder(); [EOL]     buf.append("Hi ").append(System.getProperty("user.name")); [EOL]     buf.append(", you are working with "); [EOL]     buf.append(System.getProperty("os.name")); [EOL]     buf.append(", your home directory is "); [EOL]     buf.append(System.getProperty("user.home")).append('.'); [EOL]     assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are " + "working with ${os.name}, your home " + "directory is ${user.home}.")); [EOL] }
@Test [EOL] public void testStaticReplaceSystemProperties() { [EOL]     final StrBuilder buf = new StrBuilder(); [EOL]     buf.append("Hi ").append(System.getProperty("user.name")); [EOL]     buf.append(", you are working with "); [EOL]     buf.append(System.getProperty("os.name")); [EOL]     buf.append(", your home directory is "); [EOL]     buf.append(System.getProperty("user.home")).append('.'); [EOL]     assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are " + "working with ${os.name}, your home " + "directory is ${user.home}.")); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] }
@Test [EOL] public void testGetSetSuffix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariableSuffix('<'); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariableSuffix("<<"); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariableSuffix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariableSuffixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL]     try { [EOL]         sub.setVariableSuffixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL] }
@Test [EOL] public void testGetSetSuffix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariableSuffix('<'); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariableSuffix("<<"); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariableSuffix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariableSuffixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL]     try { [EOL]         sub.setVariableSuffixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL] }
@Test [EOL] public void testGetSetSuffix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariableSuffix('<'); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariableSuffix("<<"); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariableSuffix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariableSuffixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL]     try { [EOL]         sub.setVariableSuffixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL] }
@Test [EOL] public void testGetSetSuffix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariableSuffix('<'); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariableSuffix("<<"); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariableSuffix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariableSuffixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL]     try { [EOL]         sub.setVariableSuffixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL] }
@Test [EOL] public void testGetSetSuffix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariableSuffix('<'); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariableSuffix("<<"); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariableSuffix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariableSuffixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL]     try { [EOL]         sub.setVariableSuffixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testFactory_double() { [EOL]     Fraction f = null; [EOL]     try { [EOL]         f = Fraction.getFraction(Double.NaN); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Double.POSITIVE_INFINITY); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Double.NEGATIVE_INFINITY); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction((double) Integer.MAX_VALUE + 1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(0.0d); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(1.0d); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(0.5d); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(-0.875d); [EOL]     assertEquals(-7, f.getNumerator()); [EOL]     assertEquals(8, f.getDenominator()); [EOL]     f = Fraction.getFraction(1.25d); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction(0.66666d); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(1.0d / 10001d); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     Fraction f2 = null; [EOL]     for (int i = 1; i <= 100; i++) { [EOL]         for (int j = 1; j <= i; j++) { [EOL]             try { [EOL]                 f = Fraction.getFraction((double) j / (double) i); [EOL]             } catch (final ArithmeticException ex) { [EOL]                 System.err.println(j + " " + i); [EOL]                 throw ex; [EOL]             } [EOL]             f2 = Fraction.getReducedFraction(j, i); [EOL]             assertEquals(f2.getNumerator(), f.getNumerator()); [EOL]             assertEquals(f2.getDenominator(), f.getDenominator()); [EOL]         } [EOL]     } [EOL]     for (int i = 1001; i <= 10000; i += SKIP) { [EOL]         for (int j = 1; j <= i; j++) { [EOL]             try { [EOL]                 f = Fraction.getFraction((double) j / (double) i); [EOL]             } catch (final ArithmeticException ex) { [EOL]                 System.err.println(j + " " + i); [EOL]                 throw ex; [EOL]             } [EOL]             f2 = Fraction.getReducedFraction(j, i); [EOL]             assertEquals(f2.getNumerator(), f.getNumerator()); [EOL]             assertEquals(f2.getDenominator(), f.getDenominator()); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testFactory_double() { [EOL]     Fraction f = null; [EOL]     try { [EOL]         f = Fraction.getFraction(Double.NaN); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Double.POSITIVE_INFINITY); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Double.NEGATIVE_INFINITY); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction((double) Integer.MAX_VALUE + 1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(0.0d); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(1.0d); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(0.5d); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(-0.875d); [EOL]     assertEquals(-7, f.getNumerator()); [EOL]     assertEquals(8, f.getDenominator()); [EOL]     f = Fraction.getFraction(1.25d); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction(0.66666d); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(1.0d / 10001d); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     Fraction f2 = null; [EOL]     for (int i = 1; i <= 100; i++) { [EOL]         for (int j = 1; j <= i; j++) { [EOL]             try { [EOL]                 f = Fraction.getFraction((double) j / (double) i); [EOL]             } catch (final ArithmeticException ex) { [EOL]                 System.err.println(j + " " + i); [EOL]                 throw ex; [EOL]             } [EOL]             f2 = Fraction.getReducedFraction(j, i); [EOL]             assertEquals(f2.getNumerator(), f.getNumerator()); [EOL]             assertEquals(f2.getDenominator(), f.getDenominator()); [EOL]         } [EOL]     } [EOL]     for (int i = 1001; i <= 10000; i += SKIP) { [EOL]         for (int j = 1; j <= i; j++) { [EOL]             try { [EOL]                 f = Fraction.getFraction((double) j / (double) i); [EOL]             } catch (final ArithmeticException ex) { [EOL]                 System.err.println(j + " " + i); [EOL]                 throw ex; [EOL]             } [EOL]             f2 = Fraction.getReducedFraction(j, i); [EOL]             assertEquals(f2.getNumerator(), f.getNumerator()); [EOL]             assertEquals(f2.getDenominator(), f.getDenominator()); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new CharSequenceUtils()); [EOL]     final Constructor<?>[] cons = CharSequenceUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(CharSequenceUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(CharSequenceUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(StringUtils.containsAny(null, (String) null)); [EOL]     assertFalse(StringUtils.containsAny(null, "")); [EOL]     assertFalse(StringUtils.containsAny(null, "ab")); [EOL]     assertFalse(StringUtils.containsAny("", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("", "")); [EOL]     assertFalse(StringUtils.containsAny("", "ab")); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", "")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); [EOL]     assertFalse(StringUtils.containsAny("ab", "z")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(StringUtils.containsAny(null, (String) null)); [EOL]     assertFalse(StringUtils.containsAny(null, "")); [EOL]     assertFalse(StringUtils.containsAny(null, "ab")); [EOL]     assertFalse(StringUtils.containsAny("", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("", "")); [EOL]     assertFalse(StringUtils.containsAny("", "ab")); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", "")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); [EOL]     assertFalse(StringUtils.containsAny("ab", "z")); [EOL] }
@Test [EOL] public void testIteration() { [EOL]     final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]     assertFalse(tkn.hasPrevious()); [EOL]     try { [EOL]         tkn.previous(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("a", tkn.next()); [EOL]     try { [EOL]         tkn.remove(); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.set("x"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.add("y"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("b", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("c", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL]     try { [EOL]         tkn.next(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL] }
@Test [EOL] public void testIteration() { [EOL]     final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]     assertFalse(tkn.hasPrevious()); [EOL]     try { [EOL]         tkn.previous(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("a", tkn.next()); [EOL]     try { [EOL]         tkn.remove(); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.set("x"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.add("y"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("b", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("c", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL]     try { [EOL]         tkn.next(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL] }
@Test [EOL] public void testIteration() { [EOL]     final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]     assertFalse(tkn.hasPrevious()); [EOL]     try { [EOL]         tkn.previous(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("a", tkn.next()); [EOL]     try { [EOL]         tkn.remove(); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.set("x"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.add("y"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("b", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("c", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL]     try { [EOL]         tkn.next(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL] }
@Test [EOL] public void testIteration() { [EOL]     final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]     assertFalse(tkn.hasPrevious()); [EOL]     try { [EOL]         tkn.previous(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("a", tkn.next()); [EOL]     try { [EOL]         tkn.remove(); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.set("x"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.add("y"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("b", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("c", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL]     try { [EOL]         tkn.next(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL] }
@Test [EOL] public void testIteration() { [EOL]     final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]     assertFalse(tkn.hasPrevious()); [EOL]     try { [EOL]         tkn.previous(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("a", tkn.next()); [EOL]     try { [EOL]         tkn.remove(); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.set("x"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         tkn.add("y"); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("b", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertTrue(tkn.hasNext()); [EOL]     assertEquals("c", tkn.next()); [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL]     try { [EOL]         tkn.next(); [EOL]         fail(); [EOL]     } catch (final NoSuchElementException ex) { [EOL]     } [EOL]     assertTrue(tkn.hasPrevious()); [EOL]     assertFalse(tkn.hasNext()); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairsLang858() throws Exception { [EOL]     assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD")); [EOL]     assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairsLang858() throws Exception { [EOL]     assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD")); [EOL]     assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final DatePrinter printer1 = getInstance(YYYY_MM_DD); [EOL]     final DatePrinter printer2 = getInstance(YYYY_MM_DD); [EOL]     assertEquals(printer1, printer2); [EOL]     assertEquals(printer1.hashCode(), printer2.hashCode()); [EOL]     assertFalse(printer1.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final DatePrinter printer1 = getInstance(YYYY_MM_DD); [EOL]     final DatePrinter printer2 = getInstance(YYYY_MM_DD); [EOL]     assertEquals(printer1, printer2); [EOL]     assertEquals(printer1.hashCode(), printer2.hashCode()); [EOL]     assertFalse(printer1.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final DatePrinter printer1 = getInstance(YYYY_MM_DD); [EOL]     final DatePrinter printer2 = getInstance(YYYY_MM_DD); [EOL]     assertEquals(printer1, printer2); [EOL]     assertEquals(printer1.hashCode(), printer2.hashCode()); [EOL]     assertFalse(printer1.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final DatePrinter printer1 = getInstance(YYYY_MM_DD); [EOL]     final DatePrinter printer2 = getInstance(YYYY_MM_DD); [EOL]     assertEquals(printer1, printer2); [EOL]     assertEquals(printer1.hashCode(), printer2.hashCode()); [EOL]     assertFalse(printer1.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final DatePrinter printer1 = getInstance(YYYY_MM_DD); [EOL]     final DatePrinter printer2 = getInstance(YYYY_MM_DD); [EOL]     assertEquals(printer1, printer2); [EOL]     assertEquals(printer1.hashCode(), printer2.hashCode()); [EOL]     assertFalse(printer1.equals(new Object())); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final DatePrinter printer1 = getInstance(YYYY_MM_DD); [EOL]     final DatePrinter printer2 = getInstance(YYYY_MM_DD); [EOL]     assertEquals(printer1, printer2); [EOL]     assertEquals(printer1.hashCode(), printer2.hashCode()); [EOL]     assertFalse(printer1.equals(new Object())); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testMultiLongArray() { [EOL]     final long[][] array1 = new long[2][2]; [EOL]     final long[][] array2 = new long[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiLongArray() { [EOL]     final long[][] array1 = new long[2][2]; [EOL]     final long[][] array2 = new long[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiLongArray() { [EOL]     final long[][] array1 = new long[2][2]; [EOL]     final long[][] array2 = new long[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiLongArray() { [EOL]     final long[][] array1 = new long[2][2]; [EOL]     final long[][] array2 = new long[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiLongArray() { [EOL]     final long[][] array1 = new long[2][2]; [EOL]     final long[][] array2 = new long[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiLongArray() { [EOL]     final long[][] array1 = new long[2][2]; [EOL]     final long[][] array2 = new long[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiLongArray() { [EOL]     final long[][] array1 = new long[2][2]; [EOL]     final long[][] array2 = new long[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     int[] obj1 = new int[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     int[] obj2 = new int[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] obj1 = new byte[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     byte[] obj2 = new byte[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] obj1 = new byte[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     byte[] obj2 = new byte[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] obj1 = new byte[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     byte[] obj2 = new byte[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] obj1 = new byte[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     byte[] obj2 = new byte[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] obj1 = new byte[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     byte[] obj2 = new byte[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] obj1 = new byte[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     byte[] obj2 = new byte[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] obj1 = new byte[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     byte[] obj2 = new byte[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testObjectBuild() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build()); [EOL]     o2.setA(4); [EOL]     assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build()); [EOL]     assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, (Object) null).build()); [EOL] }
@Test [EOL] public void testObjectBuild() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build()); [EOL]     o2.setA(4); [EOL]     assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build()); [EOL]     assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, (Object) null).build()); [EOL] }
@Test [EOL] public void testCommaMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     assertSame(matcher, StrMatcher.commaMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 0)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 1)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL] }
@Test [EOL] public void testSpaceMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.spaceMatcher(); [EOL]     assertSame(matcher, StrMatcher.spaceMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL] }
@Test [EOL] public void testStringMatcher_String() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher("")); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher((String) null)); [EOL] }
@Test [EOL] public void testCommaMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     assertSame(matcher, StrMatcher.commaMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 0)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 1)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL] }
@Test [EOL] public void testCommaMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     assertSame(matcher, StrMatcher.commaMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 0)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 1)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.add((byte) 1); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.add((byte) 1); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.add((byte) 1); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testEscapeEcmaScript() { [EOL]     assertEquals(null, StringEscapeUtils.escapeEcmaScript(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\"")); [EOL]     assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';", StringEscapeUtils.escapeEcmaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';")); [EOL] }
@Test [EOL] public void testEscapeEcmaScript() { [EOL]     assertEquals(null, StringEscapeUtils.escapeEcmaScript(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\"")); [EOL]     assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';", StringEscapeUtils.escapeEcmaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';")); [EOL] }
@Test [EOL] public void testEscapeEcmaScript() { [EOL]     assertEquals(null, StringEscapeUtils.escapeEcmaScript(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\"")); [EOL]     assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';", StringEscapeUtils.escapeEcmaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';")); [EOL] }
@Test [EOL] public void testEscapeEcmaScript() { [EOL]     assertEquals(null, StringEscapeUtils.escapeEcmaScript(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\"")); [EOL]     assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';", StringEscapeUtils.escapeEcmaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';")); [EOL] }
@Test [EOL] public void testEscapeEcmaScript() { [EOL]     assertEquals(null, StringEscapeUtils.escapeEcmaScript(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\"")); [EOL]     assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';", StringEscapeUtils.escapeEcmaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairsLang858() throws Exception { [EOL]     assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD")); [EOL]     assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] }
@Test [EOL] public void test_generateBitVectors() { [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L); [EOL] }
@Test [EOL] public void test_generateBitVectors() { [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L); [EOL] }
@Test [EOL] public void test_generateBitVectors() { [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L); [EOL] }
@Test [EOL] public void test_generateBitVectors() { [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L); [EOL] }
@Test [EOL] public void test_generateBitVectors() { [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] }
@Test [EOL] public void test_processBitVector() { [EOL]     assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); [EOL]     assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L)); [EOL] }
@Test [EOL] public void test_processBitVector() { [EOL]     assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); [EOL]     assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L)); [EOL] }
@Test [EOL] public void test_processBitVector() { [EOL]     assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); [EOL]     assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L)); [EOL] }
@Test [EOL] public void test_processBitVector() { [EOL]     assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); [EOL]     assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L)); [EOL] }
@Test [EOL] public void test_processBitVector() { [EOL]     assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); [EOL]     assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L)); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testBoolean() { [EOL]     assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString()); [EOL]     assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString()); [EOL]     assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString()); [EOL] }
@Test [EOL] public void testBoolean() { [EOL]     assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString()); [EOL]     assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString()); [EOL]     assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString()); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testDouble() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testDouble() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testDouble() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testDouble() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testInt() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (int) 3).append("b", (int) 4).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testInt() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (int) 3).append("b", (int) 4).toString()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     int[] array = new int[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     int[] array = new int[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testBoolean() { [EOL]     assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString()); [EOL]     assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString()); [EOL]     assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString()); [EOL] }
@Test [EOL] public void testBoolean() { [EOL]     assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString()); [EOL]     assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString()); [EOL]     assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString()); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testDouble() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testDouble() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testInt() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (int) 3).append("b", (int) 4).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testInt() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (int) 3).append("b", (int) 4).toString()); [EOL] }
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] }
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableObject<String> mutNum = new MutableObject<String>(); [EOL]     assertEquals(null, new MutableObject<Object>().getValue()); [EOL]     mutNum.setValue("HELLO"); [EOL]     assertSame("HELLO", mutNum.getValue()); [EOL]     mutNum.setValue(null); [EOL]     assertSame(null, mutNum.getValue()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumD.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == "ALPHA".hashCode()); [EOL]     assertEquals(0, mutNumD.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumD.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == "ALPHA".hashCode()); [EOL]     assertEquals(0, mutNumD.hashCode()); [EOL] }
@Test [EOL] public void testIsSameDay_Date() { [EOL]     Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]     Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]     assertTrue(DateUtils.isSameDay(date1, date2)); [EOL]     date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]     assertFalse(DateUtils.isSameDay(date1, date2)); [EOL]     date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]     assertTrue(DateUtils.isSameDay(date1, date2)); [EOL]     date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); [EOL]     assertFalse(DateUtils.isSameDay(date1, date2)); [EOL]     try { [EOL]         DateUtils.isSameDay((Date) null, (Date) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testIsSameDay_Cal() { [EOL]     final GregorianCalendar cal1 = new GregorianCalendar(2004, 6, 9, 13, 45); [EOL]     final GregorianCalendar cal2 = new GregorianCalendar(2004, 6, 9, 13, 45); [EOL]     assertTrue(DateUtils.isSameDay(cal1, cal2)); [EOL]     cal2.add(Calendar.DAY_OF_YEAR, 1); [EOL]     assertFalse(DateUtils.isSameDay(cal1, cal2)); [EOL]     cal1.add(Calendar.DAY_OF_YEAR, 1); [EOL]     assertTrue(DateUtils.isSameDay(cal1, cal2)); [EOL]     cal2.add(Calendar.YEAR, 1); [EOL]     assertFalse(DateUtils.isSameDay(cal1, cal2)); [EOL]     try { [EOL]         DateUtils.isSameDay((Calendar) null, (Calendar) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testIsSameInstant_Date() { [EOL]     Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]     Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]     assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]     date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]     assertFalse(DateUtils.isSameInstant(date1, date2)); [EOL]     date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]     assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]     date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); [EOL]     assertFalse(DateUtils.isSameInstant(date1, date2)); [EOL]     try { [EOL]         DateUtils.isSameInstant((Date) null, (Date) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testIsSameInstant_Cal() { [EOL]     final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); [EOL]     final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); [EOL]     cal1.set(2004, 6, 9, 13, 45, 0); [EOL]     cal1.set(Calendar.MILLISECOND, 0); [EOL]     cal2.set(2004, 6, 9, 13, 45, 0); [EOL]     cal2.set(Calendar.MILLISECOND, 0); [EOL]     assertFalse(DateUtils.isSameInstant(cal1, cal2)); [EOL]     cal2.set(2004, 6, 9, 11, 45, 0); [EOL]     assertTrue(DateUtils.isSameInstant(cal1, cal2)); [EOL]     try { [EOL]         DateUtils.isSameInstant((Calendar) null, (Calendar) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testLANG799_EN_WITH_DE_LOCALE() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL]     try { [EOL]         DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", Locale.GERMAN, "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] }
@Test [EOL] public void testLANG799_EN_WITH_DE_LOCALE() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL]     try { [EOL]         DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", Locale.GERMAN, "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] }
@Test [EOL] public void testSetMinutes() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setMinutes(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 0, 2, 1); [EOL]     result = DateUtils.setMinutes(base, 59); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 59, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setMinutes(base, 60); [EOL]         fail("DateUtils.setMinutes did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSetMinutes() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setMinutes(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 0, 2, 1); [EOL]     result = DateUtils.setMinutes(base, 59); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 59, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setMinutes(base, 60); [EOL]         fail("DateUtils.setMinutes did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSetMinutes() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setMinutes(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 0, 2, 1); [EOL]     result = DateUtils.setMinutes(base, 59); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 59, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setMinutes(base, 60); [EOL]         fail("DateUtils.setMinutes did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testTruncateAmPm() throws Exception { [EOL]     final int calendarField = Calendar.AM_PM; [EOL]     Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 11:59:59.999"); [EOL]     baseTruncateTest(targetAmDate, lastTruncateDate, calendarField); [EOL]     lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); [EOL]     baseTruncateTest(targetPmDate, lastTruncateDate, calendarField); [EOL] }
@Test [EOL] public void testNullCalendar() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testUncapitalize_String() { [EOL]     assertEquals(null, WordUtils.uncapitalize(null)); [EOL]     assertEquals("", WordUtils.uncapitalize("")); [EOL]     assertEquals("  ", WordUtils.uncapitalize("  ")); [EOL]     assertEquals("i", WordUtils.uncapitalize("I")); [EOL]     assertEquals("i", WordUtils.uncapitalize("i")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123")); [EOL]     assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123")); [EOL]     assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123")); [EOL] }
@Test [EOL] public void testUncapitalize_String() { [EOL]     assertEquals(null, WordUtils.uncapitalize(null)); [EOL]     assertEquals("", WordUtils.uncapitalize("")); [EOL]     assertEquals("  ", WordUtils.uncapitalize("  ")); [EOL]     assertEquals("i", WordUtils.uncapitalize("I")); [EOL]     assertEquals("i", WordUtils.uncapitalize("i")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123")); [EOL]     assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123")); [EOL]     assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123")); [EOL] }
@Test [EOL] public void testUncapitalize_String() { [EOL]     assertEquals(null, WordUtils.uncapitalize(null)); [EOL]     assertEquals("", WordUtils.uncapitalize("")); [EOL]     assertEquals("  ", WordUtils.uncapitalize("  ")); [EOL]     assertEquals("i", WordUtils.uncapitalize("I")); [EOL]     assertEquals("i", WordUtils.uncapitalize("i")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123")); [EOL]     assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123")); [EOL]     assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123")); [EOL] }
@Test [EOL] public void testUncapitalize_String() { [EOL]     assertEquals(null, WordUtils.uncapitalize(null)); [EOL]     assertEquals("", WordUtils.uncapitalize("")); [EOL]     assertEquals("  ", WordUtils.uncapitalize("  ")); [EOL]     assertEquals("i", WordUtils.uncapitalize("I")); [EOL]     assertEquals("i", WordUtils.uncapitalize("i")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123")); [EOL]     assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123")); [EOL]     assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123")); [EOL] }
@Test [EOL] public void testUncapitalizeWithDelimiters_String() { [EOL]     assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]     assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]     assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]     char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]     assertEquals("i", WordUtils.uncapitalize("I", chars)); [EOL]     assertEquals("i", WordUtils.uncapitalize("i", chars)); [EOL]     assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars)); [EOL]     assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars)); [EOL]     assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars)); [EOL]     assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars)); [EOL]     chars = new char[] { '.' }; [EOL]     assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars)); [EOL]     assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null)); [EOL] }
@Test [EOL] public void testUncapitalizeWithDelimiters_String() { [EOL]     assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]     assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]     assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]     char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]     assertEquals("i", WordUtils.uncapitalize("I", chars)); [EOL]     assertEquals("i", WordUtils.uncapitalize("i", chars)); [EOL]     assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars)); [EOL]     assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars)); [EOL]     assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars)); [EOL]     assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars)); [EOL]     chars = new char[] { '.' }; [EOL]     assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars)); [EOL]     assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null)); [EOL] }
@Test [EOL] public void testInitializeExternalExec() throws ConcurrentException { [EOL]     final ExecutorService exec = Executors.newCachedThreadPool(); [EOL]     try { [EOL]         initializer = new MultiBackgroundInitializer(exec); [EOL]         checkInitialize(); [EOL]         assertEquals("Wrong executor", exec, initializer.getActiveExecutor()); [EOL]         assertFalse("Executor was shutdown", exec.isShutdown()); [EOL]     } finally { [EOL]         exec.shutdown(); [EOL]     } [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAvailableLocale() { [EOL]     final Set<Locale> set = LocaleUtils.availableLocaleSet(); [EOL]     assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN)); [EOL]     assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US)); [EOL]     assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ)); [EOL]     assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR)); [EOL]     assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA)); [EOL]     assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ)); [EOL]     assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAvailableLocale() { [EOL]     final Set<Locale> set = LocaleUtils.availableLocaleSet(); [EOL]     assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN)); [EOL]     assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US)); [EOL]     assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ)); [EOL]     assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR)); [EOL]     assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA)); [EOL]     assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ)); [EOL]     assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ)); [EOL] }
@Test [EOL] public void testClone() { [EOL]     assertArrayEquals(null, ArrayUtils.clone((Object[]) null)); [EOL]     Object[] original1 = new Object[0]; [EOL]     Object[] cloned1 = ArrayUtils.clone(original1); [EOL]     assertTrue(Arrays.equals(original1, cloned1)); [EOL]     assertTrue(original1 != cloned1); [EOL]     final StringBuffer buf = new StringBuffer("pick"); [EOL]     original1 = new Object[] { buf, "a", new String[] { "stick" } }; [EOL]     cloned1 = ArrayUtils.clone(original1); [EOL]     assertTrue(Arrays.equals(original1, cloned1)); [EOL]     assertTrue(original1 != cloned1); [EOL]     assertSame(original1[0], cloned1[0]); [EOL]     assertSame(original1[1], cloned1[1]); [EOL]     assertSame(original1[2], cloned1[2]); [EOL] }
@Test [EOL] public void testClone() { [EOL]     assertArrayEquals(null, ArrayUtils.clone((Object[]) null)); [EOL]     Object[] original1 = new Object[0]; [EOL]     Object[] cloned1 = ArrayUtils.clone(original1); [EOL]     assertTrue(Arrays.equals(original1, cloned1)); [EOL]     assertTrue(original1 != cloned1); [EOL]     final StringBuffer buf = new StringBuffer("pick"); [EOL]     original1 = new Object[] { buf, "a", new String[] { "stick" } }; [EOL]     cloned1 = ArrayUtils.clone(original1); [EOL]     assertTrue(Arrays.equals(original1, cloned1)); [EOL]     assertTrue(original1 != cloned1); [EOL]     assertSame(original1[0], cloned1[0]); [EOL]     assertSame(original1[1], cloned1[1]); [EOL]     assertSame(original1[2], cloned1[2]); [EOL] }
@Test [EOL] public void testCloneBoolean() { [EOL]     assertEquals(null, ArrayUtils.clone((boolean[]) null)); [EOL]     final boolean[] original = new boolean[] { true, false }; [EOL]     final boolean[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneBoolean() { [EOL]     assertEquals(null, ArrayUtils.clone((boolean[]) null)); [EOL]     final boolean[] original = new boolean[] { true, false }; [EOL]     final boolean[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneBoolean() { [EOL]     assertEquals(null, ArrayUtils.clone((boolean[]) null)); [EOL]     final boolean[] original = new boolean[] { true, false }; [EOL]     final boolean[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testNullToEmptyString() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null)); [EOL]     final String[] original = new String[] { "abc", "def" }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final String[] empty = new String[] {}; [EOL]     final String[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyString() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null)); [EOL]     final String[] original = new String[] { "abc", "def" }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final String[] empty = new String[] {}; [EOL]     final String[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyString() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null)); [EOL]     final String[] original = new String[] { "abc", "def" }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final String[] empty = new String[] {}; [EOL]     final String[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyByte() { [EOL]     assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null)); [EOL]     final byte[] original = new byte[] { 0x0F, 0x0E }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final byte[] empty = new byte[] {}; [EOL]     final byte[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyByte() { [EOL]     assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null)); [EOL]     final byte[] original = new byte[] { 0x0F, 0x0E }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final byte[] empty = new byte[] {}; [EOL]     final byte[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyByte() { [EOL]     assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null)); [EOL]     final byte[] original = new byte[] { 0x0F, 0x0E }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final byte[] empty = new byte[] {}; [EOL]     final byte[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyIntObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null)); [EOL]     final Integer[] original = new Integer[] { 1, 2 }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Integer[] empty = new Integer[] {}; [EOL]     final Integer[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyIntObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null)); [EOL]     final Integer[] original = new Integer[] { 1, 2 }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Integer[] empty = new Integer[] {}; [EOL]     final Integer[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyIntObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null)); [EOL]     final Integer[] original = new Integer[] { 1, 2 }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Integer[] empty = new Integer[] {}; [EOL]     final Integer[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testSubarrayInt() { [EOL]     final int[] nullArray = null; [EOL]     final int[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final int[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final int[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final int[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("int type", int.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSubarrayInt() { [EOL]     final int[] nullArray = null; [EOL]     final int[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final int[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final int[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final int[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("int type", int.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSameLengthInt() { [EOL]     final int[] nullArray = null; [EOL]     final int[] emptyArray = new int[0]; [EOL]     final int[] oneArray = new int[] { 4 }; [EOL]     final int[] twoArray = new int[] { 5, 7 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthInt() { [EOL]     final int[] nullArray = null; [EOL]     final int[] emptyArray = new int[0]; [EOL]     final int[] oneArray = new int[] { 4 }; [EOL]     final int[] twoArray = new int[] { 5, 7 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthChar() { [EOL]     final char[] nullArray = null; [EOL]     final char[] emptyArray = new char[0]; [EOL]     final char[] oneArray = new char[] { 'f' }; [EOL]     final char[] twoArray = new char[] { 'd', 't' }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testIndexOfWithStartIndex() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0", 2)); [EOL]     assertEquals(5, ArrayUtils.indexOf(array, "0", 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "1", 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2", 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, null, 8)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "0", 8)); [EOL] }
@Test [EOL] public void testIndexOfWithStartIndex() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0", 2)); [EOL]     assertEquals(5, ArrayUtils.indexOf(array, "0", 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "1", 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2", 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, null, 8)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "0", 8)); [EOL] }
@Test [EOL] public void testIndexOfWithStartIndex() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0", 2)); [EOL]     assertEquals(5, ArrayUtils.indexOf(array, "0", 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "1", 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2", 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, null, 8)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "0", 8)); [EOL] }
@Test [EOL] public void testIndexOfWithStartIndex() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0", 2)); [EOL]     assertEquals(5, ArrayUtils.indexOf(array, "0", 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "1", 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2", 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, null, 8)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "0", 8)); [EOL] }
@Test [EOL] public void testIndexOfWithStartIndex() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0", 2)); [EOL]     assertEquals(5, ArrayUtils.indexOf(array, "0", 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "1", 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2", 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, null, 8)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "0", 8)); [EOL] }
@Test [EOL] public void testIndexOfWithStartIndex() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0", 2)); [EOL]     assertEquals(5, ArrayUtils.indexOf(array, "0", 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "1", 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2", 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, null, 8)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "0", 8)); [EOL] }
@Test [EOL] public void testLastIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testLastIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testLastIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testLastIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testLastIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testLastIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testLastIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testContains() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertFalse(ArrayUtils.contains(null, null)); [EOL]     assertFalse(ArrayUtils.contains(null, "1")); [EOL]     assertTrue(ArrayUtils.contains(array, "0")); [EOL]     assertTrue(ArrayUtils.contains(array, "1")); [EOL]     assertTrue(ArrayUtils.contains(array, "2")); [EOL]     assertTrue(ArrayUtils.contains(array, "3")); [EOL]     assertTrue(ArrayUtils.contains(array, null)); [EOL]     assertFalse(ArrayUtils.contains(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testLastIndexOfLong() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL] }
@Test [EOL] public void testLastIndexOfLong() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL] }
@Test [EOL] public void testLastIndexOfLong() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL] }
@Test [EOL] public void testLastIndexOfLong() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testContainsByte() { [EOL]     byte[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 1)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 99)); [EOL] }
@Test [EOL] public void testContainsByte() { [EOL]     byte[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 1)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 99)); [EOL] }
@Test [EOL] public void testContainsByte() { [EOL]     byte[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 1)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 99)); [EOL] }
@Test [EOL] public void testContainsByte() { [EOL]     byte[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 1)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsDouble() { [EOL]     double[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 1)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (double) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsDouble() { [EOL]     double[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 1)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (double) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsDouble() { [EOL]     double[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 1)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (double) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (double) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 4.0, (double) 0.33)); [EOL]     assertFalse(ArrayUtils.contains(array, (double) 2.5, (double) 0.49)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.50)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.51)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 4.0, (double) 0.33)); [EOL]     assertFalse(ArrayUtils.contains(array, (double) 2.5, (double) 0.49)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.50)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.51)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 4.0, (double) 0.33)); [EOL]     assertFalse(ArrayUtils.contains(array, (double) 2.5, (double) 0.49)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.50)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.51)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 4.0, (double) 0.33)); [EOL]     assertFalse(ArrayUtils.contains(array, (double) 2.5, (double) 0.49)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.50)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.51)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsFloat() { [EOL]     float[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (float) 1)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (float) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsFloat() { [EOL]     float[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (float) 1)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (float) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsFloat() { [EOL]     float[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (float) 1)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (float) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsFloat() { [EOL]     float[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (float) 1)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (float) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (float) 99)); [EOL] }
@Test [EOL] public void testIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL] }
@Test [EOL] public void testIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL] }
@Test [EOL] public void testIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL] }
@Test [EOL] public void testIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL] }
@Test [EOL] public void testIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL] }
@Test [EOL] public void testIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL] }
@Test [EOL] public void testLastIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL] }
@Test [EOL] public void testLastIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL] }
@Test [EOL] public void testLastIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL] }
@Test [EOL] public void testLastIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL] }
@Test [EOL] public void testLastIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL] }
@Test [EOL] public void testToPrimitive_char_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0], (char) 0)); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, Character.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null, new Character('0') }, Character.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_char_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0], (char) 0)); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, Character.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null, new Character('0') }, Character.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_char_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0], (char) 0)); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, Character.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null, new Character('0') }, Character.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_char_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0], (char) 0)); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, Character.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null, new Character('0') }, Character.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_char_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0], (char) 0)); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, Character.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null, new Character('0') }, Character.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_intNull() { [EOL]     final Integer[] iArray = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); [EOL] }
@Test [EOL] public void testToPrimitive_intNull() { [EOL]     final Integer[] iArray = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); [EOL] }
@Test [EOL] public void testToPrimitive_intNull() { [EOL]     final Integer[] iArray = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); [EOL] }
@Test [EOL] public void testToPrimitive_intNull() { [EOL]     final Integer[] iArray = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); [EOL] }
@Test [EOL] public void testToPrimitive_intNull() { [EOL]     final Integer[] iArray = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); [EOL] }
@Test [EOL] public void testToPrimitive_boolean() { [EOL]     final Boolean[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0])); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_boolean() { [EOL]     final Boolean[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0])); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_boolean() { [EOL]     final Boolean[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0])); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectArrayObject() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] newStringArray = ArrayUtils.add(null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newStringArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newStringArray)); [EOL]     assertEquals(String.class, newStringArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     Number[] numberArray1 = new Number[] { Integer.valueOf(1), Double.valueOf(2) }; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Number[] { Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Number.class, newArray.getClass().getComponentType()); [EOL]     numberArray1 = null; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Float[] { Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Float.class, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayObject() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] newStringArray = ArrayUtils.add(null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newStringArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newStringArray)); [EOL]     assertEquals(String.class, newStringArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     Number[] numberArray1 = new Number[] { Integer.valueOf(1), Double.valueOf(2) }; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Number[] { Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Number.class, newArray.getClass().getComponentType()); [EOL]     numberArray1 = null; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Float[] { Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Float.class, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayObject() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] newStringArray = ArrayUtils.add(null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newStringArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newStringArray)); [EOL]     assertEquals(String.class, newStringArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     Number[] numberArray1 = new Number[] { Integer.valueOf(1), Double.valueOf(2) }; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Number[] { Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Number.class, newArray.getClass().getComponentType()); [EOL]     numberArray1 = null; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Float[] { Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Float.class, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayObject() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] newStringArray = ArrayUtils.add(null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newStringArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newStringArray)); [EOL]     assertEquals(String.class, newStringArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     Number[] numberArray1 = new Number[] { Integer.valueOf(1), Double.valueOf(2) }; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Number[] { Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Number.class, newArray.getClass().getComponentType()); [EOL]     numberArray1 = null; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Float[] { Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Float.class, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayBoolean() { [EOL]     boolean[] newArray; [EOL]     newArray = ArrayUtils.add((boolean[]) null, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, newArray)); [EOL]     assertEquals(Boolean.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((boolean[]) null, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, newArray)); [EOL]     assertEquals(Boolean.TYPE, newArray.getClass().getComponentType()); [EOL]     final boolean[] array1 = new boolean[] { true, false, true }; [EOL]     newArray = ArrayUtils.add(array1, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true, false }, newArray)); [EOL]     assertEquals(Boolean.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayFloat() { [EOL]     float[] newArray; [EOL]     newArray = ArrayUtils.add((float[]) null, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 0 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((float[]) null, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     final float[] array1 = new float[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayLong() { [EOL]     long[] newArray; [EOL]     newArray = ArrayUtils.add((long[]) null, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 0 }, newArray)); [EOL]     assertEquals(Long.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((long[]) null, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, newArray)); [EOL]     assertEquals(Long.TYPE, newArray.getClass().getComponentType()); [EOL]     final long[] array1 = new long[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Long.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Long.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayShort() { [EOL]     short[] newArray; [EOL]     newArray = ArrayUtils.add((short[]) null, (short) 0); [EOL]     assertTrue(Arrays.equals(new short[] { 0 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((short[]) null, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 1 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     final short[] array1 = new short[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (short) 0); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (short) 4); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayShort() { [EOL]     short[] newArray; [EOL]     newArray = ArrayUtils.add((short[]) null, (short) 0); [EOL]     assertTrue(Arrays.equals(new short[] { 0 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((short[]) null, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 1 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     final short[] array1 = new short[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (short) 0); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (short) 4); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayFloat() { [EOL]     float[] newArray; [EOL]     newArray = ArrayUtils.add((float[]) null, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 0 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((float[]) null, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     final float[] array1 = new float[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElement((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElement((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElement((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElement((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.removeElement((boolean[]) null, true); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new boolean[] { true }, true); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new boolean[] { true, false }, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new boolean[] { true, false, true }, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, 2); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, 2); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, 2); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, 2); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, 2); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, 2); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, 2); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, 2); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((short[]) null, (short) 1, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeAll(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 3 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeAll(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 3 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeAll(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 3 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeAll(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 3 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeAll(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 3 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeAll(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 3 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeAll(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 3 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeAll(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 3 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((float[]) null, (float) 1, (float) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 2); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeAll(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 3 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeAll(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 3 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeAll(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 3 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeAll(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 3 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeAll(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 3 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeAll(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 3 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeAll(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 3 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testGetMatchingAccessibleMethod() throws Exception { [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(String.class), singletonArray(String.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Object.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Short.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Short.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Character.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Character.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Integer.class), singletonArray(Integer.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Integer.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Long.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Long.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Float.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Float.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Double.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", singletonArray(ParentObject.class), singletonArray(ParentObject.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", singletonArray(ChildObject.class), singletonArray(ParentObject.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", singletonArray(ParentObject.class), singletonArray(GrandParentObject.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", singletonArray(ChildObject.class), singletonArray(ChildInterface.class)); [EOL] }
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsInstance() throws SecurityException, NoSuchFieldException { [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     final StrBuilder sb0 = new StrBuilder(); [EOL]     assertEquals(32, sb0.capacity()); [EOL]     assertEquals(0, sb0.length()); [EOL]     assertEquals(0, sb0.size()); [EOL]     final StrBuilder sb1 = new StrBuilder(32); [EOL]     assertEquals(32, sb1.capacity()); [EOL]     assertEquals(0, sb1.length()); [EOL]     assertEquals(0, sb1.size()); [EOL]     final StrBuilder sb2 = new StrBuilder(0); [EOL]     assertEquals(32, sb2.capacity()); [EOL]     assertEquals(0, sb2.length()); [EOL]     assertEquals(0, sb2.size()); [EOL]     final StrBuilder sb3 = new StrBuilder(-1); [EOL]     assertEquals(32, sb3.capacity()); [EOL]     assertEquals(0, sb3.length()); [EOL]     assertEquals(0, sb3.size()); [EOL]     final StrBuilder sb4 = new StrBuilder(1); [EOL]     assertEquals(1, sb4.capacity()); [EOL]     assertEquals(0, sb4.length()); [EOL]     assertEquals(0, sb4.size()); [EOL]     final StrBuilder sb5 = new StrBuilder((String) null); [EOL]     assertEquals(32, sb5.capacity()); [EOL]     assertEquals(0, sb5.length()); [EOL]     assertEquals(0, sb5.size()); [EOL]     final StrBuilder sb6 = new StrBuilder(""); [EOL]     assertEquals(32, sb6.capacity()); [EOL]     assertEquals(0, sb6.length()); [EOL]     assertEquals(0, sb6.size()); [EOL]     final StrBuilder sb7 = new StrBuilder("foo"); [EOL]     assertEquals(35, sb7.capacity()); [EOL]     assertEquals(3, sb7.length()); [EOL]     assertEquals(3, sb7.size()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     final StrBuilder sb0 = new StrBuilder(); [EOL]     assertEquals(32, sb0.capacity()); [EOL]     assertEquals(0, sb0.length()); [EOL]     assertEquals(0, sb0.size()); [EOL]     final StrBuilder sb1 = new StrBuilder(32); [EOL]     assertEquals(32, sb1.capacity()); [EOL]     assertEquals(0, sb1.length()); [EOL]     assertEquals(0, sb1.size()); [EOL]     final StrBuilder sb2 = new StrBuilder(0); [EOL]     assertEquals(32, sb2.capacity()); [EOL]     assertEquals(0, sb2.length()); [EOL]     assertEquals(0, sb2.size()); [EOL]     final StrBuilder sb3 = new StrBuilder(-1); [EOL]     assertEquals(32, sb3.capacity()); [EOL]     assertEquals(0, sb3.length()); [EOL]     assertEquals(0, sb3.size()); [EOL]     final StrBuilder sb4 = new StrBuilder(1); [EOL]     assertEquals(1, sb4.capacity()); [EOL]     assertEquals(0, sb4.length()); [EOL]     assertEquals(0, sb4.size()); [EOL]     final StrBuilder sb5 = new StrBuilder((String) null); [EOL]     assertEquals(32, sb5.capacity()); [EOL]     assertEquals(0, sb5.length()); [EOL]     assertEquals(0, sb5.size()); [EOL]     final StrBuilder sb6 = new StrBuilder(""); [EOL]     assertEquals(32, sb6.capacity()); [EOL]     assertEquals(0, sb6.length()); [EOL]     assertEquals(0, sb6.size()); [EOL]     final StrBuilder sb7 = new StrBuilder("foo"); [EOL]     assertEquals(35, sb7.capacity()); [EOL]     assertEquals(3, sb7.length()); [EOL]     assertEquals(3, sb7.size()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     final StrBuilder sb0 = new StrBuilder(); [EOL]     assertEquals(32, sb0.capacity()); [EOL]     assertEquals(0, sb0.length()); [EOL]     assertEquals(0, sb0.size()); [EOL]     final StrBuilder sb1 = new StrBuilder(32); [EOL]     assertEquals(32, sb1.capacity()); [EOL]     assertEquals(0, sb1.length()); [EOL]     assertEquals(0, sb1.size()); [EOL]     final StrBuilder sb2 = new StrBuilder(0); [EOL]     assertEquals(32, sb2.capacity()); [EOL]     assertEquals(0, sb2.length()); [EOL]     assertEquals(0, sb2.size()); [EOL]     final StrBuilder sb3 = new StrBuilder(-1); [EOL]     assertEquals(32, sb3.capacity()); [EOL]     assertEquals(0, sb3.length()); [EOL]     assertEquals(0, sb3.size()); [EOL]     final StrBuilder sb4 = new StrBuilder(1); [EOL]     assertEquals(1, sb4.capacity()); [EOL]     assertEquals(0, sb4.length()); [EOL]     assertEquals(0, sb4.size()); [EOL]     final StrBuilder sb5 = new StrBuilder((String) null); [EOL]     assertEquals(32, sb5.capacity()); [EOL]     assertEquals(0, sb5.length()); [EOL]     assertEquals(0, sb5.size()); [EOL]     final StrBuilder sb6 = new StrBuilder(""); [EOL]     assertEquals(32, sb6.capacity()); [EOL]     assertEquals(0, sb6.length()); [EOL]     assertEquals(0, sb6.size()); [EOL]     final StrBuilder sb7 = new StrBuilder("foo"); [EOL]     assertEquals(35, sb7.capacity()); [EOL]     assertEquals(3, sb7.length()); [EOL]     assertEquals(3, sb7.size()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     final StrBuilder sb0 = new StrBuilder(); [EOL]     assertEquals(32, sb0.capacity()); [EOL]     assertEquals(0, sb0.length()); [EOL]     assertEquals(0, sb0.size()); [EOL]     final StrBuilder sb1 = new StrBuilder(32); [EOL]     assertEquals(32, sb1.capacity()); [EOL]     assertEquals(0, sb1.length()); [EOL]     assertEquals(0, sb1.size()); [EOL]     final StrBuilder sb2 = new StrBuilder(0); [EOL]     assertEquals(32, sb2.capacity()); [EOL]     assertEquals(0, sb2.length()); [EOL]     assertEquals(0, sb2.size()); [EOL]     final StrBuilder sb3 = new StrBuilder(-1); [EOL]     assertEquals(32, sb3.capacity()); [EOL]     assertEquals(0, sb3.length()); [EOL]     assertEquals(0, sb3.size()); [EOL]     final StrBuilder sb4 = new StrBuilder(1); [EOL]     assertEquals(1, sb4.capacity()); [EOL]     assertEquals(0, sb4.length()); [EOL]     assertEquals(0, sb4.size()); [EOL]     final StrBuilder sb5 = new StrBuilder((String) null); [EOL]     assertEquals(32, sb5.capacity()); [EOL]     assertEquals(0, sb5.length()); [EOL]     assertEquals(0, sb5.size()); [EOL]     final StrBuilder sb6 = new StrBuilder(""); [EOL]     assertEquals(32, sb6.capacity()); [EOL]     assertEquals(0, sb6.length()); [EOL]     assertEquals(0, sb6.size()); [EOL]     final StrBuilder sb7 = new StrBuilder("foo"); [EOL]     assertEquals(35, sb7.capacity()); [EOL]     assertEquals(3, sb7.length()); [EOL]     assertEquals(3, sb7.size()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     final StrBuilder sb0 = new StrBuilder(); [EOL]     assertEquals(32, sb0.capacity()); [EOL]     assertEquals(0, sb0.length()); [EOL]     assertEquals(0, sb0.size()); [EOL]     final StrBuilder sb1 = new StrBuilder(32); [EOL]     assertEquals(32, sb1.capacity()); [EOL]     assertEquals(0, sb1.length()); [EOL]     assertEquals(0, sb1.size()); [EOL]     final StrBuilder sb2 = new StrBuilder(0); [EOL]     assertEquals(32, sb2.capacity()); [EOL]     assertEquals(0, sb2.length()); [EOL]     assertEquals(0, sb2.size()); [EOL]     final StrBuilder sb3 = new StrBuilder(-1); [EOL]     assertEquals(32, sb3.capacity()); [EOL]     assertEquals(0, sb3.length()); [EOL]     assertEquals(0, sb3.size()); [EOL]     final StrBuilder sb4 = new StrBuilder(1); [EOL]     assertEquals(1, sb4.capacity()); [EOL]     assertEquals(0, sb4.length()); [EOL]     assertEquals(0, sb4.size()); [EOL]     final StrBuilder sb5 = new StrBuilder((String) null); [EOL]     assertEquals(32, sb5.capacity()); [EOL]     assertEquals(0, sb5.length()); [EOL]     assertEquals(0, sb5.size()); [EOL]     final StrBuilder sb6 = new StrBuilder(""); [EOL]     assertEquals(32, sb6.capacity()); [EOL]     assertEquals(0, sb6.length()); [EOL]     assertEquals(0, sb6.size()); [EOL]     final StrBuilder sb7 = new StrBuilder("foo"); [EOL]     assertEquals(35, sb7.capacity()); [EOL]     assertEquals(3, sb7.length()); [EOL]     assertEquals(3, sb7.size()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     final StrBuilder sb0 = new StrBuilder(); [EOL]     assertEquals(32, sb0.capacity()); [EOL]     assertEquals(0, sb0.length()); [EOL]     assertEquals(0, sb0.size()); [EOL]     final StrBuilder sb1 = new StrBuilder(32); [EOL]     assertEquals(32, sb1.capacity()); [EOL]     assertEquals(0, sb1.length()); [EOL]     assertEquals(0, sb1.size()); [EOL]     final StrBuilder sb2 = new StrBuilder(0); [EOL]     assertEquals(32, sb2.capacity()); [EOL]     assertEquals(0, sb2.length()); [EOL]     assertEquals(0, sb2.size()); [EOL]     final StrBuilder sb3 = new StrBuilder(-1); [EOL]     assertEquals(32, sb3.capacity()); [EOL]     assertEquals(0, sb3.length()); [EOL]     assertEquals(0, sb3.size()); [EOL]     final StrBuilder sb4 = new StrBuilder(1); [EOL]     assertEquals(1, sb4.capacity()); [EOL]     assertEquals(0, sb4.length()); [EOL]     assertEquals(0, sb4.size()); [EOL]     final StrBuilder sb5 = new StrBuilder((String) null); [EOL]     assertEquals(32, sb5.capacity()); [EOL]     assertEquals(0, sb5.length()); [EOL]     assertEquals(0, sb5.size()); [EOL]     final StrBuilder sb6 = new StrBuilder(""); [EOL]     assertEquals(32, sb6.capacity()); [EOL]     assertEquals(0, sb6.length()); [EOL]     assertEquals(0, sb6.size()); [EOL]     final StrBuilder sb7 = new StrBuilder("foo"); [EOL]     assertEquals(35, sb7.capacity()); [EOL]     assertEquals(3, sb7.length()); [EOL]     assertEquals(3, sb7.size()); [EOL] }
@Test [EOL] public void testGetSetNewLineText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL]     sb.setNewLineText("#"); [EOL]     assertEquals("#", sb.getNewLineText()); [EOL]     sb.setNewLineText(""); [EOL]     assertEquals("", sb.getNewLineText()); [EOL]     sb.setNewLineText((String) null); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL] }
@Test [EOL] public void testGetSetNewLineText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL]     sb.setNewLineText("#"); [EOL]     assertEquals("#", sb.getNewLineText()); [EOL]     sb.setNewLineText(""); [EOL]     assertEquals("", sb.getNewLineText()); [EOL]     sb.setNewLineText((String) null); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL] }
@Test [EOL] public void testGetSetNewLineText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL]     sb.setNewLineText("#"); [EOL]     assertEquals("#", sb.getNewLineText()); [EOL]     sb.setNewLineText(""); [EOL]     assertEquals("", sb.getNewLineText()); [EOL]     sb.setNewLineText((String) null); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL] }
@Test [EOL] public void testGetSetNewLineText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL]     sb.setNewLineText("#"); [EOL]     assertEquals("#", sb.getNewLineText()); [EOL]     sb.setNewLineText(""); [EOL]     assertEquals("", sb.getNewLineText()); [EOL]     sb.setNewLineText((String) null); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL] }
@Test [EOL] public void testGetSetNewLineText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL]     sb.setNewLineText("#"); [EOL]     assertEquals("#", sb.getNewLineText()); [EOL]     sb.setNewLineText(""); [EOL]     assertEquals("", sb.getNewLineText()); [EOL]     sb.setNewLineText((String) null); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL] }
@Test [EOL] public void testGetSetNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNullText()); [EOL]     sb.setNullText("null"); [EOL]     assertEquals("null", sb.getNullText()); [EOL]     sb.setNullText(""); [EOL]     assertEquals(null, sb.getNullText()); [EOL]     sb.setNullText("NULL"); [EOL]     assertEquals("NULL", sb.getNullText()); [EOL]     sb.setNullText((String) null); [EOL]     assertEquals(null, sb.getNullText()); [EOL] }
@Test [EOL] public void testGetSetNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNullText()); [EOL]     sb.setNullText("null"); [EOL]     assertEquals("null", sb.getNullText()); [EOL]     sb.setNullText(""); [EOL]     assertEquals(null, sb.getNullText()); [EOL]     sb.setNullText("NULL"); [EOL]     assertEquals("NULL", sb.getNullText()); [EOL]     sb.setNullText((String) null); [EOL]     assertEquals(null, sb.getNullText()); [EOL] }
@Test [EOL] public void testGetSetNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNullText()); [EOL]     sb.setNullText("null"); [EOL]     assertEquals("null", sb.getNullText()); [EOL]     sb.setNullText(""); [EOL]     assertEquals(null, sb.getNullText()); [EOL]     sb.setNullText("NULL"); [EOL]     assertEquals("NULL", sb.getNullText()); [EOL]     sb.setNullText((String) null); [EOL]     assertEquals(null, sb.getNullText()); [EOL] }
@Test [EOL] public void testCapacityAndLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(32, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.ensureCapacity(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("foo"); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(3, sb.length()); [EOL]     assertEquals(3, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.clear(); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("123456789012345678901234567890123"); [EOL]     assertTrue(sb.capacity() > 32); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.ensureCapacity(16); [EOL]     assertTrue(sb.capacity() > 16); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.setLength(33); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(16); [EOL]     assertTrue(sb.capacity() >= 16); [EOL]     assertEquals(16, sb.length()); [EOL]     assertEquals(16, sb.size()); [EOL]     assertEquals("1234567890123456", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(32, sb.length()); [EOL]     assertEquals(32, sb.size()); [EOL]     assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(0); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testCapacityAndLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(32, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.ensureCapacity(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("foo"); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(3, sb.length()); [EOL]     assertEquals(3, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.clear(); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("123456789012345678901234567890123"); [EOL]     assertTrue(sb.capacity() > 32); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.ensureCapacity(16); [EOL]     assertTrue(sb.capacity() > 16); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.setLength(33); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(16); [EOL]     assertTrue(sb.capacity() >= 16); [EOL]     assertEquals(16, sb.length()); [EOL]     assertEquals(16, sb.size()); [EOL]     assertEquals("1234567890123456", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(32, sb.length()); [EOL]     assertEquals(32, sb.size()); [EOL]     assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(0); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testCapacityAndLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(32, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.ensureCapacity(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("foo"); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(3, sb.length()); [EOL]     assertEquals(3, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.clear(); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("123456789012345678901234567890123"); [EOL]     assertTrue(sb.capacity() > 32); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.ensureCapacity(16); [EOL]     assertTrue(sb.capacity() > 16); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.setLength(33); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(16); [EOL]     assertTrue(sb.capacity() >= 16); [EOL]     assertEquals(16, sb.length()); [EOL]     assertEquals(16, sb.size()); [EOL]     assertEquals("1234567890123456", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(32, sb.length()); [EOL]     assertEquals(32, sb.size()); [EOL]     assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(0); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testCapacityAndLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(32, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.ensureCapacity(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("foo"); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(3, sb.length()); [EOL]     assertEquals(3, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.clear(); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("123456789012345678901234567890123"); [EOL]     assertTrue(sb.capacity() > 32); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.ensureCapacity(16); [EOL]     assertTrue(sb.capacity() > 16); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.setLength(33); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(16); [EOL]     assertTrue(sb.capacity() >= 16); [EOL]     assertEquals(16, sb.length()); [EOL]     assertEquals(16, sb.size()); [EOL]     assertEquals("1234567890123456", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(32, sb.length()); [EOL]     assertEquals(32, sb.size()); [EOL]     assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(0); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testCapacityAndLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(32, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.ensureCapacity(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("foo"); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(3, sb.length()); [EOL]     assertEquals(3, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.clear(); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("123456789012345678901234567890123"); [EOL]     assertTrue(sb.capacity() > 32); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.ensureCapacity(16); [EOL]     assertTrue(sb.capacity() > 16); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.setLength(33); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(16); [EOL]     assertTrue(sb.capacity() >= 16); [EOL]     assertEquals(16, sb.length()); [EOL]     assertEquals(16, sb.size()); [EOL]     assertEquals("1234567890123456", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(32, sb.length()); [EOL]     assertEquals(32, sb.size()); [EOL]     assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(0); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testCapacityAndLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(32, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.ensureCapacity(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("foo"); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(3, sb.length()); [EOL]     assertEquals(3, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.clear(); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("123456789012345678901234567890123"); [EOL]     assertTrue(sb.capacity() > 32); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.ensureCapacity(16); [EOL]     assertTrue(sb.capacity() > 16); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.setLength(33); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(16); [EOL]     assertTrue(sb.capacity() >= 16); [EOL]     assertEquals(16, sb.length()); [EOL]     assertEquals(16, sb.size()); [EOL]     assertEquals("1234567890123456", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(32, sb.length()); [EOL]     assertEquals(32, sb.size()); [EOL]     assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(0); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testCapacityAndLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(32, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.ensureCapacity(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("foo"); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(3, sb.length()); [EOL]     assertEquals(3, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.clear(); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("123456789012345678901234567890123"); [EOL]     assertTrue(sb.capacity() > 32); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.ensureCapacity(16); [EOL]     assertTrue(sb.capacity() > 16); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.setLength(33); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(16); [EOL]     assertTrue(sb.capacity() >= 16); [EOL]     assertEquals(16, sb.length()); [EOL]     assertEquals(16, sb.size()); [EOL]     assertEquals("1234567890123456", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(32, sb.length()); [EOL]     assertEquals(32, sb.size()); [EOL]     assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(0); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testCapacityAndLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(32, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.ensureCapacity(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("foo"); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(3, sb.length()); [EOL]     assertEquals(3, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.clear(); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("123456789012345678901234567890123"); [EOL]     assertTrue(sb.capacity() > 32); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.ensureCapacity(16); [EOL]     assertTrue(sb.capacity() > 16); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.setLength(33); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(16); [EOL]     assertTrue(sb.capacity() >= 16); [EOL]     assertEquals(16, sb.length()); [EOL]     assertEquals(16, sb.size()); [EOL]     assertEquals("1234567890123456", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(32, sb.length()); [EOL]     assertEquals(32, sb.size()); [EOL]     assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(0); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testGetCharsIntIntCharArrayInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("junit"); [EOL]     char[] a = new char[5]; [EOL]     sb.getChars(0, 5, a, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't' }, a)); [EOL]     a = new char[5]; [EOL]     sb.getChars(0, 2, a, 3); [EOL]     assertTrue(Arrays.equals(new char[] { 0, 0, 0, 'j', 'u' }, a)); [EOL]     try { [EOL]         sb.getChars(-1, 0, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, -1, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, 20, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(4, 2, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testGetCharsIntIntCharArrayInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("junit"); [EOL]     char[] a = new char[5]; [EOL]     sb.getChars(0, 5, a, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't' }, a)); [EOL]     a = new char[5]; [EOL]     sb.getChars(0, 2, a, 3); [EOL]     assertTrue(Arrays.equals(new char[] { 0, 0, 0, 'j', 'u' }, a)); [EOL]     try { [EOL]         sb.getChars(-1, 0, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, -1, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, 20, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(4, 2, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testGetCharsIntIntCharArrayInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("junit"); [EOL]     char[] a = new char[5]; [EOL]     sb.getChars(0, 5, a, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't' }, a)); [EOL]     a = new char[5]; [EOL]     sb.getChars(0, 2, a, 3); [EOL]     assertTrue(Arrays.equals(new char[] { 0, 0, 0, 'j', 'u' }, a)); [EOL]     try { [EOL]         sb.getChars(-1, 0, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, -1, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, 20, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(4, 2, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testGetCharsIntIntCharArrayInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("junit"); [EOL]     char[] a = new char[5]; [EOL]     sb.getChars(0, 5, a, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't' }, a)); [EOL]     a = new char[5]; [EOL]     sb.getChars(0, 2, a, 3); [EOL]     assertTrue(Arrays.equals(new char[] { 0, 0, 0, 'j', 'u' }, a)); [EOL]     try { [EOL]         sb.getChars(-1, 0, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, -1, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, 20, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(4, 2, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testGetCharsIntIntCharArrayInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("junit"); [EOL]     char[] a = new char[5]; [EOL]     sb.getChars(0, 5, a, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't' }, a)); [EOL]     a = new char[5]; [EOL]     sb.getChars(0, 2, a, 3); [EOL]     assertTrue(Arrays.equals(new char[] { 0, 0, 0, 'j', 'u' }, a)); [EOL]     try { [EOL]         sb.getChars(-1, 0, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, -1, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, 20, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(4, 2, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testAppendNewLine() { [EOL]     StrBuilder sb = new StrBuilder("---"); [EOL]     sb.appendNewLine().append("+++"); [EOL]     assertEquals("---" + SEP + "+++", sb.toString()); [EOL]     sb = new StrBuilder("---"); [EOL]     sb.setNewLineText("#").appendNewLine().setNewLineText(null).appendNewLine(); [EOL]     assertEquals("---#" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_CharArray() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final char[] str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo".toCharArray()); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_CharArray() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final char[] str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo".toCharArray()); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_CharArray() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final char[] str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo".toCharArray()); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_Boolean() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(true); [EOL]     assertEquals("true" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(false); [EOL]     assertEquals("false" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_Boolean() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(true); [EOL]     assertEquals("true" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(false); [EOL]     assertEquals("false" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendAll_Collection() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendAll((Collection<?>) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Collections.EMPTY_LIST); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Arrays.asList(new Object[] { "foo", "bar", "baz" })); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendAll_Collection() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendAll((Collection<?>) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Collections.EMPTY_LIST); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Arrays.asList(new Object[] { "foo", "bar", "baz" })); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendAll_Collection() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendAll((Collection<?>) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Collections.EMPTY_LIST); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Arrays.asList(new Object[] { "foo", "bar", "baz" })); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Array() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Object[]) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[0], ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[] { "foo", "bar", "baz" }, ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[] { "foo", "bar", "baz" }, null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[] { "foo", null, "baz" }, ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Array() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Object[]) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[0], ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[] { "foo", "bar", "baz" }, ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[] { "foo", "bar", "baz" }, null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[] { "foo", null, "baz" }, ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Collection() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Collection<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_char_char() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final char startSeparator = ':'; [EOL]     final char standardSeparator = ','; [EOL]     final String foo = "foo"; [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(String.valueOf(startSeparator), sb.toString()); [EOL]     sb.append(foo); [EOL]     assertEquals(String.valueOf(startSeparator) + foo, sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_char_char() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final char startSeparator = ':'; [EOL]     final char standardSeparator = ','; [EOL]     final String foo = "foo"; [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(String.valueOf(startSeparator), sb.toString()); [EOL]     sb.append(foo); [EOL]     assertEquals(String.valueOf(startSeparator) + foo, sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString()); [EOL] }
@Test [EOL] public void testLang412Left() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(null, 10, '*'); [EOL]     assertEquals("Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString()); [EOL] }
@Test [EOL] public void testLang412Left() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(null, 10, '*'); [EOL]     assertEquals("Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString()); [EOL] }
@Test [EOL] public void testLang412Left() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(null, 10, '*'); [EOL]     assertEquals("Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString()); [EOL] }
@Test [EOL] public void testLang412Left() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(null, 10, '*'); [EOL]     assertEquals("Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString()); [EOL] }
@Test [EOL] public void testLang412Left() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(null, 10, '*'); [EOL]     assertEquals("Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteIntInt() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.delete(0, 1); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.delete(1, 2); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.delete(0, 1); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.delete(0, 1000); [EOL]     assertEquals("", sb.toString()); [EOL]     try { [EOL]         sb.delete(1, 2); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.delete(-1, 1); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder("anything"); [EOL]     try { [EOL]         sb.delete(2, 1); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testDeleteIntInt() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.delete(0, 1); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.delete(1, 2); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.delete(0, 1); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.delete(0, 1000); [EOL]     assertEquals("", sb.toString()); [EOL]     try { [EOL]         sb.delete(1, 2); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.delete(-1, 1); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder("anything"); [EOL]     try { [EOL]         sb.delete(2, 1); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testDeleteAll_char() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll('X'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll('a'); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll('c'); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_char() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll('X'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll('a'); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll('c'); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_char() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll('X'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll('a'); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll('c'); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_char() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll('X'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll('a'); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll('c'); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_char() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll('X'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll('a'); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll('c'); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_char() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll('X'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll('a'); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll('c'); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_char() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll('X'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll('a'); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll('c'); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_char() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll('X'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll('a'); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll('c'); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testIndexOfLang294() { [EOL]     final StrBuilder sb = new StrBuilder("onetwothree"); [EOL]     sb.deleteFirst("three"); [EOL]     assertEquals(-1, sb.indexOf("three")); [EOL] }
@Test [EOL] public void testIndexOfLang294() { [EOL]     final StrBuilder sb = new StrBuilder("onetwothree"); [EOL]     sb.deleteFirst("three"); [EOL]     assertEquals(-1, sb.indexOf("three")); [EOL] }
@Test [EOL] public void testIndexOfLang294() { [EOL]     final StrBuilder sb = new StrBuilder("onetwothree"); [EOL]     sb.deleteFirst("three"); [EOL]     assertEquals(-1, sb.indexOf("three")); [EOL] }
@Test [EOL] public void testIndexOfLang294() { [EOL]     final StrBuilder sb = new StrBuilder("onetwothree"); [EOL]     sb.deleteFirst("three"); [EOL]     assertEquals(-1, sb.indexOf("three")); [EOL] }
@Test [EOL] public void testSubstringInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("goodbye", sb.substring(6)); [EOL]     assertEquals("hello goodbye".substring(6), sb.substring(6)); [EOL]     assertEquals("hello goodbye", sb.substring(0)); [EOL]     assertEquals("hello goodbye".substring(0), sb.substring(0)); [EOL]     try { [EOL]         sb.substring(-1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubstringInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("goodbye", sb.substring(6)); [EOL]     assertEquals("hello goodbye".substring(6), sb.substring(6)); [EOL]     assertEquals("hello goodbye", sb.substring(0)); [EOL]     assertEquals("hello goodbye".substring(0), sb.substring(0)); [EOL]     try { [EOL]         sb.substring(-1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubstringInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("goodbye", sb.substring(6)); [EOL]     assertEquals("hello goodbye".substring(6), sb.substring(6)); [EOL]     assertEquals("hello goodbye", sb.substring(0)); [EOL]     assertEquals("hello goodbye".substring(0), sb.substring(0)); [EOL]     try { [EOL]         sb.substring(-1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubstringInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("goodbye", sb.substring(6)); [EOL]     assertEquals("hello goodbye".substring(6), sb.substring(6)); [EOL]     assertEquals("hello goodbye", sb.substring(0)); [EOL]     assertEquals("hello goodbye".substring(0), sb.substring(0)); [EOL]     try { [EOL]         sb.substring(-1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubstringInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("goodbye", sb.substring(6)); [EOL]     assertEquals("hello goodbye".substring(6), sb.substring(6)); [EOL]     assertEquals("hello goodbye", sb.substring(0)); [EOL]     assertEquals("hello goodbye".substring(0), sb.substring(0)); [EOL]     try { [EOL]         sb.substring(-1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testLeftString() { [EOL]     final StrBuilder sb = new StrBuilder("left right"); [EOL]     assertEquals("left", sb.leftString(4)); [EOL]     assertEquals("", sb.leftString(0)); [EOL]     assertEquals("", sb.leftString(-5)); [EOL]     assertEquals("left right", sb.leftString(15)); [EOL] }
@Test [EOL] public void testLeftString() { [EOL]     final StrBuilder sb = new StrBuilder("left right"); [EOL]     assertEquals("left", sb.leftString(4)); [EOL]     assertEquals("", sb.leftString(0)); [EOL]     assertEquals("", sb.leftString(-5)); [EOL]     assertEquals("left right", sb.leftString(15)); [EOL] }
@Test [EOL] public void testLeftString() { [EOL]     final StrBuilder sb = new StrBuilder("left right"); [EOL]     assertEquals("left", sb.leftString(4)); [EOL]     assertEquals("", sb.leftString(0)); [EOL]     assertEquals("", sb.leftString(-5)); [EOL]     assertEquals("left right", sb.leftString(15)); [EOL] }
@Test [EOL] public void testContains_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]     assertTrue(sb.contains('a')); [EOL]     assertTrue(sb.contains('o')); [EOL]     assertTrue(sb.contains('z')); [EOL]     assertFalse(sb.contains('1')); [EOL] }
@Test [EOL] public void testContains_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]     assertTrue(sb.contains('a')); [EOL]     assertTrue(sb.contains('o')); [EOL]     assertTrue(sb.contains('z')); [EOL]     assertFalse(sb.contains('1')); [EOL] }
@Test [EOL] public void testIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a')); [EOL]     assertEquals("abab".indexOf('a'), sb.indexOf('a')); [EOL]     assertEquals(1, sb.indexOf('b')); [EOL]     assertEquals("abab".indexOf('b'), sb.indexOf('b')); [EOL]     assertEquals(-1, sb.indexOf('z')); [EOL] }
@Test [EOL] public void testIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a')); [EOL]     assertEquals("abab".indexOf('a'), sb.indexOf('a')); [EOL]     assertEquals(1, sb.indexOf('b')); [EOL]     assertEquals("abab".indexOf('b'), sb.indexOf('b')); [EOL]     assertEquals(-1, sb.indexOf('z')); [EOL] }
@Test [EOL] public void testIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a')); [EOL]     assertEquals("abab".indexOf('a'), sb.indexOf('a')); [EOL]     assertEquals(1, sb.indexOf('b')); [EOL]     assertEquals("abab".indexOf('b'), sb.indexOf('b')); [EOL]     assertEquals(-1, sb.indexOf('z')); [EOL] }
@Test [EOL] public void testIndexOf_char_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a', -1)); [EOL]     assertEquals(0, sb.indexOf('a', 0)); [EOL]     assertEquals(2, sb.indexOf('a', 1)); [EOL]     assertEquals(-1, sb.indexOf('a', 4)); [EOL]     assertEquals(-1, sb.indexOf('a', 5)); [EOL]     assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1)); [EOL]     assertEquals(3, sb.indexOf('b', 2)); [EOL]     assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2)); [EOL]     assertEquals(-1, sb.indexOf('z', 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.indexOf('z', 0)); [EOL]     assertEquals(-1, sb.indexOf('z', 3)); [EOL] }
@Test [EOL] public void testIndexOf_char_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a', -1)); [EOL]     assertEquals(0, sb.indexOf('a', 0)); [EOL]     assertEquals(2, sb.indexOf('a', 1)); [EOL]     assertEquals(-1, sb.indexOf('a', 4)); [EOL]     assertEquals(-1, sb.indexOf('a', 5)); [EOL]     assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1)); [EOL]     assertEquals(3, sb.indexOf('b', 2)); [EOL]     assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2)); [EOL]     assertEquals(-1, sb.indexOf('z', 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.indexOf('z', 0)); [EOL]     assertEquals(-1, sb.indexOf('z', 3)); [EOL] }
@Test [EOL] public void testIndexOf_char_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a', -1)); [EOL]     assertEquals(0, sb.indexOf('a', 0)); [EOL]     assertEquals(2, sb.indexOf('a', 1)); [EOL]     assertEquals(-1, sb.indexOf('a', 4)); [EOL]     assertEquals(-1, sb.indexOf('a', 5)); [EOL]     assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1)); [EOL]     assertEquals(3, sb.indexOf('b', 2)); [EOL]     assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2)); [EOL]     assertEquals(-1, sb.indexOf('z', 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.indexOf('z', 0)); [EOL]     assertEquals(-1, sb.indexOf('z', 3)); [EOL] }
@Test [EOL] public void testIndexOf_char_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a', -1)); [EOL]     assertEquals(0, sb.indexOf('a', 0)); [EOL]     assertEquals(2, sb.indexOf('a', 1)); [EOL]     assertEquals(-1, sb.indexOf('a', 4)); [EOL]     assertEquals(-1, sb.indexOf('a', 5)); [EOL]     assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1)); [EOL]     assertEquals(3, sb.indexOf('b', 2)); [EOL]     assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2)); [EOL]     assertEquals(-1, sb.indexOf('z', 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.indexOf('z', 0)); [EOL]     assertEquals(-1, sb.indexOf('z', 3)); [EOL] }
@Test [EOL] public void testIndexOf_char_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a', -1)); [EOL]     assertEquals(0, sb.indexOf('a', 0)); [EOL]     assertEquals(2, sb.indexOf('a', 1)); [EOL]     assertEquals(-1, sb.indexOf('a', 4)); [EOL]     assertEquals(-1, sb.indexOf('a', 5)); [EOL]     assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1)); [EOL]     assertEquals(3, sb.indexOf('b', 2)); [EOL]     assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2)); [EOL]     assertEquals(-1, sb.indexOf('z', 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.indexOf('z', 0)); [EOL]     assertEquals(-1, sb.indexOf('z', 3)); [EOL] }
@Test [EOL] public void testIndexOfLang294() { [EOL]     final StrBuilder sb = new StrBuilder("onetwothree"); [EOL]     sb.deleteFirst("three"); [EOL]     assertEquals(-1, sb.indexOf("three")); [EOL] }
@Test [EOL] public void testIndexOf_StrMatcher_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.indexOf((StrMatcher) null, 2)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0)); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2)); [EOL]     assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20)); [EOL]     assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1)); [EOL]     assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0)); [EOL]     assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1)); [EOL]     assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2)); [EOL]     assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6)); [EOL]     assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2)); [EOL]     assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0)); [EOL]     assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0)); [EOL]     assertEquals(-1, sb.indexOf((StrMatcher) null, 0)); [EOL]     sb.append(" A1 junction with A2"); [EOL]     assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5)); [EOL]     assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6)); [EOL]     assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7)); [EOL]     assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22)); [EOL]     assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23)); [EOL]     assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24)); [EOL] }
@Test [EOL] public void testLastIndexOf_StrMatcher() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'))); [EOL]     assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher())); [EOL]     assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d'))); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher())); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     sb.append(" A1 junction"); [EOL]     assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER)); [EOL] }
@Test [EOL] public void testLastIndexOf_StrMatcher() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'))); [EOL]     assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher())); [EOL]     assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d'))); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher())); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     sb.append(" A1 junction"); [EOL]     assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER)); [EOL] }
@Test [EOL] public void testLastIndexOf_StrMatcher() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'))); [EOL]     assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher())); [EOL]     assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d'))); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher())); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     sb.append(" A1 junction"); [EOL]     assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER)); [EOL] }
@Test [EOL] public void testLastIndexOf_StrMatcher() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'))); [EOL]     assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher())); [EOL]     assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d'))); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher())); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     sb.append(" A1 junction"); [EOL]     assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER)); [EOL] }
@Test [EOL] public void testLastIndexOf_StrMatcher() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'))); [EOL]     assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher())); [EOL]     assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d'))); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher())); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     sb.append(" A1 junction"); [EOL]     assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER)); [EOL] }
@Test [EOL] public void testToStringBuilder() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString()); [EOL]     sb.append("junit"); [EOL]     assertEquals(new StringBuilder("junit").toString(), sb.toStringBuilder().toString()); [EOL] }
@Test [EOL] public void testToStringBuilder() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString()); [EOL]     sb.append("junit"); [EOL]     assertEquals(new StringBuilder("junit").toString(), sb.toStringBuilder().toString()); [EOL] }
@Test [EOL] public void testDeleteIntInt() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.delete(0, 1); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.delete(1, 2); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.delete(0, 1); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.delete(0, 1000); [EOL]     assertEquals("", sb.toString()); [EOL]     try { [EOL]         sb.delete(1, 2); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.delete(-1, 1); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder("anything"); [EOL]     try { [EOL]         sb.delete(2, 1); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final DateParser parser1 = getInstance(YMD_SLASH); [EOL]     final DateParser parser2 = getInstance(YMD_SLASH); [EOL]     assertEquals(parser1, parser2); [EOL]     assertEquals(parser1.hashCode(), parser2.hashCode()); [EOL]     assertFalse(parser1.equals(new Object())); [EOL] }
@Test [EOL] public void testGetJavaIoTmpDir() { [EOL]     final File dir = SystemUtils.getJavaIoTmpDir(); [EOL]     Assert.assertNotNull(dir); [EOL]     Assert.assertTrue(dir.exists()); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new SystemUtils()); [EOL]     final Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(SystemUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(SystemUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadField() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadField() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadField() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadField() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testGetAllFieldsList() { [EOL]     assertEquals(0, FieldUtils.getAllFieldsList(Object.class).size()); [EOL]     final List<Field> fieldsNumber = asArrayList(Number.class.getDeclaredFields()); [EOL]     assertEquals(fieldsNumber, FieldUtils.getAllFieldsList(Number.class)); [EOL]     final List<Field> fieldsInteger = asArrayList(Integer.class.getDeclaredFields()); [EOL]     final List<Field> allFieldsInteger = new ArrayList<Field>(fieldsInteger); [EOL]     allFieldsInteger.addAll(fieldsNumber); [EOL]     assertEquals(allFieldsInteger, FieldUtils.getAllFieldsList(Integer.class)); [EOL]     assertEquals(5, FieldUtils.getAllFieldsList(PublicChild.class).size()); [EOL] }
@Test [EOL] public void testGetAllFieldsList() { [EOL]     assertEquals(0, FieldUtils.getAllFieldsList(Object.class).size()); [EOL]     final List<Field> fieldsNumber = asArrayList(Number.class.getDeclaredFields()); [EOL]     assertEquals(fieldsNumber, FieldUtils.getAllFieldsList(Number.class)); [EOL]     final List<Field> fieldsInteger = asArrayList(Integer.class.getDeclaredFields()); [EOL]     final List<Field> allFieldsInteger = new ArrayList<Field>(fieldsInteger); [EOL]     allFieldsInteger.addAll(fieldsNumber); [EOL]     assertEquals(allFieldsInteger, FieldUtils.getAllFieldsList(Integer.class)); [EOL]     assertEquals(5, FieldUtils.getAllFieldsList(PublicChild.class).size()); [EOL] }
@Test [EOL] public void testGetAllFieldsList() { [EOL]     assertEquals(0, FieldUtils.getAllFieldsList(Object.class).size()); [EOL]     final List<Field> fieldsNumber = asArrayList(Number.class.getDeclaredFields()); [EOL]     assertEquals(fieldsNumber, FieldUtils.getAllFieldsList(Number.class)); [EOL]     final List<Field> fieldsInteger = asArrayList(Integer.class.getDeclaredFields()); [EOL]     final List<Field> allFieldsInteger = new ArrayList<Field>(fieldsInteger); [EOL]     allFieldsInteger.addAll(fieldsNumber); [EOL]     assertEquals(allFieldsInteger, FieldUtils.getAllFieldsList(Integer.class)); [EOL]     assertEquals(5, FieldUtils.getAllFieldsList(PublicChild.class).size()); [EOL] }
@Test [EOL] public void testGetAllFieldsList() { [EOL]     assertEquals(0, FieldUtils.getAllFieldsList(Object.class).size()); [EOL]     final List<Field> fieldsNumber = asArrayList(Number.class.getDeclaredFields()); [EOL]     assertEquals(fieldsNumber, FieldUtils.getAllFieldsList(Number.class)); [EOL]     final List<Field> fieldsInteger = asArrayList(Integer.class.getDeclaredFields()); [EOL]     final List<Field> allFieldsInteger = new ArrayList<Field>(fieldsInteger); [EOL]     allFieldsInteger.addAll(fieldsNumber); [EOL]     assertEquals(allFieldsInteger, FieldUtils.getAllFieldsList(Integer.class)); [EOL]     assertEquals(5, FieldUtils.getAllFieldsList(PublicChild.class).size()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException1() throws Exception { [EOL]     FieldUtils.readStaticField(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException1() throws Exception { [EOL]     FieldUtils.readStaticField(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException1() throws Exception { [EOL]     FieldUtils.readStaticField(null); [EOL] }
@Test [EOL] public void testReadField() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadField() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadField() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] }
@Test [EOL] public void testSerialization() { [EOL]     CharSet set = CharSet.getInstance("a"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("be-f^a-z"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL] }
@Test [EOL] public void testSerialization() { [EOL]     CharSet set = CharSet.getInstance("a"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("be-f^a-z"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL] }
@Test [EOL] public void testSerialization() { [EOL]     CharSet set = CharSet.getInstance("a"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("be-f^a-z"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL] }
@Test [EOL] public void testSerialization() { [EOL]     CharSet set = CharSet.getInstance("a"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("be-f^a-z"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL] }
@Test [EOL] public void testCompatibilityBetweenPairs() throws Exception { [EOL]     final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); [EOL]     final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); [EOL]     assertEquals(pair, pair2); [EOL]     assertEquals(pair.hashCode(), pair2.hashCode()); [EOL]     final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); [EOL]     set.add(pair); [EOL]     assertTrue(set.contains(pair2)); [EOL]     pair2.setValue("bar"); [EOL]     assertFalse(pair.equals(pair2)); [EOL]     assertFalse(pair.hashCode() == pair2.hashCode()); [EOL] }
@Test [EOL] public void testCompatibilityBetweenPairs() throws Exception { [EOL]     final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); [EOL]     final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); [EOL]     assertEquals(pair, pair2); [EOL]     assertEquals(pair.hashCode(), pair2.hashCode()); [EOL]     final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); [EOL]     set.add(pair); [EOL]     assertTrue(set.contains(pair2)); [EOL]     pair2.setValue("bar"); [EOL]     assertFalse(pair.equals(pair2)); [EOL]     assertFalse(pair.hashCode() == pair2.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, "foo"); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origPair); [EOL]     final ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origPair, deserializedPair); [EOL]     assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL] }
@Test [EOL] public void testSupported() { [EOL]     assertTrue(CharEncoding.isSupported("UTF8")); [EOL]     assertTrue(CharEncoding.isSupported("UTF-8")); [EOL]     assertTrue(CharEncoding.isSupported("ASCII")); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testConstructorEx1() { [EOL]     new HashCodeBuilder(0, 0); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testConstructorEx1() { [EOL]     new HashCodeBuilder(0, 0); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testConstructorEx1() { [EOL]     new HashCodeBuilder(0, 0); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testConstructorEx1() { [EOL]     new HashCodeBuilder(0, 0); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testConstructorEx1() { [EOL]     new HashCodeBuilder(0, 0); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode()); [EOL]     final boolean[] obj = new boolean[2]; [EOL]     assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = true; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = false; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode()); [EOL]     final boolean[] obj = new boolean[2]; [EOL]     assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = true; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = false; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode()); [EOL]     final boolean[] obj = new boolean[2]; [EOL]     assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = true; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = false; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode()); [EOL]     final boolean[] obj = new boolean[2]; [EOL]     assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = true; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = false; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode()); [EOL]     final boolean[] obj = new boolean[2]; [EOL]     assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = true; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = false; [EOL]     assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode()); [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode()); [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode()); [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testFloat() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode()); [EOL]     final float f = 1234.89f; [EOL]     final int i = Float.floatToIntBits(f); [EOL]     assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testFloat() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode()); [EOL]     final float f = 1234.89f; [EOL]     final int i = Float.floatToIntBits(f); [EOL]     assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testFloat() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode()); [EOL]     final float f = 1234.89f; [EOL]     final int i = Float.floatToIntBits(f); [EOL]     assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testFloat() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode()); [EOL]     final float f = 1234.89f; [EOL]     final int i = Float.floatToIntBits(f); [EOL]     assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testFloat() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode()); [EOL]     final float f = 1234.89f; [EOL]     final int i = Float.floatToIntBits(f); [EOL]     assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testFloat() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode()); [EOL]     final float f = 1234.89f; [EOL]     final int i = Float.floatToIntBits(f); [EOL]     assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode()); [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode()); [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode()); [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testFloatArrayAsObject() { [EOL]     final float[] obj = new float[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4f; [EOL]     final int h1 = Float.floatToIntBits(5.4f); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3f; [EOL]     final int h2 = Float.floatToIntBits(6.3f); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testObjectBuild() { [EOL]     Object obj = null; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).build().intValue()); [EOL]     obj = new Object(); [EOL]     assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).build().intValue()); [EOL] }
@Test [EOL] public void testToHashCodeEqualsHashCode() { [EOL]     final HashCodeBuilder hcb = new HashCodeBuilder(17, 37).append(new Object()).append('a'); [EOL]     assertEquals("hashCode() is no longer returning the same value as toHashCode() - see LANG-520", hcb.toHashCode(), hcb.hashCode()); [EOL] }
@Test [EOL] public void testSerializeBytesUnserializable() throws Exception { [EOL]     try { [EOL]         iMap.put(new Object(), new Object()); [EOL]         SerializationUtils.serialize(iMap); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testSerializeBytesUnserializable() throws Exception { [EOL]     try { [EOL]         iMap.put(new Object(), new Object()); [EOL]         SerializationUtils.serialize(iMap); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testSerializeBytesUnserializable() throws Exception { [EOL]     try { [EOL]         iMap.put(new Object(), new Object()); [EOL]         SerializationUtils.serialize(iMap); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testSerializeBytesUnserializable() throws Exception { [EOL]     try { [EOL]         iMap.put(new Object(), new Object()); [EOL]         SerializationUtils.serialize(iMap); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testSerializeBytesUnserializable() throws Exception { [EOL]     try { [EOL]         iMap.put(new Object(), new Object()); [EOL]         SerializationUtils.serialize(iMap); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testDeserializeStreamBadStream() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0])); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testDeserializeBytesNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize((byte[]) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testPrimitiveTypeClassSerialization() { [EOL]     final Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class, boolean.class, char.class, void.class }; [EOL]     for (final Class<?> primitiveType : primitiveTypes) { [EOL]         final Class<?> clone = SerializationUtils.clone(primitiveType); [EOL]         assertEquals(primitiveType, clone); [EOL]     } [EOL] }
@Test [EOL] public void testToChar_Character_char() { [EOL]     assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X')); [EOL]     assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X')); [EOL]     assertEquals('X', CharUtils.toChar((Character) null, 'X')); [EOL] }
@Test [EOL] public void testToChar_Character_char() { [EOL]     assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X')); [EOL]     assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X')); [EOL]     assertEquals('X', CharUtils.toChar((Character) null, 'X')); [EOL] }
@Test [EOL] public void testToIntValue_Character() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'))); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'))); [EOL]     try { [EOL]         CharUtils.toIntValue(null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         CharUtils.toIntValue(CHARACTER_A); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToIntValue_Character() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'))); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'))); [EOL]     try { [EOL]         CharUtils.toIntValue(null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         CharUtils.toIntValue(CHARACTER_A); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToIntValue_Character() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'))); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'))); [EOL]     try { [EOL]         CharUtils.toIntValue(null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         CharUtils.toIntValue(CHARACTER_A); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToUnicodeEscaped_Character() { [EOL]     assertEquals(null, CharUtils.unicodeEscaped(null)); [EOL]     assertEquals("\\u0041", CharUtils.unicodeEscaped(CHARACTER_A)); [EOL] }
@Test [EOL] public void testToUnicodeEscaped_Character() { [EOL]     assertEquals(null, CharUtils.unicodeEscaped(null)); [EOL]     assertEquals("\\u0041", CharUtils.unicodeEscaped(CHARACTER_A)); [EOL] }
@Test [EOL] public void testToUnicodeEscaped_Character() { [EOL]     assertEquals(null, CharUtils.unicodeEscaped(null)); [EOL]     assertEquals("\\u0041", CharUtils.unicodeEscaped(CHARACTER_A)); [EOL] }
@Test [EOL] public void testGetMinimum() { [EOL]     assertEquals(10, (int) intRange.getMinimum()); [EOL]     assertEquals(10L, (long) longRange.getMinimum()); [EOL]     assertEquals(10f, floatRange.getMinimum(), 0.00001f); [EOL]     assertEquals(10d, doubleRange.getMinimum(), 0.00001d); [EOL] }
@Test [EOL] public void testIsAfterRange() { [EOL]     assertFalse(intRange.isAfterRange(null)); [EOL]     assertTrue(intRange.isAfterRange(Range.between(5, 9))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(5, 10))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(5, 20))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(5, 25))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(15, 25))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(21, 25))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(10, 20))); [EOL] }
@Test [EOL] public void testEqualsObject() { [EOL]     assertEquals(byteRange, byteRange); [EOL]     assertEquals(byteRange, byteRange2); [EOL]     assertEquals(byteRange2, byteRange2); [EOL]     assertTrue(byteRange.equals(byteRange)); [EOL]     assertTrue(byteRange2.equals(byteRange2)); [EOL]     assertTrue(byteRange3.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(null)); [EOL]     assertFalse(byteRange2.equals("Ni!")); [EOL] }
@Test [EOL] public void testEqualsObject() { [EOL]     assertEquals(byteRange, byteRange); [EOL]     assertEquals(byteRange, byteRange2); [EOL]     assertEquals(byteRange2, byteRange2); [EOL]     assertTrue(byteRange.equals(byteRange)); [EOL]     assertTrue(byteRange2.equals(byteRange2)); [EOL]     assertTrue(byteRange3.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(null)); [EOL]     assertFalse(byteRange2.equals("Ni!")); [EOL] }
@Test [EOL] public void testEqualsObject() { [EOL]     assertEquals(byteRange, byteRange); [EOL]     assertEquals(byteRange, byteRange2); [EOL]     assertEquals(byteRange2, byteRange2); [EOL]     assertTrue(byteRange.equals(byteRange)); [EOL]     assertTrue(byteRange2.equals(byteRange2)); [EOL]     assertTrue(byteRange3.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(null)); [EOL]     assertFalse(byteRange2.equals("Ni!")); [EOL] }
@Test [EOL] public void testEqualsObject() { [EOL]     assertEquals(byteRange, byteRange); [EOL]     assertEquals(byteRange, byteRange2); [EOL]     assertEquals(byteRange2, byteRange2); [EOL]     assertTrue(byteRange.equals(byteRange)); [EOL]     assertTrue(byteRange2.equals(byteRange2)); [EOL]     assertTrue(byteRange3.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(null)); [EOL]     assertFalse(byteRange2.equals("Ni!")); [EOL] }
@Test [EOL] public void testEqualsObject() { [EOL]     assertEquals(byteRange, byteRange); [EOL]     assertEquals(byteRange, byteRange2); [EOL]     assertEquals(byteRange2, byteRange2); [EOL]     assertTrue(byteRange.equals(byteRange)); [EOL]     assertTrue(byteRange2.equals(byteRange2)); [EOL]     assertTrue(byteRange3.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(null)); [EOL]     assertFalse(byteRange2.equals("Ni!")); [EOL] }
@Test [EOL] public void testEqualsObject() { [EOL]     assertEquals(byteRange, byteRange); [EOL]     assertEquals(byteRange, byteRange2); [EOL]     assertEquals(byteRange2, byteRange2); [EOL]     assertTrue(byteRange.equals(byteRange)); [EOL]     assertTrue(byteRange2.equals(byteRange2)); [EOL]     assertTrue(byteRange3.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(null)); [EOL]     assertFalse(byteRange2.equals("Ni!")); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.subtract(1); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.subtract(1); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.subtract(1); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableLong mutNumA = new MutableLong(0); [EOL]     final MutableLong mutNumB = new MutableLong(0); [EOL]     final MutableLong mutNumC = new MutableLong(1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Long.valueOf(0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableLong mutNumA = new MutableLong(0); [EOL]     final MutableLong mutNumB = new MutableLong(0); [EOL]     final MutableLong mutNumC = new MutableLong(1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Long.valueOf(0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableLong mutNumA = new MutableLong(0); [EOL]     final MutableLong mutNumB = new MutableLong(0); [EOL]     final MutableLong mutNumC = new MutableLong(1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Long.valueOf(0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableLong mutNumA = new MutableLong(0); [EOL]     final MutableLong mutNumB = new MutableLong(0); [EOL]     final MutableLong mutNumC = new MutableLong(1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Long.valueOf(0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, mutNum.compareTo(new MutableLong(0))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableLong(-1))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableLong(1))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, mutNum.compareTo(new MutableLong(0))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableLong(-1))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableLong(1))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, mutNum.compareTo(new MutableLong(0))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableLong(-1))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableLong(1))); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1)); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.add(Integer.valueOf(1)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.add(Integer.valueOf(1)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.add(Integer.valueOf(1)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testToInteger() { [EOL]     assertEquals(Integer.valueOf(0), new MutableInt(0).toInteger()); [EOL]     assertEquals(Integer.valueOf(123), new MutableInt(123).toInteger()); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1)); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     mutNum.compareTo(null); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null)); [EOL]     assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null)); [EOL]     assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null)); [EOL]     assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null)); [EOL]     assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null)); [EOL]     assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null)); [EOL]     assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO)); [EOL] }
@Test [EOL] public void testIdentityToStringStringBuilder() { [EOL]     assertEquals(null, ObjectUtils.identityToString(null)); [EOL]     assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), ObjectUtils.identityToString(FOO)); [EOL]     final Integer i = Integer.valueOf(90); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     assertEquals(expected, ObjectUtils.identityToString(i)); [EOL]     final StringBuilder builder = new StringBuilder(); [EOL]     ObjectUtils.identityToString(builder, i); [EOL]     assertEquals(expected, builder.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StringBuilder) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StringBuilder(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] }
@Test [EOL] public void testIdentityToStringStringBuilder() { [EOL]     assertEquals(null, ObjectUtils.identityToString(null)); [EOL]     assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), ObjectUtils.identityToString(FOO)); [EOL]     final Integer i = Integer.valueOf(90); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     assertEquals(expected, ObjectUtils.identityToString(i)); [EOL]     final StringBuilder builder = new StringBuilder(); [EOL]     ObjectUtils.identityToString(builder, i); [EOL]     assertEquals(expected, builder.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StringBuilder) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StringBuilder(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] }
@Test [EOL] public void testIdentityToStringStringBuilder() { [EOL]     assertEquals(null, ObjectUtils.identityToString(null)); [EOL]     assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), ObjectUtils.identityToString(FOO)); [EOL]     final Integer i = Integer.valueOf(90); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     assertEquals(expected, ObjectUtils.identityToString(i)); [EOL]     final StringBuilder builder = new StringBuilder(); [EOL]     ObjectUtils.identityToString(builder, i); [EOL]     assertEquals(expected, builder.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StringBuilder) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StringBuilder(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] }
@Test [EOL] public void testMax() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.max((String) null)); [EOL]     assertNull(ObjectUtils.max(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1)); [EOL]     assertNull(ObjectUtils.max((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMax() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.max((String) null)); [EOL]     assertNull(ObjectUtils.max(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1)); [EOL]     assertNull(ObjectUtils.max((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMax() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.max((String) null)); [EOL]     assertNull(ObjectUtils.max(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1)); [EOL]     assertNull(ObjectUtils.max((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMax() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.max((String) null)); [EOL]     assertNull(ObjectUtils.max(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1)); [EOL]     assertNull(ObjectUtils.max((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMax() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.max((String) null)); [EOL]     assertNull(ObjectUtils.max(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1)); [EOL]     assertNull(ObjectUtils.max((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMax() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.max((String) null)); [EOL]     assertNull(ObjectUtils.max(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1)); [EOL]     assertNull(ObjectUtils.max((String) null, (String) null)); [EOL] }
@Test [EOL] public void testIsTrue4() { [EOL]     Validate.isTrue(true, "MSG", 7); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG", 7); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsTrue4() { [EOL]     Validate.isTrue(true, "MSG", 7); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG", 7); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotBlankNullStringShouldThrow() { [EOL]     final String string = null; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotBlankNullStringShouldThrow() { [EOL]     final String string = null; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotBlankNullStringShouldThrow() { [EOL]     final String string = null; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testInclusiveBetween_withMessage() { [EOL]     Validate.inclusiveBetween("a", "c", "b", "Error"); [EOL]     Validate.inclusiveBetween(0, 2, 1, "Error"); [EOL]     Validate.inclusiveBetween(0, 2, 2, "Error"); [EOL]     try { [EOL]         Validate.inclusiveBetween(0, 5, 6, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testInclusiveBetween_withMessage() { [EOL]     Validate.inclusiveBetween("a", "c", "b", "Error"); [EOL]     Validate.inclusiveBetween(0, 2, 1, "Error"); [EOL]     Validate.inclusiveBetween(0, 2, 2, "Error"); [EOL]     try { [EOL]         Validate.inclusiveBetween(0, 5, 6, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testExclusiveBetween_withMessage() { [EOL]     Validate.exclusiveBetween("a", "c", "b", "Error"); [EOL]     Validate.exclusiveBetween(0, 2, 1, "Error"); [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 6, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 5, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testExclusiveBetween_withMessage() { [EOL]     Validate.exclusiveBetween("a", "c", "b", "Error"); [EOL]     Validate.exclusiveBetween(0, 2, 1, "Error"); [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 6, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 5, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testExclusiveBetween_withMessage() { [EOL]     Validate.exclusiveBetween("a", "c", "b", "Error"); [EOL]     Validate.exclusiveBetween(0, 2, 1, "Error"); [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 6, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 5, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testExclusiveBetween_withMessage() { [EOL]     Validate.exclusiveBetween("a", "c", "b", "Error"); [EOL]     Validate.exclusiveBetween(0, 2, 1, "Error"); [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 6, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 5, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testExclusiveBetween_withMessage() { [EOL]     Validate.exclusiveBetween("a", "c", "b", "Error"); [EOL]     Validate.exclusiveBetween(0, 2, 1, "Error"); [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 6, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 5, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString()); [EOL]     assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString()); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new DurationFormatUtils()); [EOL]     final Constructor<?>[] cons = DurationFormatUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(DurationFormatUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(DurationFormatUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testContainsAny_StringStringarray() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String[]) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, new String[0])); [EOL]     assertFalse(CharSetUtils.containsAny(null, new String[] { null })); [EOL]     assertFalse(CharSetUtils.containsAny(null, new String[] { "a-e" })); [EOL]     assertFalse(CharSetUtils.containsAny("", (String[]) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", new String[0])); [EOL]     assertFalse(CharSetUtils.containsAny("", new String[] { null })); [EOL]     assertFalse(CharSetUtils.containsAny("", new String[] { "a-e" })); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String[]) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", new String[0])); [EOL]     assertFalse(CharSetUtils.containsAny("hello", new String[] { null })); [EOL]     assertTrue(CharSetUtils.containsAny("hello", new String[] { "a-e" })); [EOL]     assertTrue(CharSetUtils.containsAny("hello", new String[] { "el" })); [EOL]     assertFalse(CharSetUtils.containsAny("hello", new String[] { "x" })); [EOL]     assertTrue(CharSetUtils.containsAny("hello", new String[] { "e-i" })); [EOL]     assertTrue(CharSetUtils.containsAny("hello", new String[] { "a-z" })); [EOL]     assertFalse(CharSetUtils.containsAny("hello", new String[] { "" })); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_ThrowableArray() { [EOL]     assertSame(null, ExceptionUtils.getCause(null, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(null, new String[0])); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[] { null })); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { null })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getTargetException" })); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_ThrowableArray() { [EOL]     assertSame(null, ExceptionUtils.getCause(null, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(null, new String[0])); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[] { null })); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { null })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getTargetException" })); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_ThrowableArray() { [EOL]     assertSame(null, ExceptionUtils.getCause(null, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(null, new String[0])); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[] { null })); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { null })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getTargetException" })); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_ThrowableArray() { [EOL]     assertSame(null, ExceptionUtils.getCause(null, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(null, new String[0])); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[] { null })); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { null })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getTargetException" })); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_ThrowableArray() { [EOL]     assertSame(null, ExceptionUtils.getCause(null, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(null, new String[0])); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[] { null })); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { null })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getTargetException" })); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_ThrowableArray() { [EOL]     assertSame(null, ExceptionUtils.getCause(null, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(null, new String[0])); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[] { null })); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { null })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getTargetException" })); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIncrement() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testIncrement() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract(Short.valueOf((short) 1)); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0))); [EOL]     assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1))); [EOL]     assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1))); [EOL]     try { [EOL]         mutNum.compareTo(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0))); [EOL]     assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1))); [EOL]     assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1))); [EOL]     try { [EOL]         mutNum.compareTo(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0))); [EOL]     assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1))); [EOL]     assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1))); [EOL]     try { [EOL]         mutNum.compareTo(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testReflectionHierarchyCompare() { [EOL]     testReflectionHierarchyCompare(false, null); [EOL] }
@Test [EOL] public void testReflectionHierarchyCompare() { [EOL]     testReflectionHierarchyCompare(false, null); [EOL] }
@Test [EOL] public void testReflectionHierarchyCompare() { [EOL]     testReflectionHierarchyCompare(false, null); [EOL] }
@Test [EOL] public void testReflectionHierarchyCompare() { [EOL]     testReflectionHierarchyCompare(false, null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testReflectionCompareEx1() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     CompareToBuilder.reflectionCompare(o1, null); [EOL] }
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final TestObject[] array3 = new TestObject[3]; [EOL]     array3[0] = new TestObject(4); [EOL]     array3[1] = new TestObject(5); [EOL]     array3[2] = new TestObject(6); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final TestObject[] array3 = new TestObject[3]; [EOL]     array3[0] = new TestObject(4); [EOL]     array3[1] = new TestObject(5); [EOL]     array3[2] = new TestObject(6); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final TestObject[] array3 = new TestObject[3]; [EOL]     array3[0] = new TestObject(4); [EOL]     array3[1] = new TestObject(5); [EOL]     array3[2] = new TestObject(6); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final TestObject[] array3 = new TestObject[3]; [EOL]     array3[0] = new TestObject(4); [EOL]     array3[1] = new TestObject(5); [EOL]     array3[2] = new TestObject(6); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final TestObject[] array3 = new TestObject[3]; [EOL]     array3[0] = new TestObject(4); [EOL]     array3[1] = new TestObject(5); [EOL]     array3[2] = new TestObject(6); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final TestObject[] array3 = new TestObject[3]; [EOL]     array3[0] = new TestObject(4); [EOL]     array3[1] = new TestObject(5); [EOL]     array3[2] = new TestObject(6); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final TestObject[] array3 = new TestObject[3]; [EOL]     array3[0] = new TestObject(4); [EOL]     array3[1] = new TestObject(5); [EOL]     array3[2] = new TestObject(6); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final TestObject[] array3 = new TestObject[3]; [EOL]     array3[0] = new TestObject(4); [EOL]     array3[1] = new TestObject(5); [EOL]     array3[2] = new TestObject(6); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "")); [EOL]     assertEquals("", StringUtils.trim(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trim("")); [EOL]     assertEquals(null, StringUtils.trim(null)); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "")); [EOL]     assertEquals("", StringUtils.trim(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trim("")); [EOL]     assertEquals(null, StringUtils.trim(null)); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "")); [EOL]     assertEquals("", StringUtils.trim(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trim("")); [EOL]     assertEquals(null, StringUtils.trim(null)); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "")); [EOL]     assertEquals("", StringUtils.trim(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trim("")); [EOL]     assertEquals(null, StringUtils.trim(null)); [EOL] }
@Test [EOL] public void testTrim() { [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "")); [EOL]     assertEquals("", StringUtils.trim(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trim("")); [EOL]     assertEquals(null, StringUtils.trim(null)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]     assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]     assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]     assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, null)); [EOL]     assertFalse(StringUtils.equals(null, fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]     assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]     assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]     assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]     assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, null)); [EOL]     assertFalse(StringUtils.equals(null, fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]     assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]     assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]     assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]     assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, null)); [EOL]     assertFalse(StringUtils.equals(null, fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]     assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]     assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]     assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]     assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, null)); [EOL]     assertFalse(StringUtils.equals(null, fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]     assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]     assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]     assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]     assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, null)); [EOL]     assertFalse(StringUtils.equals(null, fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]     assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]     assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]     assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]     assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, null)); [EOL]     assertFalse(StringUtils.equals(null, fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]     assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]     assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]     assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]     assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, null)); [EOL]     assertFalse(StringUtils.equals(null, fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]     assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL] }
@Test [EOL] public void testIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ')); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a')); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b')); [EOL]     assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ')); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a')); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b')); [EOL]     assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ')); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a')); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b')); [EOL]     assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ')); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a')); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b')); [EOL]     assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_StringInt() { [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", -1)); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0)); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 1)); [EOL]     assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 2)); [EOL]     assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 3)); [EOL]     assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 4)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 5)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 6)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 7)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 8)); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aab", "AB", 1)); [EOL]     assertEquals(5, StringUtils.indexOfIgnoreCase("aabaabaa", "", 5)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("ab", "AAB", 0)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aab", "AAB", 1)); [EOL] }
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(StringUtils.containsAny(null, (String) null)); [EOL]     assertFalse(StringUtils.containsAny(null, "")); [EOL]     assertFalse(StringUtils.containsAny(null, "ab")); [EOL]     assertFalse(StringUtils.containsAny("", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("", "")); [EOL]     assertFalse(StringUtils.containsAny("", "ab")); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", "")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); [EOL]     assertFalse(StringUtils.containsAny("ab", "z")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(StringUtils.containsAny(null, (String) null)); [EOL]     assertFalse(StringUtils.containsAny(null, "")); [EOL]     assertFalse(StringUtils.containsAny(null, "ab")); [EOL]     assertFalse(StringUtils.containsAny("", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("", "")); [EOL]     assertFalse(StringUtils.containsAny("", "ab")); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", "")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); [EOL]     assertFalse(StringUtils.containsAny("ab", "z")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(StringUtils.containsAny(null, (String) null)); [EOL]     assertFalse(StringUtils.containsAny(null, "")); [EOL]     assertFalse(StringUtils.containsAny(null, "ab")); [EOL]     assertFalse(StringUtils.containsAny("", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("", "")); [EOL]     assertFalse(StringUtils.containsAny("", "ab")); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", "")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); [EOL]     assertFalse(StringUtils.containsAny("ab", "z")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(StringUtils.containsAny(null, (String) null)); [EOL]     assertFalse(StringUtils.containsAny(null, "")); [EOL]     assertFalse(StringUtils.containsAny(null, "ab")); [EOL]     assertFalse(StringUtils.containsAny("", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("", "")); [EOL]     assertFalse(StringUtils.containsAny("", "ab")); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", "")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); [EOL]     assertFalse(StringUtils.containsAny("ab", "z")); [EOL] }
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(StringUtils.containsAny(null, (String) null)); [EOL]     assertFalse(StringUtils.containsAny(null, "")); [EOL]     assertFalse(StringUtils.containsAny(null, "ab")); [EOL]     assertFalse(StringUtils.containsAny("", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("", "")); [EOL]     assertFalse(StringUtils.containsAny("", "ab")); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", "")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); [EOL]     assertFalse(StringUtils.containsAny("ab", "z")); [EOL] }
@Test [EOL] public void testRight_String() { [EOL]     assertSame(null, StringUtils.right(null, -1)); [EOL]     assertSame(null, StringUtils.right(null, 0)); [EOL]     assertSame(null, StringUtils.right(null, 2)); [EOL]     assertEquals("", StringUtils.right("", -1)); [EOL]     assertEquals("", StringUtils.right("", 0)); [EOL]     assertEquals("", StringUtils.right("", 2)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, 0)); [EOL]     assertEquals(BAR, StringUtils.right(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.right(FOOBAR, 80)); [EOL] }
@Test [EOL] public void testRight_String() { [EOL]     assertSame(null, StringUtils.right(null, -1)); [EOL]     assertSame(null, StringUtils.right(null, 0)); [EOL]     assertSame(null, StringUtils.right(null, 2)); [EOL]     assertEquals("", StringUtils.right("", -1)); [EOL]     assertEquals("", StringUtils.right("", 0)); [EOL]     assertEquals("", StringUtils.right("", 2)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, 0)); [EOL]     assertEquals(BAR, StringUtils.right(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.right(FOOBAR, 80)); [EOL] }
@Test [EOL] public void testRight_String() { [EOL]     assertSame(null, StringUtils.right(null, -1)); [EOL]     assertSame(null, StringUtils.right(null, 0)); [EOL]     assertSame(null, StringUtils.right(null, 2)); [EOL]     assertEquals("", StringUtils.right("", -1)); [EOL]     assertEquals("", StringUtils.right("", 0)); [EOL]     assertEquals("", StringUtils.right("", 2)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, 0)); [EOL]     assertEquals(BAR, StringUtils.right(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.right(FOOBAR, 80)); [EOL] }
@Test [EOL] public void testRight_String() { [EOL]     assertSame(null, StringUtils.right(null, -1)); [EOL]     assertSame(null, StringUtils.right(null, 0)); [EOL]     assertSame(null, StringUtils.right(null, 2)); [EOL]     assertEquals("", StringUtils.right("", -1)); [EOL]     assertEquals("", StringUtils.right("", 0)); [EOL]     assertEquals("", StringUtils.right("", 2)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, 0)); [EOL]     assertEquals(BAR, StringUtils.right(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.right(FOOBAR, 80)); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length); [EOL]     String input = "ab   de fg"; [EOL]     String[] expected = new String[] { "ab", "", "", "de", "fg" }; [EOL]     String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2::3:4"; [EOL]     expected = new String[] { "1", "", "2", ":3:4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length); [EOL]     String input = "ab   de fg"; [EOL]     String[] expected = new String[] { "ab", "", "", "de", "fg" }; [EOL]     String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2::3:4"; [EOL]     expected = new String[] { "1", "", "2", ":3:4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length); [EOL]     String input = "ab   de fg"; [EOL]     String[] expected = new String[] { "ab", "", "", "de", "fg" }; [EOL]     String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2::3:4"; [EOL]     expected = new String[] { "1", "", "2", ":3:4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length); [EOL]     String input = "ab   de fg"; [EOL]     String[] expected = new String[] { "ab", "", "", "de", "fg" }; [EOL]     String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2::3:4"; [EOL]     expected = new String[] { "1", "", "2", ":3:4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length); [EOL]     String input = "ab   de fg"; [EOL]     String[] expected = new String[] { "ab", "", "", "de", "fg" }; [EOL]     String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2::3:4"; [EOL]     expected = new String[] { "1", "", "2", ":3:4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length); [EOL]     String input = "ab   de fg"; [EOL]     String[] expected = new String[] { "ab", "", "", "de", "fg" }; [EOL]     String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2::3:4"; [EOL]     expected = new String[] { "1", "", "2", ":3:4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length); [EOL]     String input = "ab   de fg"; [EOL]     String[] expected = new String[] { "ab", "", "", "de", "fg" }; [EOL]     String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2::3:4"; [EOL]     expected = new String[] { "1", "", "2", ":3:4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_String() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("").length); [EOL]     String str = "abc def"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("def", res[1]); [EOL]     str = "abc  def"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("def", res[2]); [EOL]     str = " abc "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("abc", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = "a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals(".c", res[3]); [EOL]     str = "a  b  .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals(".c", res[4]); [EOL]     str = " a  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = " a  b"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(WHITESPACE.length() + 1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     for (int i = 1; i < WHITESPACE.length() - 1; i++) { [EOL]         assertEquals("", res[i]); [EOL]     } [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]); [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_String() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("").length); [EOL]     String str = "abc def"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("def", res[1]); [EOL]     str = "abc  def"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("def", res[2]); [EOL]     str = " abc "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("abc", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = "a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals(".c", res[3]); [EOL]     str = "a  b  .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals(".c", res[4]); [EOL]     str = " a  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = " a  b"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(WHITESPACE.length() + 1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     for (int i = 1; i < WHITESPACE.length() - 1; i++) { [EOL]         assertEquals("", res[i]); [EOL]     } [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]); [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_String() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("").length); [EOL]     String str = "abc def"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("def", res[1]); [EOL]     str = "abc  def"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("def", res[2]); [EOL]     str = " abc "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("abc", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = "a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals(".c", res[3]); [EOL]     str = "a  b  .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals(".c", res[4]); [EOL]     str = " a  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = " a  b"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(WHITESPACE.length() + 1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     for (int i = 1; i < WHITESPACE.length() - 1; i++) { [EOL]         assertEquals("", res[i]); [EOL]     } [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]); [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_String() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("").length); [EOL]     String str = "abc def"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("def", res[1]); [EOL]     str = "abc  def"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("def", res[2]); [EOL]     str = " abc "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("abc", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = "a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals(".c", res[3]); [EOL]     str = "a  b  .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals(".c", res[4]); [EOL]     str = " a  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = " a  b"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(WHITESPACE.length() + 1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     for (int i = 1; i < WHITESPACE.length() - 1; i++) { [EOL]         assertEquals("", res[i]); [EOL]     } [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]); [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_String() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("").length); [EOL]     String str = "abc def"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("def", res[1]); [EOL]     str = "abc  def"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("def", res[2]); [EOL]     str = " abc "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("abc", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = "a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals(".c", res[3]); [EOL]     str = "a  b  .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals(".c", res[4]); [EOL]     str = " a  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = " a  b"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(WHITESPACE.length() + 1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     for (int i = 1; i < WHITESPACE.length() - 1; i++) { [EOL]         assertEquals("", res[i]); [EOL]     } [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testJoin_IteratorChar() { [EOL]     assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL] }
@Test [EOL] public void testJoin_IteratorChar() { [EOL]     assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL] }
@Test [EOL] public void testJoin_IteratorChar() { [EOL]     assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL] }
@Test [EOL] public void testJoin_IteratorChar() { [EOL]     assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL] }
@Test [EOL] public void testJoin_IteratorChar() { [EOL]     assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL] }
@Test [EOL] public void testJoin_IteratorChar() { [EOL]     assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL] }
@Test [EOL] public void testDeleteWhitespace_String() { [EOL]     assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]     assertEquals("", StringUtils.deleteWhitespace("")); [EOL]     assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]     assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]     assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL] }
@Test [EOL] public void testDeleteWhitespace_String() { [EOL]     assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]     assertEquals("", StringUtils.deleteWhitespace("")); [EOL]     assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]     assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]     assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL] }
@Test [EOL] public void testDeleteWhitespace_String() { [EOL]     assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]     assertEquals("", StringUtils.deleteWhitespace("")); [EOL]     assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]     assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]     assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL] }
@Test [EOL] public void testDeleteWhitespace_String() { [EOL]     assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]     assertEquals("", StringUtils.deleteWhitespace("")); [EOL]     assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]     assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]     assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL] }
@Test [EOL] public void testDeleteWhitespace_String() { [EOL]     assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]     assertEquals("", StringUtils.deleteWhitespace("")); [EOL]     assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]     assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]     assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL] }
@Test [EOL] public void testDeleteWhitespace_String() { [EOL]     assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]     assertEquals("", StringUtils.deleteWhitespace("")); [EOL]     assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]     assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]     assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL] }
@Test [EOL] public void testDeleteWhitespace_String() { [EOL]     assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]     assertEquals("", StringUtils.deleteWhitespace("")); [EOL]     assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]     assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]     assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL] }
@Test [EOL] public void testRemoveStartIgnoreCase() { [EOL]     assertNull("removeStartIgnoreCase(null, null)", StringUtils.removeStartIgnoreCase(null, null)); [EOL]     assertNull("removeStartIgnoreCase(null, \"\")", StringUtils.removeStartIgnoreCase(null, "")); [EOL]     assertNull("removeStartIgnoreCase(null, \"a\")", StringUtils.removeStartIgnoreCase(null, "a")); [EOL]     assertEquals("removeStartIgnoreCase(\"\", null)", StringUtils.removeStartIgnoreCase("", null), ""); [EOL]     assertEquals("removeStartIgnoreCase(\"\", \"\")", StringUtils.removeStartIgnoreCase("", ""), ""); [EOL]     assertEquals("removeStartIgnoreCase(\"\", \"a\")", StringUtils.removeStartIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "www."), "domain.com"); [EOL]     assertEquals("removeStartIgnoreCase(\"domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("domain.com", "www."), "domain.com"); [EOL]     assertEquals("removeStartIgnoreCase(\"domain.com\", \"\")", StringUtils.removeStartIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeStartIgnoreCase(\"domain.com\", null)", StringUtils.removeStartIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "WWW."), "domain.com"); [EOL] }
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] }
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] }
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] }
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] }
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] }
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] }
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] }
@Test [EOL] public void testReplaceOnce_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null)); [EOL]     assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", "")); [EOL] }
@Test [EOL] public void testReplaceOnce_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null)); [EOL]     assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", "")); [EOL] }
@Test [EOL] public void testReplaceOnce_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null)); [EOL]     assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", "")); [EOL] }
@Test [EOL] public void testReplaceOnce_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null)); [EOL]     assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", "")); [EOL] }
@Test [EOL] public void testReplaceOnce_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null)); [EOL]     assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", "")); [EOL] }
@Test [EOL] public void testReplaceOnce_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null)); [EOL]     assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", "")); [EOL] }
@Test [EOL] public void testRemovePattern() { [EOL]     assertEquals("", StringUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>")); [EOL] }
@Test [EOL] public void testRemovePattern() { [EOL]     assertEquals("", StringUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>")); [EOL] }
@Test [EOL] public void testRemovePattern() { [EOL]     assertEquals("", StringUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>")); [EOL] }
@Test [EOL] public void testRemovePattern() { [EOL]     assertEquals("", StringUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>")); [EOL] }
@Test [EOL] public void testRemovePattern() { [EOL]     assertEquals("", StringUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>")); [EOL] }
@Test [EOL] public void testOverlay_StringStringIntInt() { [EOL]     assertEquals(null, StringUtils.overlay(null, null, 2, 4)); [EOL]     assertEquals(null, StringUtils.overlay(null, null, -2, -4)); [EOL]     assertEquals("", StringUtils.overlay("", null, 0, 0)); [EOL]     assertEquals("", StringUtils.overlay("", "", 0, 0)); [EOL]     assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); [EOL]     assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); [EOL]     assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2)); [EOL]     assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4)); [EOL]     assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2)); [EOL]     assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4)); [EOL]     assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1)); [EOL]     assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1)); [EOL]     assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2)); [EOL]     assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10)); [EOL]     assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4)); [EOL]     assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10)); [EOL]     assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8)); [EOL] }
@Test [EOL] public void testOverlay_StringStringIntInt() { [EOL]     assertEquals(null, StringUtils.overlay(null, null, 2, 4)); [EOL]     assertEquals(null, StringUtils.overlay(null, null, -2, -4)); [EOL]     assertEquals("", StringUtils.overlay("", null, 0, 0)); [EOL]     assertEquals("", StringUtils.overlay("", "", 0, 0)); [EOL]     assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); [EOL]     assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); [EOL]     assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2)); [EOL]     assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4)); [EOL]     assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2)); [EOL]     assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4)); [EOL]     assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1)); [EOL]     assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1)); [EOL]     assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2)); [EOL]     assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10)); [EOL]     assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4)); [EOL]     assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10)); [EOL]     assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8)); [EOL] }
@Test [EOL] public void testRightPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5, "-+")); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5, " ")); [EOL]     assertEquals(null, StringUtils.rightPad(null, 8, null)); [EOL]     assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+")); [EOL]     assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~")); [EOL]     assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1, " ")); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5, null)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testRightPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5, "-+")); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5, " ")); [EOL]     assertEquals(null, StringUtils.rightPad(null, 8, null)); [EOL]     assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+")); [EOL]     assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~")); [EOL]     assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1, " ")); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5, null)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testLeftPad_StringInt() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL] }
@Test [EOL] public void testLeftPad_StringInt() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL] }
@Test [EOL] public void testLeftPad_StringInt() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL] }
@Test [EOL] public void testLeftPad_StringInt() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL] }
@Test [EOL] public void testIsAlphanumeric() { [EOL]     assertFalse(StringUtils.isAlphanumeric(null)); [EOL]     assertFalse(StringUtils.isAlphanumeric("")); [EOL]     assertFalse(StringUtils.isAlphanumeric(" ")); [EOL]     assertTrue(StringUtils.isAlphanumeric("a")); [EOL]     assertTrue(StringUtils.isAlphanumeric("A")); [EOL]     assertTrue(StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlphanumeric("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumeric("1")); [EOL]     assertTrue(StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumeric("_")); [EOL]     assertFalse(StringUtils.isAlphanumeric("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphanumeric() { [EOL]     assertFalse(StringUtils.isAlphanumeric(null)); [EOL]     assertFalse(StringUtils.isAlphanumeric("")); [EOL]     assertFalse(StringUtils.isAlphanumeric(" ")); [EOL]     assertTrue(StringUtils.isAlphanumeric("a")); [EOL]     assertTrue(StringUtils.isAlphanumeric("A")); [EOL]     assertTrue(StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlphanumeric("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumeric("1")); [EOL]     assertTrue(StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumeric("_")); [EOL]     assertFalse(StringUtils.isAlphanumeric("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphanumeric() { [EOL]     assertFalse(StringUtils.isAlphanumeric(null)); [EOL]     assertFalse(StringUtils.isAlphanumeric("")); [EOL]     assertFalse(StringUtils.isAlphanumeric(" ")); [EOL]     assertTrue(StringUtils.isAlphanumeric("a")); [EOL]     assertTrue(StringUtils.isAlphanumeric("A")); [EOL]     assertTrue(StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlphanumeric("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumeric("1")); [EOL]     assertTrue(StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumeric("_")); [EOL]     assertFalse(StringUtils.isAlphanumeric("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphanumeric() { [EOL]     assertFalse(StringUtils.isAlphanumeric(null)); [EOL]     assertFalse(StringUtils.isAlphanumeric("")); [EOL]     assertFalse(StringUtils.isAlphanumeric(" ")); [EOL]     assertTrue(StringUtils.isAlphanumeric("a")); [EOL]     assertTrue(StringUtils.isAlphanumeric("A")); [EOL]     assertTrue(StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlphanumeric("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumeric("1")); [EOL]     assertTrue(StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumeric("_")); [EOL]     assertFalse(StringUtils.isAlphanumeric("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphanumeric() { [EOL]     assertFalse(StringUtils.isAlphanumeric(null)); [EOL]     assertFalse(StringUtils.isAlphanumeric("")); [EOL]     assertFalse(StringUtils.isAlphanumeric(" ")); [EOL]     assertTrue(StringUtils.isAlphanumeric("a")); [EOL]     assertTrue(StringUtils.isAlphanumeric("A")); [EOL]     assertTrue(StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlphanumeric("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumeric("1")); [EOL]     assertTrue(StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumeric("_")); [EOL]     assertFalse(StringUtils.isAlphanumeric("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testDefaultIfEmpty_StringBuffers() { [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), null)); [EOL]     final StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] }
@Test [EOL] public void testDefaultIfEmpty_StringBuffers() { [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), null)); [EOL]     final StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] }
@Test [EOL] public void testDefaultIfEmpty_StringBuffers() { [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), null)); [EOL]     final StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] }
@Test [EOL] public void testDefaultIfEmpty_StringBuffers() { [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), null)); [EOL]     final StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] }
@Test [EOL] public void testDefaultIfEmpty_StringBuffers() { [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), null)); [EOL]     final StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] }
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] }
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] }
@Test [EOL] public void testAppendIfMissingIgnoreCase() { [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissingIgnoreCase() { [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissingIgnoreCase() { [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissingIgnoreCase() { [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissingIgnoreCase() { [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissingIgnoreCase() { [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissingIgnoreCase() { [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAppendIfMissingIgnoreCase() { [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.subtract(0.9d); [EOL]     assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.subtract(0.9d); [EOL]     assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.subtract(0.9d); [EOL]     assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.subtract(Double.valueOf(0.9d)); [EOL]     assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.subtract(Double.valueOf(0.9d)); [EOL]     assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.subtract(Double.valueOf(0.9d)); [EOL]     assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testLang882() throws IOException { [EOL]     final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); [EOL]     final StringWriter out = new StringWriter(); [EOL]     final int result = lt.translate(new StringBuffer("one"), 0, out); [EOL]     assertEquals("Incorrect codepoint consumption", 3, result); [EOL]     assertEquals("Incorrect value", "two", out.toString()); [EOL] }
@Test [EOL] public void testLang882() throws IOException { [EOL]     final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); [EOL]     final StringWriter out = new StringWriter(); [EOL]     final int result = lt.translate(new StringBuffer("one"), 0, out); [EOL]     assertEquals("Incorrect codepoint consumption", 3, result); [EOL]     assertEquals("Incorrect value", "two", out.toString()); [EOL] }
@Test [EOL] public void testLang882() throws IOException { [EOL]     final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); [EOL]     final StringWriter out = new StringWriter(); [EOL]     final int result = lt.translate(new StringBuffer("one"), 0, out); [EOL]     assertEquals("Incorrect codepoint consumption", 3, result); [EOL]     assertEquals("Incorrect value", "two", out.toString()); [EOL] }
@Test [EOL] public void testLang882() throws IOException { [EOL]     final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); [EOL]     final StringWriter out = new StringWriter(); [EOL]     final int result = lt.translate(new StringBuffer("one"), 0, out); [EOL]     assertEquals("Incorrect codepoint consumption", 3, result); [EOL]     assertEquals("Incorrect value", "two", out.toString()); [EOL] }
@Test [EOL] public void testLang882() throws IOException { [EOL]     final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); [EOL]     final StringWriter out = new StringWriter(); [EOL]     final int result = lt.translate(new StringBuffer("one"), 0, out); [EOL]     assertEquals("Incorrect codepoint consumption", 3, result); [EOL]     assertEquals("Incorrect value", "two", out.toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] }
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] }
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] }
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] }
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testDouble() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testDouble() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     int[] array = new int[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     int[] array = new int[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     int[] array = new int[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     int[] array = new int[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testOneArgNull() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]     assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testOneArgNull() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]     assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testOneArgNull() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]     assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testOneArgNull() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]     assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testOneArgNull() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]     assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testOneArgNull() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]     assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL] }
@Test [EOL] public void testSetArrayStart() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setArrayStart(null); [EOL]     assertEquals("", style.getArrayStart()); [EOL] }
@Test [EOL] public void testSetArrayStart() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setArrayStart(null); [EOL]     assertEquals("", style.getArrayStart()); [EOL] }
@Test [EOL] public void testSetArrayStart() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setArrayStart(null); [EOL]     assertEquals("", style.getArrayStart()); [EOL] }
@Test [EOL] public void testSetContentEnd() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setContentEnd(null); [EOL]     assertEquals("", style.getContentEnd()); [EOL] }
@Test [EOL] public void testSetContentEnd() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setContentEnd(null); [EOL]     assertEquals("", style.getContentEnd()); [EOL] }
@Test [EOL] public void testSetFieldNameValueSeparator() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setFieldNameValueSeparator(null); [EOL]     assertEquals("", style.getFieldNameValueSeparator()); [EOL] }
@Test [EOL] public void testSetFieldNameValueSeparator() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setFieldNameValueSeparator(null); [EOL]     assertEquals("", style.getFieldNameValueSeparator()); [EOL] }
@Test [EOL] public void testSetFieldNameValueSeparator() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setFieldNameValueSeparator(null); [EOL]     assertEquals("", style.getFieldNameValueSeparator()); [EOL] }
@Test [EOL] public void testSetNullText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setNullText(null); [EOL]     assertEquals("", style.getNullText()); [EOL] }
@Test [EOL] public void testSetNullText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setNullText(null); [EOL]     assertEquals("", style.getNullText()); [EOL] }
@Test [EOL] public void testSetSizeStartText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSizeStartText(null); [EOL]     assertEquals("", style.getSizeStartText()); [EOL] }
@Test [EOL] public void testSetSizeStartText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSizeStartText(null); [EOL]     assertEquals("", style.getSizeStartText()); [EOL] }
@Test [EOL] public void testBelow() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.below('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the below method", "\\u0041\\u0044FGZ", result); [EOL] }
@Test [EOL] public void testBelow() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.below('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the below method", "\\u0041\\u0044FGZ", result); [EOL] }
@Test [EOL] public void testBelow() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.below('F'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the below method", "\\u0041\\u0044FGZ", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = ue.translate(input); [EOL]     assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testShortArrayToLong() { [EOL]     final short[] src = new short[] { (short) 0xCDF1, (short) 0xF0C1, (short) 0x0F12, (short) 0x3456, (short) 0x7800 }; [EOL]     assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2)); [EOL]     assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4)); [EOL]     assertEquals(0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x123456CDF1BCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]     assertEquals(0x123478003456DEF0L, Conversion.shortArrayToLong(src, 3, 0x123456789ABCDEF0L, 16, 2)); [EOL] }
@Test [EOL] public void testHexToLong() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8)); [EOL]     assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8)); [EOL]     assertEquals(0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567876BCDEF0L, Conversion.hexToLong(src, 15, 0x123456798ABCDEF0L, 24, 3)); [EOL] }
@Test [EOL] public void testHexToLong() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8)); [EOL]     assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8)); [EOL]     assertEquals(0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567876BCDEF0L, Conversion.hexToLong(src, 15, 0x123456798ABCDEF0L, 24, 3)); [EOL] }
@Test [EOL] public void testHexToInt() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8)); [EOL]     assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8)); [EOL]     assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0)); [EOL]     assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3)); [EOL] }
@Test [EOL] public void testBinaryToShort() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals((short) 0x0000, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 0 * 4)); [EOL]     assertEquals((short) 0x000C, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 1 * 4)); [EOL]     assertEquals((short) 0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0x1234, Conversion.binaryToShort(src, 0 * 4, (short) 0x1234, 0, 0 * 4)); [EOL]     assertEquals((short) 0x8764, Conversion.binaryToShort(src, 15 * 4, (short) 0x1234, 4, 3 * 4)); [EOL] }
@Test [EOL] public void testBinaryToShort() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals((short) 0x0000, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 0 * 4)); [EOL]     assertEquals((short) 0x000C, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 1 * 4)); [EOL]     assertEquals((short) 0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0x1234, Conversion.binaryToShort(src, 0 * 4, (short) 0x1234, 0, 0 * 4)); [EOL]     assertEquals((short) 0x8764, Conversion.binaryToShort(src, 15 * 4, (short) 0x1234, 4, 3 * 4)); [EOL] }
@Test [EOL] public void testBinaryToShort() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals((short) 0x0000, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 0 * 4)); [EOL]     assertEquals((short) 0x000C, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 1 * 4)); [EOL]     assertEquals((short) 0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0x1234, Conversion.binaryToShort(src, 0 * 4, (short) 0x1234, 0, 0 * 4)); [EOL]     assertEquals((short) 0x8764, Conversion.binaryToShort(src, 15 * 4, (short) 0x1234, 4, 3 * 4)); [EOL] }
@Test [EOL] public void testBinaryToShort() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals((short) 0x0000, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 0 * 4)); [EOL]     assertEquals((short) 0x000C, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 1 * 4)); [EOL]     assertEquals((short) 0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0x1234, Conversion.binaryToShort(src, 0 * 4, (short) 0x1234, 0, 0 * 4)); [EOL]     assertEquals((short) 0x8764, Conversion.binaryToShort(src, 15 * 4, (short) 0x1234, 4, 3 * 4)); [EOL] }
@Test [EOL] public void testLongToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 7)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7)); [EOL] }
@Test [EOL] public void testLongToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 7)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7)); [EOL] }
@Test [EOL] public void testShortToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 1)); [EOL] }
@Test [EOL] public void testShortToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 1)); [EOL] }
@Test [EOL] public void testByteArrayToUuid() { [EOL]     assertEquals(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), Conversion.byteArrayToUuid(new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff }, 0)); [EOL]     assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), Conversion.byteArrayToUuid(new byte[] { (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, 0)); [EOL]     assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), Conversion.byteArrayToUuid(new byte[] { 0, 0, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, 2)); [EOL] }
@Test [EOL] public void testEscapeEcmaScript() { [EOL]     assertEquals(null, StringEscapeUtils.escapeEcmaScript(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\"")); [EOL]     assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';", StringEscapeUtils.escapeEcmaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';")); [EOL] }
@Test [EOL] public void testUnescapeJava() throws IOException { [EOL]     assertEquals(null, StringEscapeUtils.unescapeJava(null)); [EOL]     try { [EOL]         StringEscapeUtils.UNESCAPE_JAVA.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.UNESCAPE_JAVA.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.unescapeJava("\\u02-3"); [EOL]         fail(); [EOL]     } catch (final RuntimeException ex) { [EOL]     } [EOL]     assertUnescapeJava("", ""); [EOL]     assertUnescapeJava("test", "test"); [EOL]     assertUnescapeJava("\ntest\b", "\\ntest\\b"); [EOL]     assertUnescapeJava("\u123425foo\ntest\b", "\\u123425foo\\ntest\\b"); [EOL]     assertUnescapeJava("'\foo\teste\r", "\\'\\foo\\teste\\r"); [EOL]     assertUnescapeJava("", "\\"); [EOL]     assertUnescapeJava("lowercase Unicode", "\uABCDx", "\\uabcdx"); [EOL]     assertUnescapeJava("uppercase Unicode", "\uABCDx", "\\uABCDx"); [EOL]     assertUnescapeJava("Unicode as final character", "\uABCD", "\\uabcd"); [EOL] }
@Test [EOL] public void testUnescapeCsvString() throws Exception { [EOL]     assertEquals("foo.bar", StringEscapeUtils.unescapeCsv("foo.bar")); [EOL]     assertEquals("foo,bar", StringEscapeUtils.unescapeCsv("\"foo,bar\"")); [EOL]     assertEquals("foo\nbar", StringEscapeUtils.unescapeCsv("\"foo\nbar\"")); [EOL]     assertEquals("foo\rbar", StringEscapeUtils.unescapeCsv("\"foo\rbar\"")); [EOL]     assertEquals("foo\"bar", StringEscapeUtils.unescapeCsv("\"foo\"\"bar\"")); [EOL]     assertEquals("", StringEscapeUtils.unescapeCsv("")); [EOL]     assertEquals(null, StringEscapeUtils.unescapeCsv(null)); [EOL]     assertEquals("\"foo.bar\"", StringEscapeUtils.unescapeCsv("\"foo.bar\"")); [EOL] }
