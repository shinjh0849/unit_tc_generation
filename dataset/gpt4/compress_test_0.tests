public void testGzipCreation() throws Exception { [EOL]     final File input = getFile("test1.xml"); [EOL]     final File output = new File(dir, "test1.xml.gz"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("gz", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testGzipCreation() throws Exception { [EOL]     final File input = getFile("test1.xml"); [EOL]     final File output = new File(dir, "test1.xml.gz"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("gz", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testGzipCreation() throws Exception { [EOL]     final File input = getFile("test1.xml"); [EOL]     final File output = new File(dir, "test1.xml.gz"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("gz", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testGzipCreation() throws Exception { [EOL]     final File input = getFile("test1.xml"); [EOL]     final File output = new File(dir, "test1.xml.gz"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("gz", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testClone() { [EOL]     ZipLong s1 = new ZipLong(42); [EOL]     ZipLong s2 = (ZipLong) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.getValue(), s2.getValue()); [EOL] }
public void testClone() { [EOL]     ZipLong s1 = new ZipLong(42); [EOL]     ZipLong s2 = (ZipLong) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.getValue(), s2.getValue()); [EOL] }
public void testToBytes() { [EOL]     ZipShort zs = new ZipShort(0x1234); [EOL]     byte[] result = zs.getBytes(); [EOL]     assertEquals("length getBytes", 2, result.length); [EOL]     assertEquals("first byte getBytes", 0x34, result[0]); [EOL]     assertEquals("second byte getBytes", 0x12, result[1]); [EOL] }
public void testToBytes() { [EOL]     ZipShort zs = new ZipShort(0x1234); [EOL]     byte[] result = zs.getBytes(); [EOL]     assertEquals("length getBytes", 2, result.length); [EOL]     assertEquals("first byte getBytes", 0x34, result[0]); [EOL]     assertEquals("second byte getBytes", 0x12, result[1]); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testAdjustToLong() { [EOL]     assertEquals(Integer.MAX_VALUE, ZipUtil.adjustToLong(Integer.MAX_VALUE)); [EOL]     assertEquals(((long) Integer.MAX_VALUE) + 1, ZipUtil.adjustToLong(Integer.MAX_VALUE + 1)); [EOL]     assertEquals(2 * ((long) Integer.MAX_VALUE), ZipUtil.adjustToLong(2 * Integer.MAX_VALUE)); [EOL] }
public void testAdjustToLong() { [EOL]     assertEquals(Integer.MAX_VALUE, ZipUtil.adjustToLong(Integer.MAX_VALUE)); [EOL]     assertEquals(((long) Integer.MAX_VALUE) + 1, ZipUtil.adjustToLong(Integer.MAX_VALUE + 1)); [EOL]     assertEquals(2 * ((long) Integer.MAX_VALUE), ZipUtil.adjustToLong(2 * Integer.MAX_VALUE)); [EOL] }
public void testAdjustToLong() { [EOL]     assertEquals(Integer.MAX_VALUE, ZipUtil.adjustToLong(Integer.MAX_VALUE)); [EOL]     assertEquals(((long) Integer.MAX_VALUE) + 1, ZipUtil.adjustToLong(Integer.MAX_VALUE + 1)); [EOL]     assertEquals(2 * ((long) Integer.MAX_VALUE), ZipUtil.adjustToLong(2 * Integer.MAX_VALUE)); [EOL] }
public void testAdjustToLong() { [EOL]     assertEquals(Integer.MAX_VALUE, ZipUtil.adjustToLong(Integer.MAX_VALUE)); [EOL]     assertEquals(((long) Integer.MAX_VALUE) + 1, ZipUtil.adjustToLong(Integer.MAX_VALUE + 1)); [EOL]     assertEquals(2 * ((long) Integer.MAX_VALUE), ZipUtil.adjustToLong(2 * Integer.MAX_VALUE)); [EOL] }
public void testAdjustToLong() { [EOL]     assertEquals(Integer.MAX_VALUE, ZipUtil.adjustToLong(Integer.MAX_VALUE)); [EOL]     assertEquals(((long) Integer.MAX_VALUE) + 1, ZipUtil.adjustToLong(Integer.MAX_VALUE + 1)); [EOL]     assertEquals(2 * ((long) Integer.MAX_VALUE), ZipUtil.adjustToLong(2 * Integer.MAX_VALUE)); [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testGzipUnarchive() throws Exception { [EOL]     final File input = getFile("bla.tgz"); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("gz", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testGzipUnarchive() throws Exception { [EOL]     final File input = getFile("bla.tgz"); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("gz", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testGzipUnarchive() throws Exception { [EOL]     final File input = getFile("bla.tgz"); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("gz", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFields() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u, result[1]); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertEquals("length second pass", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     ze.removeExtraField(new ZipShort(1)); [EOL]     byte[] data3 = ze.getExtra(); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("fourth pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertSame(u3, result[1]); [EOL]     assertEquals("length fourth pass", data2.length, data3.length); [EOL]     try { [EOL]         ze.removeExtraField(new ZipShort(1)); [EOL]         fail("should be no such element"); [EOL]     } catch (java.util.NoSuchElementException nse) { [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testSimpleCp850Encoding() throws IOException { [EOL]     doSimpleEncodingTest("Cp850", null); [EOL] }
public void testDeleteFromAndAddToJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         changes.delete("META-INF"); [EOL]         changes.delete(".classpath"); [EOL]         changes.delete(".project"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         JarArchiveEntry entry = new JarArchiveEntry("testdata/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile("bla.jar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("jar", is); [EOL]         temp = new File(dir, "bla.jar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("jar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     expected.add("testdata/test.txt"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testMerge() { [EOL]     byte[] local = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("local length", data.length, local.length); [EOL]     for (int i = 0; i < local.length; i++) { [EOL]         assertEquals("local byte " + i, data[i], local[i]); [EOL]     } [EOL]     byte[] dummyCentral = dummy.getCentralDirectoryData(); [EOL]     byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length]; [EOL]     System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2); [EOL]     System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, data2, 4 + aLocal.length + 2, 2); [EOL]     System.arraycopy(dummyCentral, 0, data2, 4 + aLocal.length + 4, dummyCentral.length); [EOL]     byte[] central = ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] { a, dummy }); [EOL]     assertEquals("central length", data2.length, central.length); [EOL]     for (int i = 0; i < central.length; i++) { [EOL]         assertEquals("central byte " + i, data2[i], central[i]); [EOL]     } [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new ArArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]     final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry(); [EOL]     File target = new File(dir, entry.getName()); [EOL]     final OutputStream out = new FileOutputStream(target); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testGzipUnarchive() throws Exception { [EOL]     final File input = getFile("bla.tgz"); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("gz", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testGzipUnarchive() throws Exception { [EOL]     final File input = getFile("bla.tgz"); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("gz", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testGzipUnarchive() throws Exception { [EOL]     final File input = getFile("bla.tgz"); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("gz", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testGzipUnarchive() throws Exception { [EOL]     final File input = getFile("bla.tgz"); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("gz", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testGzipUnarchive() throws Exception { [EOL]     final File input = getFile("bla.tgz"); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("gz", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testGzipUnarchive() throws Exception { [EOL]     final File input = getFile("bla.tgz"); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("gz", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testGzipCreation() throws Exception { [EOL]     final File input = getFile("test1.xml"); [EOL]     final File output = new File(dir, "test1.xml.gz"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("gz", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testGzipCreation() throws Exception { [EOL]     final File input = getFile("test1.xml"); [EOL]     final File output = new File(dir, "test1.xml.gz"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("gz", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testGzipCreation() throws Exception { [EOL]     final File input = getFile("test1.xml"); [EOL]     final File output = new File(dir, "test1.xml.gz"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("gz", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testGzipCreation() throws Exception { [EOL]     final File input = getFile("test1.xml"); [EOL]     final File output = new File(dir, "test1.xml.gz"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("gz", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testGzipCreation() throws Exception { [EOL]     final File input = getFile("test1.xml"); [EOL]     final File output = new File(dir, "test1.xml.gz"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("gz", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
public void testCP437FileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, true); [EOL] }
