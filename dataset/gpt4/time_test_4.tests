public void testGetFieldType() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     assertEquals(DateTimeFieldType.year(), mock.getFieldType(0)); [EOL]     assertEquals(DateTimeFieldType.monthOfYear(), mock.getFieldType(1)); [EOL]     try { [EOL]         mock.getFieldType(-1); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         mock.getFieldType(2); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetFieldType() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     assertEquals(DateTimeFieldType.year(), mock.getFieldType(0)); [EOL]     assertEquals(DateTimeFieldType.monthOfYear(), mock.getFieldType(1)); [EOL]     try { [EOL]         mock.getFieldType(-1); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         mock.getFieldType(2); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGet() { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.hourOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet() { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.hourOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testEqualsHashCode() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     YearMonthDay test3 = new YearMonthDay(1971, 6, 9); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     YearMonthDay test3 = new YearMonthDay(1971, 6, 9); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     YearMonthDay test3 = new YearMonthDay(1971, 6, 9); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     YearMonthDay test3 = new YearMonthDay(1971, 6, 9); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testGetField() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testWithField1() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new YearMonthDay(2004, 6, 9), test); [EOL]     assertEquals(new YearMonthDay(2006, 6, 9), result); [EOL] }
public void testPlus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     YearMonthDay expected = new YearMonthDay(2003, 7, 7, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     YearMonthDay expected = new YearMonthDay(2003, 7, 7, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testWithers() { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN)); [EOL]     assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN)); [EOL]     assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null)); [EOL] }
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN)); [EOL]     assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN)); [EOL]     assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null)); [EOL] }
public void testConstructor_trickyDifferences_RI_RI_toFeb_exactMonths() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 12, 28, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 2, 28, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] }
public void testConstructor_RI_RD2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dt1, dur); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_Object_PeriodType1() throws Throwable { [EOL]     Period test = new Period("P1Y2M3D", PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(3, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_Object_PeriodType1() throws Throwable { [EOL]     Period test = new Period("P1Y2M3D", PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(3, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testToPeriod() { [EOL]     Period test = new Period(123L); [EOL]     Period result = test.toPeriod(); [EOL]     assertSame(test, result); [EOL] }
public void testWithField4() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     Period result = test.withField(DurationFieldType.years(), 0); [EOL]     assertEquals(test, result); [EOL] }
public void testWithField4() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     Period result = test.withField(DurationFieldType.years(), 0); [EOL]     assertEquals(test, result); [EOL] }
public void testPlus() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days()); [EOL]     Period test = base.plus((ReadablePeriod) null); [EOL]     assertSame(base, test); [EOL]     test = base.plus(Period.years(10)); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.plus(Years.years(10)); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.plus(Period.days(10)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = baseDaysOnly.plus(Period.years(0)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(10, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = baseDaysOnly.plus(baseDaysOnly); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(20, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     try { [EOL]         baseDaysOnly.plus(Period.years(1)); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).plus(Period.days(1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).plus(Period.days(-1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days()); [EOL]     Period test = base.plus((ReadablePeriod) null); [EOL]     assertSame(base, test); [EOL]     test = base.plus(Period.years(10)); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.plus(Years.years(10)); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.plus(Period.days(10)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = baseDaysOnly.plus(Period.years(0)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(10, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = baseDaysOnly.plus(baseDaysOnly); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(20, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     try { [EOL]         baseDaysOnly.plus(Period.years(1)); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).plus(Period.days(1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).plus(Period.days(-1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardSeconds().getSeconds()); [EOL] }
public void testToStandardSeconds_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardSeconds().getSeconds()); [EOL] }
public void testToStandardDuration_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDuration().getMillis()); [EOL] }
public void testToStandardDuration_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDuration().getMillis()); [EOL] }
public void testToStandardDuration_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDuration().getMillis()); [EOL] }
public void testToStandardSeconds_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardSeconds().getSeconds()); [EOL] }
public void testToStandardSeconds_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardSeconds().getSeconds()); [EOL] }
public void testToStandardSeconds_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardSeconds().getSeconds()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestIslamicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ISLAMIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ISLAMIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int dayOfYearLen = dayOfYear.getMaximumValue(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 12) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AH", era.getAsText(millis)); [EOL]         assertEquals("AH", era.getAsShortText(millis)); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         boolean leap = ((11 * yearValue + 14) % 30) < 11; [EOL]         assertEquals(leap, year.isLeap(millis)); [EOL]         switch(monthValue) { [EOL]             case 1: [EOL]             case 3: [EOL]             case 5: [EOL]             case 7: [EOL]             case 9: [EOL]             case 11: [EOL]                 assertEquals(30, monthLen); [EOL]                 break; [EOL]             case 2: [EOL]             case 4: [EOL]             case 6: [EOL]             case 8: [EOL]             case 10: [EOL]                 assertEquals(29, monthLen); [EOL]                 break; [EOL]             case 12: [EOL]                 assertEquals((leap ? 30 : 29), monthLen); [EOL]                 break; [EOL]         } [EOL]         assertEquals((leap ? 355 : 354), dayOfYearLen); [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay > monthLen) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]             if (expectedMonth == 13) { [EOL]                 expectedMonth = 1; [EOL]                 expectedDOY = 1; [EOL]                 expectedYear++; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestIslamicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ISLAMIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ISLAMIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int dayOfYearLen = dayOfYear.getMaximumValue(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 12) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AH", era.getAsText(millis)); [EOL]         assertEquals("AH", era.getAsShortText(millis)); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         boolean leap = ((11 * yearValue + 14) % 30) < 11; [EOL]         assertEquals(leap, year.isLeap(millis)); [EOL]         switch(monthValue) { [EOL]             case 1: [EOL]             case 3: [EOL]             case 5: [EOL]             case 7: [EOL]             case 9: [EOL]             case 11: [EOL]                 assertEquals(30, monthLen); [EOL]                 break; [EOL]             case 2: [EOL]             case 4: [EOL]             case 6: [EOL]             case 8: [EOL]             case 10: [EOL]                 assertEquals(29, monthLen); [EOL]                 break; [EOL]             case 12: [EOL]                 assertEquals((leap ? 30 : 29), monthLen); [EOL]                 break; [EOL]         } [EOL]         assertEquals((leap ? 355 : 354), dayOfYearLen); [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay > monthLen) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]             if (expectedMonth == 13) { [EOL]                 expectedMonth = 1; [EOL]                 expectedDOY = 1; [EOL]                 expectedYear++; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestIslamicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ISLAMIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ISLAMIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int dayOfYearLen = dayOfYear.getMaximumValue(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 12) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AH", era.getAsText(millis)); [EOL]         assertEquals("AH", era.getAsShortText(millis)); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         boolean leap = ((11 * yearValue + 14) % 30) < 11; [EOL]         assertEquals(leap, year.isLeap(millis)); [EOL]         switch(monthValue) { [EOL]             case 1: [EOL]             case 3: [EOL]             case 5: [EOL]             case 7: [EOL]             case 9: [EOL]             case 11: [EOL]                 assertEquals(30, monthLen); [EOL]                 break; [EOL]             case 2: [EOL]             case 4: [EOL]             case 6: [EOL]             case 8: [EOL]             case 10: [EOL]                 assertEquals(29, monthLen); [EOL]                 break; [EOL]             case 12: [EOL]                 assertEquals((leap ? 30 : 29), monthLen); [EOL]                 break; [EOL]         } [EOL]         assertEquals((leap ? 355 : 354), dayOfYearLen); [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay > monthLen) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]             if (expectedMonth == 13) { [EOL]                 expectedMonth = 1; [EOL]                 expectedDOY = 1; [EOL]                 expectedYear++; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestIslamicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ISLAMIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ISLAMIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int dayOfYearLen = dayOfYear.getMaximumValue(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 12) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AH", era.getAsText(millis)); [EOL]         assertEquals("AH", era.getAsShortText(millis)); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         boolean leap = ((11 * yearValue + 14) % 30) < 11; [EOL]         assertEquals(leap, year.isLeap(millis)); [EOL]         switch(monthValue) { [EOL]             case 1: [EOL]             case 3: [EOL]             case 5: [EOL]             case 7: [EOL]             case 9: [EOL]             case 11: [EOL]                 assertEquals(30, monthLen); [EOL]                 break; [EOL]             case 2: [EOL]             case 4: [EOL]             case 6: [EOL]             case 8: [EOL]             case 10: [EOL]                 assertEquals(29, monthLen); [EOL]                 break; [EOL]             case 12: [EOL]                 assertEquals((leap ? 30 : 29), monthLen); [EOL]                 break; [EOL]         } [EOL]         assertEquals((leap ? 355 : 354), dayOfYearLen); [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay > monthLen) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]             if (expectedMonth == 13) { [EOL]                 expectedMonth = 1; [EOL]                 expectedDOY = 1; [EOL]                 expectedYear++; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testLeapYearRulesConstruction() { [EOL]     DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC()); [EOL]     assertEquals(dt.getYear(), 1500); [EOL]     assertEquals(dt.getMonthOfYear(), 2); [EOL]     assertEquals(dt.getDayOfMonth(), 29); [EOL] }
public void testLeapYearRulesConstruction() { [EOL]     DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC()); [EOL]     assertEquals(dt.getYear(), 1500); [EOL]     assertEquals(dt.getMonthOfYear(), 2); [EOL]     assertEquals(dt.getDayOfMonth(), 29); [EOL] }
public void testLeapYearRulesConstruction() { [EOL]     DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC()); [EOL]     assertEquals(dt.getYear(), 1500); [EOL]     assertEquals(dt.getMonthOfYear(), 2); [EOL]     assertEquals(dt.getDayOfMonth(), 29); [EOL] }
public void testLeapYearRulesConstruction() { [EOL]     DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC()); [EOL]     assertEquals(dt.getYear(), 1500); [EOL]     assertEquals(dt.getMonthOfYear(), 2); [EOL]     assertEquals(dt.getDayOfMonth(), 29); [EOL] }
public void testLeapYearRulesConstruction() { [EOL]     DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC()); [EOL]     assertEquals(dt.getYear(), 1500); [EOL]     assertEquals(dt.getMonthOfYear(), 2); [EOL]     assertEquals(dt.getDayOfMonth(), 29); [EOL] }
public void testLeapYearRulesConstruction() { [EOL]     DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC()); [EOL]     assertEquals(dt.getYear(), 1500); [EOL]     assertEquals(dt.getMonthOfYear(), 2); [EOL]     assertEquals(dt.getDayOfMonth(), 29); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testCutoverAddWeekyears() { [EOL]     testAdd("1582-W01-1", DurationFieldType.weekyears(), 1, "1583-W01-1"); [EOL]     testAdd("1582-W39-1", DurationFieldType.weekyears(), 1, "1583-W39-1"); [EOL]     testAdd("1583-W45-1", DurationFieldType.weekyears(), 1, "1584-W45-1"); [EOL]     testAdd("1580-W01-1", DurationFieldType.weekyears(), 4, "1584-W01-1"); [EOL]     testAdd("1580-W30-7", DurationFieldType.weekyears(), 4, "1584-W30-7"); [EOL]     testAdd("1580-W50-7", DurationFieldType.weekyears(), 4, "1584-W50-7"); [EOL] }
public void testPartialGetAsText() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO); [EOL]     assertEquals("January", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsText()); [EOL]     assertEquals("Jan", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsShortText()); [EOL] }
public void testPartialGetAsText() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO); [EOL]     assertEquals("January", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsText()); [EOL]     assertEquals("Jan", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsShortText()); [EOL] }
public void testPartialGetAsText() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO); [EOL]     assertEquals("January", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsText()); [EOL]     assertEquals("Jan", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsShortText()); [EOL] }
public void testCutoverAddWeekyears() { [EOL]     testAdd("1582-W01-1", DurationFieldType.weekyears(), 1, "1583-W01-1"); [EOL]     testAdd("1582-W39-1", DurationFieldType.weekyears(), 1, "1583-W39-1"); [EOL]     testAdd("1583-W45-1", DurationFieldType.weekyears(), 1, "1584-W45-1"); [EOL]     testAdd("1580-W01-1", DurationFieldType.weekyears(), 4, "1584-W01-1"); [EOL]     testAdd("1580-W30-7", DurationFieldType.weekyears(), 4, "1584-W30-7"); [EOL]     testAdd("1580-W50-7", DurationFieldType.weekyears(), 4, "1584-W50-7"); [EOL] }
public void testCutoverAddWeekyears() { [EOL]     testAdd("1582-W01-1", DurationFieldType.weekyears(), 1, "1583-W01-1"); [EOL]     testAdd("1582-W39-1", DurationFieldType.weekyears(), 1, "1583-W39-1"); [EOL]     testAdd("1583-W45-1", DurationFieldType.weekyears(), 1, "1584-W45-1"); [EOL]     testAdd("1580-W01-1", DurationFieldType.weekyears(), 4, "1584-W01-1"); [EOL]     testAdd("1580-W30-7", DurationFieldType.weekyears(), 4, "1584-W30-7"); [EOL]     testAdd("1580-W50-7", DurationFieldType.weekyears(), 4, "1584-W50-7"); [EOL] }
public void testCutoverAddWeekyears() { [EOL]     testAdd("1582-W01-1", DurationFieldType.weekyears(), 1, "1583-W01-1"); [EOL]     testAdd("1582-W39-1", DurationFieldType.weekyears(), 1, "1583-W39-1"); [EOL]     testAdd("1583-W45-1", DurationFieldType.weekyears(), 1, "1584-W45-1"); [EOL]     testAdd("1580-W01-1", DurationFieldType.weekyears(), 4, "1584-W01-1"); [EOL]     testAdd("1580-W30-7", DurationFieldType.weekyears(), 4, "1584-W30-7"); [EOL]     testAdd("1580-W50-7", DurationFieldType.weekyears(), 4, "1584-W50-7"); [EOL] }
public void testPlus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testPrint_chrono_and_zone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL]     dt = dt.withChronology(ISO_PARIS); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL]     dt = dt.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2547-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL] }
public void testPrint_chrono_and_zone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL]     dt = dt.withChronology(ISO_PARIS); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL]     dt = dt.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2547-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL] }
public void testPrint_chrono_and_zone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL]     dt = dt.withChronology(ISO_PARIS); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL]     dt = dt.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2547-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple3() { [EOL]     try { [EOL]         builder.appendPrefix(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatPrefixSimple3() { [EOL]     try { [EOL]         builder.appendPrefix(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatPrefixPlural2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hour:", "Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatSecondsWithMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatMillis() { [EOL]     PeriodFormatter f = builder.appendMillis().toFormatter(); [EOL]     assertEquals("8", f.print(PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatMillis3Digit() { [EOL]     PeriodFormatter f = builder.appendMillis3Digit().toFormatter(); [EOL]     assertEquals("008", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("000", f.print(p)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void test_wordBased_fr_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] }
public void test_wordBased_fr_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] }
public void test_wordBased_fr_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] }
public void test_wordBased_fr_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] }
public void test_wordBased_fr_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatSecondsWithMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSecondsWithMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSecondsWithMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSecondsWithMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSecondsWithMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSecondsWithMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSecondsWithMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] }
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_wordBased_fr_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] }
public void test_wordBased_fr_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] }
public void test_wordBased_fr_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testFormat_centuryOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("C").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "1", f.print(dt)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testDuration() { [EOL]     Duration test = new Duration(12345678L); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("PT12345.678S", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Duration.class, str)); [EOL] }
public void testDuration() { [EOL]     Duration test = new Duration(12345678L); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("PT12345.678S", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Duration.class, str)); [EOL] }
public void testFactory_standardMinutes_long() throws Throwable { [EOL]     Duration test = Duration.standardMinutes(1); [EOL]     assertEquals(60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardMinutes(2); [EOL]     assertEquals(2L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardMinutes(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardMinutes_long() throws Throwable { [EOL]     Duration test = Duration.standardMinutes(1); [EOL]     assertEquals(60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardMinutes(2); [EOL]     assertEquals(2L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardMinutes(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardMinutes_long() throws Throwable { [EOL]     Duration test = Duration.standardMinutes(1); [EOL]     assertEquals(60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardMinutes(2); [EOL]     assertEquals(2L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardMinutes(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardMinutes() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L - 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(60000L + 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L - 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L); [EOL]     assertEquals(Minutes.minutes(2), test.toStandardMinutes()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L + 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L); [EOL]     assertEquals(Minutes.minutes(-1), test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L - 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(60000L + 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L - 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L); [EOL]     assertEquals(Minutes.minutes(2), test.toStandardMinutes()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L + 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L); [EOL]     assertEquals(Minutes.minutes(-1), test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L - 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(60000L + 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L - 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L); [EOL]     assertEquals(Minutes.minutes(2), test.toStandardMinutes()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L + 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L); [EOL]     assertEquals(Minutes.minutes(-1), test.toStandardMinutes()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardMinutes() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L - 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(60000L + 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L - 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L); [EOL]     assertEquals(Minutes.minutes(2), test.toStandardMinutes()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L + 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L); [EOL]     assertEquals(Minutes.minutes(-1), test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L - 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(60000L + 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L - 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L); [EOL]     assertEquals(Minutes.minutes(2), test.toStandardMinutes()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L + 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L); [EOL]     assertEquals(Minutes.minutes(-1), test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L - 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(60000L + 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L - 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L); [EOL]     assertEquals(Minutes.minutes(2), test.toStandardMinutes()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L + 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L); [EOL]     assertEquals(Minutes.minutes(-1), test.toStandardMinutes()); [EOL] }
public void testMinus_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(8000L); [EOL]     assertEquals(123L - 8000L, result.getMillis()); [EOL] }
public void testWithDurationAdded_RD_int3() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(new Duration(8000L), -1); [EOL]     assertEquals((123L - 8000L), result.getMillis()); [EOL] }
public void testMinus_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(8000L); [EOL]     assertEquals(123L - 8000L, result.getMillis()); [EOL] }
public void testMinus_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(8000L); [EOL]     assertEquals(123L - 8000L, result.getMillis()); [EOL] }
public void testMinus_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(8000L); [EOL]     assertEquals(123L - 8000L, result.getMillis()); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testFormatParse_textHalfdayAM_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textHalfdayAM_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textHalfdayAM_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textHalfdayAM_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testIsFixed() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     assertEquals(false, zone.isFixed()); [EOL]     assertEquals(true, DateTimeZone.UTC.isFixed()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testIsFixed() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     assertEquals(false, zone.isFixed()); [EOL]     assertEquals(true, DateTimeZone.UTC.isFixed()); [EOL] }
public void testIsFixed() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     assertEquals(false, zone.isFixed()); [EOL]     assertEquals(true, DateTimeZone.UTC.isFixed()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void test_hashCode() { [EOL]     assertEquals(iField.hashCode(), iField.hashCode()); [EOL]     assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode()); [EOL]     DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90); [EOL]     assertEquals(true, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL] }
public void test_hashCode() { [EOL]     assertEquals(iField.hashCode(), iField.hashCode()); [EOL]     assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode()); [EOL]     DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90); [EOL]     assertEquals(true, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL] }
public void test_hashCode() { [EOL]     assertEquals(iField.hashCode(), iField.hashCode()); [EOL]     assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode()); [EOL]     DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90); [EOL]     assertEquals(true, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL] }
public void test_getMillis_int() { [EOL]     assertEquals(0, iField.getMillis(0)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234)); [EOL]     assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX)); [EOL] }
public void test_getMillis_int() { [EOL]     assertEquals(0, iField.getMillis(0)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234)); [EOL]     assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX)); [EOL] }
public void test_getMillis_int() { [EOL]     assertEquals(0, iField.getMillis(0)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234)); [EOL]     assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX)); [EOL] }
public void test_getMillis_int_long() { [EOL]     assertEquals(0L, iField.getMillis(0, 567L)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234, 567L)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234, 567L)); [EOL]     assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX, 567L)); [EOL] }
public void test_hashCode() { [EOL]     assertEquals(iField.hashCode(), iField.hashCode()); [EOL]     assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode()); [EOL]     DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90); [EOL]     assertEquals(true, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     Date date = new Date(123L); [EOL]     long millis = DateConverter.INSTANCE.getInstantMillis(date, JULIAN); [EOL]     assertEquals(123L, millis); [EOL]     assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(date, (Chronology) null)); [EOL] }
public void testToString() { [EOL]     assertEquals("Converter[java.util.Date]", DateConverter.INSTANCE.toString()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Months.monthsBetween(start, end1).getMonths()); [EOL]     assertEquals(0, Months.monthsBetween(start, start).getMonths()); [EOL]     assertEquals(0, Months.monthsBetween(end1, end1).getMonths()); [EOL]     assertEquals(-3, Months.monthsBetween(end1, start).getMonths()); [EOL]     assertEquals(6, Months.monthsBetween(start, end2).getMonths()); [EOL] }
public void testFactory_monthsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Months.monthsBetween(start, end1).getMonths()); [EOL]     assertEquals(0, Months.monthsBetween(start, start).getMonths()); [EOL]     assertEquals(0, Months.monthsBetween(end1, end1).getMonths()); [EOL]     assertEquals(-3, Months.monthsBetween(end1, start).getMonths()); [EOL]     assertEquals(6, Months.monthsBetween(start, end2).getMonths()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_monthsBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 9, 9); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 12, 9); [EOL]     assertEquals(3, Months.monthsBetween(start, end1).getMonths()); [EOL]     assertEquals(0, Months.monthsBetween(start, start).getMonths()); [EOL]     assertEquals(0, Months.monthsBetween(end1, end1).getMonths()); [EOL]     assertEquals(-3, Months.monthsBetween(end1, start).getMonths()); [EOL]     assertEquals(6, Months.monthsBetween(start, end2).getMonths()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_monthsBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 9, 9); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 12, 9); [EOL]     assertEquals(3, Months.monthsBetween(start, end1).getMonths()); [EOL]     assertEquals(0, Months.monthsBetween(start, start).getMonths()); [EOL]     assertEquals(0, Months.monthsBetween(end1, end1).getMonths()); [EOL]     assertEquals(-3, Months.monthsBetween(end1, start).getMonths()); [EOL]     assertEquals(6, Months.monthsBetween(start, end2).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testFactory_monthsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths()); [EOL]     assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths()); [EOL]     assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths()); [EOL]     assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths()); [EOL] }
public void testNegated() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(-12, test.negated().getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(-12, test.negated().getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(-12, test.negated().getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(-12, test.negated().getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Months.THREE.isGreaterThan(Months.TWO)); [EOL]     assertEquals(false, Months.THREE.isGreaterThan(Months.THREE)); [EOL]     assertEquals(false, Months.TWO.isGreaterThan(Months.THREE)); [EOL]     assertEquals(true, Months.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Months.months(-1).isGreaterThan(null)); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RD_RI3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadableDuration) null, dt); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RD_RI3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadableDuration) null, dt); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RD_RI3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadableDuration) null, dt); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP7() throws Throwable { [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Interval test = new Interval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP7() throws Throwable { [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Interval test = new Interval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testToInterval1() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval result = test.toInterval(); [EOL]     assertSame(test, result); [EOL] }
public void testWithEndMillis_long3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withEndMillis(TEST_TIME2); [EOL]     assertSame(base, test); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] }
public void testWithChronologyRetainFields_invalidInNewChrono() { [EOL]     YearMonth base = new YearMonth(2005, 13, COPTIC_UTC); [EOL]     try { [EOL]         base.withChronologyRetainFields(ISO_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_invalidInNewChrono() { [EOL]     YearMonth base = new YearMonth(2005, 13, COPTIC_UTC); [EOL]     try { [EOL]         base.withChronologyRetainFields(ISO_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_invalidInNewChrono() { [EOL]     YearMonth base = new YearMonth(2005, 13, COPTIC_UTC); [EOL]     try { [EOL]         base.withChronologyRetainFields(ISO_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_invalidInNewChrono() { [EOL]     YearMonth base = new YearMonth(2005, 13, COPTIC_UTC); [EOL]     try { [EOL]         base.withChronologyRetainFields(ISO_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_invalidInNewChrono() { [EOL]     YearMonth base = new YearMonth(2005, 13, COPTIC_UTC); [EOL]     try { [EOL]         base.withChronologyRetainFields(ISO_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     YearMonth test = new YearMonth(2005, 6); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_String() { [EOL]     YearMonth test = new YearMonth(2002, 6); [EOL]     assertEquals("2002 \ufffd\ufffd", test.toString("yyyy HH")); [EOL]     assertEquals("2002-06", test.toString((String) null)); [EOL] }
public void testToString_String() { [EOL]     YearMonth test = new YearMonth(2002, 6); [EOL]     assertEquals("2002 \ufffd\ufffd", test.toString("yyyy HH")); [EOL]     assertEquals("2002-06", test.toString((String) null)); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12); [EOL] }
public void testPropertyAddMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12); [EOL] }
public void test_convertText() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0, field.convertText("0", null)); [EOL]     assertEquals(29, field.convertText("29", null)); [EOL]     try { [EOL]         field.convertText("2A", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field.convertText(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_getAsText_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("29", field.getAsText(60L * 29)); [EOL] }
public void test_getAsText_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("29", field.getAsText(60L * 29)); [EOL] }
public void test_getAsText_int_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("80", field.getAsText(80, Locale.ENGLISH)); [EOL]     assertEquals("80", field.getAsText(80, null)); [EOL] }
public void test_getAsText_int_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("80", field.getAsText(80, Locale.ENGLISH)); [EOL]     assertEquals("80", field.getAsText(80, null)); [EOL] }
public void test_getAsText_int_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("80", field.getAsText(80, Locale.ENGLISH)); [EOL]     assertEquals("80", field.getAsText(80, null)); [EOL] }
public void test_getAsShortText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] }
public void test_getAsShortText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] }
public void test_getAsShortText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] }
public void test_getAsShortText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] }
public void test_getAsShortText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] }
public void test_getAsShortText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] }
public void test_getAsShortText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] }
public void test_add_long_long() { [EOL]     MockCountingDurationField.add_long = 0; [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(61, field.add(1L, 1L)); [EOL]     assertEquals(1, MockCountingDurationField.add_long); [EOL] }
public void test_set_long_String() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(1000, field.set(0L, "0")); [EOL]     assertEquals(1029, field.set(0L, "29")); [EOL] }
public void test_convertText() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0, field.convertText("0", null)); [EOL]     assertEquals(29, field.convertText("29", null)); [EOL]     try { [EOL]         field.convertText("2A", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field.convertText(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_convertText() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0, field.convertText("0", null)); [EOL]     assertEquals(29, field.convertText("29", null)); [EOL]     try { [EOL]         field.convertText("2A", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field.convertText(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_getMinimumValue_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0, field.getMinimumValue(0L)); [EOL] }
public void test_roundHalfCeiling_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfCeiling(0L)); [EOL]     assertEquals(0L, field.roundHalfCeiling(29L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(30L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(31L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(60L)); [EOL] }
public void test_roundHalfCeiling_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfCeiling(0L)); [EOL]     assertEquals(0L, field.roundHalfCeiling(29L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(30L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(31L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(60L)); [EOL] }
public void test_roundHalfCeiling_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfCeiling(0L)); [EOL]     assertEquals(0L, field.roundHalfCeiling(29L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(30L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(31L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(60L)); [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, JulianChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, JulianChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, JulianChronology.getInstance(null).getZone()); [EOL]     assertSame(JulianChronology.class, JulianChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testSerializedJulianChronology() throws Exception { [EOL]     JulianChronology test = JulianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "JulianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedJulianChronology() throws Exception { [EOL]     JulianChronology test = JulianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "JulianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedJulianChronology() throws Exception { [EOL]     JulianChronology test = JulianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "JulianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedJulianChronology() throws Exception { [EOL]     JulianChronology test = JulianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "JulianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedJulianChronology() throws Exception { [EOL]     JulianChronology test = JulianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "JulianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedJulianChronology() throws Exception { [EOL]     JulianChronology test = JulianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "JulianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testDurationFields() { [EOL]     final BuddhistChronology buddhist = BuddhistChronology.getInstance(); [EOL]     assertEquals("eras", buddhist.eras().getName()); [EOL]     assertEquals("centuries", buddhist.centuries().getName()); [EOL]     assertEquals("years", buddhist.years().getName()); [EOL]     assertEquals("weekyears", buddhist.weekyears().getName()); [EOL]     assertEquals("months", buddhist.months().getName()); [EOL]     assertEquals("weeks", buddhist.weeks().getName()); [EOL]     assertEquals("days", buddhist.days().getName()); [EOL]     assertEquals("halfdays", GregorianChronology.getInstance().halfdays().getName()); [EOL]     assertEquals("hours", buddhist.hours().getName()); [EOL]     assertEquals("minutes", buddhist.minutes().getName()); [EOL]     assertEquals("seconds", buddhist.seconds().getName()); [EOL]     assertEquals("millis", buddhist.millis().getName()); [EOL]     assertEquals(false, buddhist.eras().isSupported()); [EOL]     assertEquals(true, buddhist.centuries().isSupported()); [EOL]     assertEquals(true, buddhist.years().isSupported()); [EOL]     assertEquals(true, buddhist.weekyears().isSupported()); [EOL]     assertEquals(true, buddhist.months().isSupported()); [EOL]     assertEquals(true, buddhist.weeks().isSupported()); [EOL]     assertEquals(true, buddhist.days().isSupported()); [EOL]     assertEquals(true, buddhist.halfdays().isSupported()); [EOL]     assertEquals(true, buddhist.hours().isSupported()); [EOL]     assertEquals(true, buddhist.minutes().isSupported()); [EOL]     assertEquals(true, buddhist.seconds().isSupported()); [EOL]     assertEquals(true, buddhist.millis().isSupported()); [EOL]     assertEquals(false, buddhist.centuries().isPrecise()); [EOL]     assertEquals(false, buddhist.years().isPrecise()); [EOL]     assertEquals(false, buddhist.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhist.months().isPrecise()); [EOL]     assertEquals(false, buddhist.weeks().isPrecise()); [EOL]     assertEquals(false, buddhist.days().isPrecise()); [EOL]     assertEquals(false, buddhist.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhist.hours().isPrecise()); [EOL]     assertEquals(true, buddhist.minutes().isPrecise()); [EOL]     assertEquals(true, buddhist.seconds().isPrecise()); [EOL]     assertEquals(true, buddhist.millis().isPrecise()); [EOL]     final BuddhistChronology buddhistUTC = BuddhistChronology.getInstanceUTC(); [EOL]     assertEquals(false, buddhistUTC.centuries().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.years().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.months().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.weeks().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.days().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.hours().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.minutes().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.seconds().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final BuddhistChronology buddhistGMT = BuddhistChronology.getInstance(gmt); [EOL]     assertEquals(false, buddhistGMT.centuries().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.years().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.months().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.weeks().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.days().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.hours().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.minutes().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.seconds().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final BuddhistChronology buddhist = BuddhistChronology.getInstance(); [EOL]     assertEquals("eras", buddhist.eras().getName()); [EOL]     assertEquals("centuries", buddhist.centuries().getName()); [EOL]     assertEquals("years", buddhist.years().getName()); [EOL]     assertEquals("weekyears", buddhist.weekyears().getName()); [EOL]     assertEquals("months", buddhist.months().getName()); [EOL]     assertEquals("weeks", buddhist.weeks().getName()); [EOL]     assertEquals("days", buddhist.days().getName()); [EOL]     assertEquals("halfdays", GregorianChronology.getInstance().halfdays().getName()); [EOL]     assertEquals("hours", buddhist.hours().getName()); [EOL]     assertEquals("minutes", buddhist.minutes().getName()); [EOL]     assertEquals("seconds", buddhist.seconds().getName()); [EOL]     assertEquals("millis", buddhist.millis().getName()); [EOL]     assertEquals(false, buddhist.eras().isSupported()); [EOL]     assertEquals(true, buddhist.centuries().isSupported()); [EOL]     assertEquals(true, buddhist.years().isSupported()); [EOL]     assertEquals(true, buddhist.weekyears().isSupported()); [EOL]     assertEquals(true, buddhist.months().isSupported()); [EOL]     assertEquals(true, buddhist.weeks().isSupported()); [EOL]     assertEquals(true, buddhist.days().isSupported()); [EOL]     assertEquals(true, buddhist.halfdays().isSupported()); [EOL]     assertEquals(true, buddhist.hours().isSupported()); [EOL]     assertEquals(true, buddhist.minutes().isSupported()); [EOL]     assertEquals(true, buddhist.seconds().isSupported()); [EOL]     assertEquals(true, buddhist.millis().isSupported()); [EOL]     assertEquals(false, buddhist.centuries().isPrecise()); [EOL]     assertEquals(false, buddhist.years().isPrecise()); [EOL]     assertEquals(false, buddhist.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhist.months().isPrecise()); [EOL]     assertEquals(false, buddhist.weeks().isPrecise()); [EOL]     assertEquals(false, buddhist.days().isPrecise()); [EOL]     assertEquals(false, buddhist.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhist.hours().isPrecise()); [EOL]     assertEquals(true, buddhist.minutes().isPrecise()); [EOL]     assertEquals(true, buddhist.seconds().isPrecise()); [EOL]     assertEquals(true, buddhist.millis().isPrecise()); [EOL]     final BuddhistChronology buddhistUTC = BuddhistChronology.getInstanceUTC(); [EOL]     assertEquals(false, buddhistUTC.centuries().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.years().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.months().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.weeks().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.days().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.hours().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.minutes().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.seconds().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final BuddhistChronology buddhistGMT = BuddhistChronology.getInstance(gmt); [EOL]     assertEquals(false, buddhistGMT.centuries().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.years().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.months().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.weeks().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.days().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.hours().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.minutes().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.seconds().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final BuddhistChronology buddhist = BuddhistChronology.getInstance(); [EOL]     assertEquals("eras", buddhist.eras().getName()); [EOL]     assertEquals("centuries", buddhist.centuries().getName()); [EOL]     assertEquals("years", buddhist.years().getName()); [EOL]     assertEquals("weekyears", buddhist.weekyears().getName()); [EOL]     assertEquals("months", buddhist.months().getName()); [EOL]     assertEquals("weeks", buddhist.weeks().getName()); [EOL]     assertEquals("days", buddhist.days().getName()); [EOL]     assertEquals("halfdays", GregorianChronology.getInstance().halfdays().getName()); [EOL]     assertEquals("hours", buddhist.hours().getName()); [EOL]     assertEquals("minutes", buddhist.minutes().getName()); [EOL]     assertEquals("seconds", buddhist.seconds().getName()); [EOL]     assertEquals("millis", buddhist.millis().getName()); [EOL]     assertEquals(false, buddhist.eras().isSupported()); [EOL]     assertEquals(true, buddhist.centuries().isSupported()); [EOL]     assertEquals(true, buddhist.years().isSupported()); [EOL]     assertEquals(true, buddhist.weekyears().isSupported()); [EOL]     assertEquals(true, buddhist.months().isSupported()); [EOL]     assertEquals(true, buddhist.weeks().isSupported()); [EOL]     assertEquals(true, buddhist.days().isSupported()); [EOL]     assertEquals(true, buddhist.halfdays().isSupported()); [EOL]     assertEquals(true, buddhist.hours().isSupported()); [EOL]     assertEquals(true, buddhist.minutes().isSupported()); [EOL]     assertEquals(true, buddhist.seconds().isSupported()); [EOL]     assertEquals(true, buddhist.millis().isSupported()); [EOL]     assertEquals(false, buddhist.centuries().isPrecise()); [EOL]     assertEquals(false, buddhist.years().isPrecise()); [EOL]     assertEquals(false, buddhist.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhist.months().isPrecise()); [EOL]     assertEquals(false, buddhist.weeks().isPrecise()); [EOL]     assertEquals(false, buddhist.days().isPrecise()); [EOL]     assertEquals(false, buddhist.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhist.hours().isPrecise()); [EOL]     assertEquals(true, buddhist.minutes().isPrecise()); [EOL]     assertEquals(true, buddhist.seconds().isPrecise()); [EOL]     assertEquals(true, buddhist.millis().isPrecise()); [EOL]     final BuddhistChronology buddhistUTC = BuddhistChronology.getInstanceUTC(); [EOL]     assertEquals(false, buddhistUTC.centuries().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.years().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.months().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.weeks().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.days().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.hours().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.minutes().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.seconds().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final BuddhistChronology buddhistGMT = BuddhistChronology.getInstance(gmt); [EOL]     assertEquals(false, buddhistGMT.centuries().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.years().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.months().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.weeks().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.days().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.hours().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.minutes().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.seconds().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.millis().isPrecise()); [EOL] }
public void testToString() { [EOL]     assertEquals("BuddhistChronology[Europe/London]", BuddhistChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("BuddhistChronology[Asia/Tokyo]", BuddhistChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/London]", BuddhistChronology.getInstance().toString()); [EOL]     assertEquals("BuddhistChronology[UTC]", BuddhistChronology.getInstanceUTC().toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("BuddhistChronology[Europe/London]", BuddhistChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("BuddhistChronology[Asia/Tokyo]", BuddhistChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/London]", BuddhistChronology.getInstance().toString()); [EOL]     assertEquals("BuddhistChronology[UTC]", BuddhistChronology.getInstanceUTC().toString()); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     MonthDay test = new MonthDay(3, 6); [EOL]     MonthDay copy = test.monthOfYear().addToCopy(9); [EOL]     check(test, 3, 6); [EOL]     check(copy, 12, 6); [EOL]     copy = test.monthOfYear().addToCopy(0); [EOL]     check(copy, 3, 6); [EOL]     check(test, 3, 6); [EOL]     copy = test.monthOfYear().addToCopy(-3); [EOL]     check(copy, 12, 6); [EOL]     check(test, 3, 6); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     MonthDay test = new MonthDay(3, 6); [EOL]     MonthDay copy = test.monthOfYear().addToCopy(9); [EOL]     check(test, 3, 6); [EOL]     check(copy, 12, 6); [EOL]     copy = test.monthOfYear().addToCopy(0); [EOL]     check(copy, 3, 6); [EOL]     check(test, 3, 6); [EOL]     copy = test.monthOfYear().addToCopy(-3); [EOL]     check(copy, 12, 6); [EOL]     check(test, 3, 6); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     MonthDay test = new MonthDay(3, 6); [EOL]     MonthDay copy = test.monthOfYear().addToCopy(9); [EOL]     check(test, 3, 6); [EOL]     check(copy, 12, 6); [EOL]     copy = test.monthOfYear().addToCopy(0); [EOL]     check(copy, 3, 6); [EOL]     check(test, 3, 6); [EOL]     copy = test.monthOfYear().addToCopy(-3); [EOL]     check(copy, 12, 6); [EOL]     check(test, 3, 6); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     MonthDay test = new MonthDay(3, 6); [EOL]     MonthDay copy = test.monthOfYear().addToCopy(9); [EOL]     check(test, 3, 6); [EOL]     check(copy, 12, 6); [EOL]     copy = test.monthOfYear().addToCopy(0); [EOL]     check(copy, 3, 6); [EOL]     check(test, 3, 6); [EOL]     copy = test.monthOfYear().addToCopy(-3); [EOL]     check(copy, 12, 6); [EOL]     check(test, 3, 6); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testConstructor_TypeArray_intArray_Chrono() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 33 }; [EOL]     Partial test = new Partial(types, values, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(2, test.size()); [EOL]     assertEquals(2005, test.getValue(0)); [EOL]     assertEquals(2005, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(33, test.getValue(1)); [EOL]     assertEquals(33, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, Arrays.equals(test.getFieldTypes(), types)); [EOL]     assertEquals(true, Arrays.equals(test.getValues(), values)); [EOL] }
public void testConstructor_TypeArray_intArray_Chrono() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 33 }; [EOL]     Partial test = new Partial(types, values, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(2, test.size()); [EOL]     assertEquals(2005, test.getValue(0)); [EOL]     assertEquals(2005, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(33, test.getValue(1)); [EOL]     assertEquals(33, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, Arrays.equals(test.getFieldTypes(), types)); [EOL]     assertEquals(true, Arrays.equals(test.getValues(), values)); [EOL] }
public void testConstructor_TypeArray_intArray_Chrono() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 33 }; [EOL]     Partial test = new Partial(types, values, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(2, test.size()); [EOL]     assertEquals(2005, test.getValue(0)); [EOL]     assertEquals(2005, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(33, test.getValue(1)); [EOL]     assertEquals(33, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, Arrays.equals(test.getFieldTypes(), types)); [EOL]     assertEquals(true, Arrays.equals(test.getValues(), values)); [EOL] }
public void testNegated() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(-12, test.negated().getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(-12, test.negated().getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(-12, test.negated().getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(-12, test.negated().getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testSafeMultiplyLongInt() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3)); [EOL]     assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongInt() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3)); [EOL]     assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongInt() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3)); [EOL]     assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongInt() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3)); [EOL]     assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongInt() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3)); [EOL]     assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongInt() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3)); [EOL]     assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void test_getMaximumShortTextLength_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH)); [EOL] }
public void test_getMaximumShortTextLength_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH)); [EOL] }
public void test_getMaximumShortTextLength_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH)); [EOL] }
public void testGetPartialConverter() { [EOL]     PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay()); [EOL]     assertEquals(ReadablePartial.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new DateTime()); [EOL]     assertEquals(ReadableInstant.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new Date()); [EOL]     assertEquals(Date.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new GregorianCalendar()); [EOL]     assertEquals(Calendar.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPartialConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPartialConverter() { [EOL]     PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay()); [EOL]     assertEquals(ReadablePartial.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new DateTime()); [EOL]     assertEquals(ReadableInstant.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new Date()); [EOL]     assertEquals(Date.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new GregorianCalendar()); [EOL]     assertEquals(Calendar.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPartialConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPartialConverter() { [EOL]     PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay()); [EOL]     assertEquals(ReadablePartial.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new DateTime()); [EOL]     assertEquals(ReadableInstant.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new Date()); [EOL]     assertEquals(Date.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new GregorianCalendar()); [EOL]     assertEquals(Calendar.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPartialConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testRemoveDurationConverter3() { [EOL]     DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testRemoveDurationConverter3() { [EOL]     DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testRemoveDurationConverter3() { [EOL]     DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testGetIntervalConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removeIntervalConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getIntervalConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testGetIntervalConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removeIntervalConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getIntervalConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization2() throws Exception { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(c); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeComparator result = (DateTimeComparator) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(c, result); [EOL] }
public void testFactory_standardPeriodIn_RPeriod() { [EOL]     assertEquals(0, Single.standardPeriodIn((ReadablePeriod) null, DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(0, Single.standardPeriodIn(Period.ZERO, DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(1, Single.standardPeriodIn(new Period(0, 0, 0, 1, 0, 0, 0, 0), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(123, Single.standardPeriodIn(Period.days(123), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(-987, Single.standardPeriodIn(Period.days(-987), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(1, Single.standardPeriodIn(Period.hours(47), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(2, Single.standardPeriodIn(Period.hours(48), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(2, Single.standardPeriodIn(Period.hours(49), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(14, Single.standardPeriodIn(Period.weeks(2), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     try { [EOL]         Single.standardPeriodIn(Period.months(1), DateTimeConstants.MILLIS_PER_DAY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyEqualsHashCodeStrict() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeStrict() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeStrict() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeStrict() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerialization() throws Exception { [EOL]     Seconds test = Seconds.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Seconds result = (Seconds) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     Seconds test = Seconds.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Seconds result = (Seconds) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     Seconds test = Seconds.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Seconds result = (Seconds) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     Seconds test = Seconds.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Seconds result = (Seconds) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     Seconds test = Seconds.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Seconds result = (Seconds) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     Seconds test = Seconds.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Seconds result = (Seconds) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     Seconds test = Seconds.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Seconds result = (Seconds) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testSerialization() throws Exception { [EOL]     Seconds test = Seconds.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Seconds result = (Seconds) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testToStandardDays() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] }
public void testToStandardDays() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] }
public void testToStandardDays() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] }
public void testToStandardDays() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] }
public void testToStandardHours() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 2); [EOL]     Hours expected = Hours.hours(2); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 2); [EOL]     Hours expected = Hours.hours(2); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 2); [EOL]     Hours expected = Hours.hours(2); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 2); [EOL]     Hours expected = Hours.hours(2); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 2); [EOL]     Hours expected = Hours.hours(2); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardDuration() { [EOL]     Seconds test = Seconds.seconds(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_SECOND); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_SECOND); [EOL]     assertEquals(expected, Seconds.MAX_VALUE.toStandardDuration()); [EOL] }
public void testToStandardDuration() { [EOL]     Seconds test = Seconds.seconds(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_SECOND); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_SECOND); [EOL]     assertEquals(expected, Seconds.MAX_VALUE.toStandardDuration()); [EOL] }
public void testToStandardDuration() { [EOL]     Seconds test = Seconds.seconds(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_SECOND); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_SECOND); [EOL]     assertEquals(expected, Seconds.MAX_VALUE.toStandardDuration()); [EOL] }
public void testPlus_Seconds() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds test3 = Seconds.seconds(3); [EOL]     Seconds result = test2.plus(test3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(3, test3.getSeconds()); [EOL]     assertEquals(5, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus(Seconds.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus((Seconds) null).getSeconds()); [EOL]     try { [EOL]         Seconds.MAX_VALUE.plus(Seconds.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Seconds() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds test3 = Seconds.seconds(3); [EOL]     Seconds result = test2.plus(test3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(3, test3.getSeconds()); [EOL]     assertEquals(5, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus(Seconds.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus((Seconds) null).getSeconds()); [EOL]     try { [EOL]         Seconds.MAX_VALUE.plus(Seconds.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Seconds test = Seconds.seconds(2); [EOL]     assertEquals(6, test.multipliedBy(3).getSeconds()); [EOL]     assertEquals(2, test.getSeconds()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getSeconds()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Seconds halfMax = Seconds.seconds(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Seconds test = Seconds.seconds(2); [EOL]     assertEquals(6, test.multipliedBy(3).getSeconds()); [EOL]     assertEquals(2, test.getSeconds()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getSeconds()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Seconds halfMax = Seconds.seconds(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Seconds test = Seconds.seconds(2); [EOL]     assertEquals(6, test.multipliedBy(3).getSeconds()); [EOL]     assertEquals(2, test.getSeconds()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getSeconds()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Seconds halfMax = Seconds.seconds(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Seconds test = Seconds.seconds(2); [EOL]     assertEquals(6, test.multipliedBy(3).getSeconds()); [EOL]     assertEquals(2, test.getSeconds()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getSeconds()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Seconds halfMax = Seconds.seconds(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Seconds test = Seconds.seconds(12); [EOL]     assertEquals(6, test.dividedBy(2).getSeconds()); [EOL]     assertEquals(12, test.getSeconds()); [EOL]     assertEquals(4, test.dividedBy(3).getSeconds()); [EOL]     assertEquals(3, test.dividedBy(4).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(5).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(6).getSeconds()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Seconds.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Seconds test = Seconds.seconds(12); [EOL]     assertEquals(6, test.dividedBy(2).getSeconds()); [EOL]     assertEquals(12, test.getSeconds()); [EOL]     assertEquals(4, test.dividedBy(3).getSeconds()); [EOL]     assertEquals(3, test.dividedBy(4).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(5).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(6).getSeconds()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Seconds.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Seconds test = Seconds.seconds(12); [EOL]     assertEquals(6, test.dividedBy(2).getSeconds()); [EOL]     assertEquals(12, test.getSeconds()); [EOL]     assertEquals(4, test.dividedBy(3).getSeconds()); [EOL]     assertEquals(3, test.dividedBy(4).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(5).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(6).getSeconds()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Seconds.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Seconds test = Seconds.seconds(12); [EOL]     assertEquals(6, test.dividedBy(2).getSeconds()); [EOL]     assertEquals(12, test.getSeconds()); [EOL]     assertEquals(4, test.dividedBy(3).getSeconds()); [EOL]     assertEquals(3, test.dividedBy(4).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(5).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(6).getSeconds()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Seconds.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Seconds test = Seconds.seconds(12); [EOL]     assertEquals(-12, test.negated().getSeconds()); [EOL]     assertEquals(12, test.getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Seconds test = Seconds.seconds(12); [EOL]     assertEquals(-12, test.negated().getSeconds()); [EOL]     assertEquals(12, test.getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Seconds test = Seconds.seconds(12); [EOL]     assertEquals(-12, test.negated().getSeconds()); [EOL]     assertEquals(12, test.getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Seconds.THREE.isGreaterThan(Seconds.TWO)); [EOL]     assertEquals(false, Seconds.THREE.isGreaterThan(Seconds.THREE)); [EOL]     assertEquals(false, Seconds.TWO.isGreaterThan(Seconds.THREE)); [EOL]     assertEquals(true, Seconds.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Seconds.seconds(-1).isGreaterThan(null)); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestIslamicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ISLAMIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ISLAMIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int dayOfYearLen = dayOfYear.getMaximumValue(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 12) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AH", era.getAsText(millis)); [EOL]         assertEquals("AH", era.getAsShortText(millis)); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         boolean leap = ((11 * yearValue + 14) % 30) < 11; [EOL]         assertEquals(leap, year.isLeap(millis)); [EOL]         switch(monthValue) { [EOL]             case 1: [EOL]             case 3: [EOL]             case 5: [EOL]             case 7: [EOL]             case 9: [EOL]             case 11: [EOL]                 assertEquals(30, monthLen); [EOL]                 break; [EOL]             case 2: [EOL]             case 4: [EOL]             case 6: [EOL]             case 8: [EOL]             case 10: [EOL]                 assertEquals(29, monthLen); [EOL]                 break; [EOL]             case 12: [EOL]                 assertEquals((leap ? 30 : 29), monthLen); [EOL]                 break; [EOL]         } [EOL]         assertEquals((leap ? 355 : 354), dayOfYearLen); [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay > monthLen) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]             if (expectedMonth == 13) { [EOL]                 expectedMonth = 1; [EOL]                 expectedDOY = 1; [EOL]                 expectedYear++; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestIslamicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ISLAMIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ISLAMIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int dayOfYearLen = dayOfYear.getMaximumValue(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 12) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AH", era.getAsText(millis)); [EOL]         assertEquals("AH", era.getAsShortText(millis)); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         boolean leap = ((11 * yearValue + 14) % 30) < 11; [EOL]         assertEquals(leap, year.isLeap(millis)); [EOL]         switch(monthValue) { [EOL]             case 1: [EOL]             case 3: [EOL]             case 5: [EOL]             case 7: [EOL]             case 9: [EOL]             case 11: [EOL]                 assertEquals(30, monthLen); [EOL]                 break; [EOL]             case 2: [EOL]             case 4: [EOL]             case 6: [EOL]             case 8: [EOL]             case 10: [EOL]                 assertEquals(29, monthLen); [EOL]                 break; [EOL]             case 12: [EOL]                 assertEquals((leap ? 30 : 29), monthLen); [EOL]                 break; [EOL]         } [EOL]         assertEquals((leap ? 355 : 354), dayOfYearLen); [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay > monthLen) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]             if (expectedMonth == 13) { [EOL]                 expectedMonth = 1; [EOL]                 expectedDOY = 1; [EOL]                 expectedYear++; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestIslamicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ISLAMIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ISLAMIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int dayOfYearLen = dayOfYear.getMaximumValue(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 12) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AH", era.getAsText(millis)); [EOL]         assertEquals("AH", era.getAsShortText(millis)); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         boolean leap = ((11 * yearValue + 14) % 30) < 11; [EOL]         assertEquals(leap, year.isLeap(millis)); [EOL]         switch(monthValue) { [EOL]             case 1: [EOL]             case 3: [EOL]             case 5: [EOL]             case 7: [EOL]             case 9: [EOL]             case 11: [EOL]                 assertEquals(30, monthLen); [EOL]                 break; [EOL]             case 2: [EOL]             case 4: [EOL]             case 6: [EOL]             case 8: [EOL]             case 10: [EOL]                 assertEquals(29, monthLen); [EOL]                 break; [EOL]             case 12: [EOL]                 assertEquals((leap ? 30 : 29), monthLen); [EOL]                 break; [EOL]         } [EOL]         assertEquals((leap ? 355 : 354), dayOfYearLen); [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay > monthLen) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]             if (expectedMonth == 13) { [EOL]                 expectedMonth = 1; [EOL]                 expectedDOY = 1; [EOL]                 expectedYear++; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestIslamicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ISLAMIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ISLAMIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int dayOfYearLen = dayOfYear.getMaximumValue(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 12) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AH", era.getAsText(millis)); [EOL]         assertEquals("AH", era.getAsShortText(millis)); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         boolean leap = ((11 * yearValue + 14) % 30) < 11; [EOL]         assertEquals(leap, year.isLeap(millis)); [EOL]         switch(monthValue) { [EOL]             case 1: [EOL]             case 3: [EOL]             case 5: [EOL]             case 7: [EOL]             case 9: [EOL]             case 11: [EOL]                 assertEquals(30, monthLen); [EOL]                 break; [EOL]             case 2: [EOL]             case 4: [EOL]             case 6: [EOL]             case 8: [EOL]             case 10: [EOL]                 assertEquals(29, monthLen); [EOL]                 break; [EOL]             case 12: [EOL]                 assertEquals((leap ? 30 : 29), monthLen); [EOL]                 break; [EOL]         } [EOL]         assertEquals((leap ? 355 : 354), dayOfYearLen); [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay > monthLen) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]             if (expectedMonth == 13) { [EOL]                 expectedMonth = 1; [EOL]                 expectedDOY = 1; [EOL]                 expectedYear++; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testToString_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("2002 01", test.toString("yyyy HH")); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString((String) null)); [EOL] }
public void testToString_String() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME_NOW); [EOL]     assertEquals("2002 01", test.toString("yyyy HH")); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString((String) null)); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMinus_Weeks() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks test3 = Weeks.weeks(3); [EOL]     Weeks result = test2.minus(test3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(3, test3.getWeeks()); [EOL]     assertEquals(-1, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus(Weeks.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus((Weeks) null).getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.minus(Weeks.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Weeks() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks test3 = Weeks.weeks(3); [EOL]     Weeks result = test2.minus(test3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(3, test3.getWeeks()); [EOL]     assertEquals(-1, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus(Weeks.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus((Weeks) null).getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.minus(Weeks.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(6, test.dividedBy(2).getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     assertEquals(4, test.dividedBy(3).getWeeks()); [EOL]     assertEquals(3, test.dividedBy(4).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(5).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(6).getWeeks()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Weeks.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(6, test.dividedBy(2).getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     assertEquals(4, test.dividedBy(3).getWeeks()); [EOL]     assertEquals(3, test.dividedBy(4).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(5).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(6).getWeeks()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Weeks.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(6, test.dividedBy(2).getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     assertEquals(4, test.dividedBy(3).getWeeks()); [EOL]     assertEquals(3, test.dividedBy(4).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(5).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(6).getWeeks()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Weeks.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(6, test.dividedBy(2).getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     assertEquals(4, test.dividedBy(3).getWeeks()); [EOL]     assertEquals(3, test.dividedBy(4).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(5).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(6).getWeeks()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Weeks.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.ONE.isLessThan(null)); [EOL]     assertEquals(true, Weeks.weeks(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.ONE.isLessThan(null)); [EOL]     assertEquals(true, Weeks.weeks(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.ONE.isLessThan(null)); [EOL]     assertEquals(true, Weeks.weeks(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.ONE.isLessThan(null)); [EOL]     assertEquals(true, Weeks.weeks(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.ONE.isLessThan(null)); [EOL]     assertEquals(true, Weeks.weeks(-1).isLessThan(null)); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_long_nullDateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME1, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testConstructor_long_nullDateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME1, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testGetIntervalChronology_RInterval() { [EOL]     Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null)); [EOL]     MutableInterval ai = new MutableInterval() { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai)); [EOL] }
public void testWithFieldAdded2() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded2() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded2() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlus_long() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plus(123456789L); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void test_DateTime_plusDayMidGap_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString()); [EOL] }
public void test_DateTime_plusDayMidGap_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString()); [EOL] }
public void test_DateTime_plusDayMidGap_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString()); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusWeeks(1); [EOL]     DateTime expected = new DateTime(2002, 4, 26, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusWeeks(1); [EOL]     DateTime expected = new DateTime(2002, 4, 26, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusWeeks(1); [EOL]     DateTime expected = new DateTime(2002, 4, 26, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusSeconds(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 2, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusSeconds(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 2, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusSeconds(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 2, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMillis(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMillis(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMillis(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testProperty() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToTimeOfDay() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     TimeOfDay test = base.toTimeOfDay(); [EOL]     assertEquals(new TimeOfDay(TEST_TIME1, COPTIC_DEFAULT), test); [EOL] }
public void testPropertyGetYearOfCentury() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField()); [EOL]     assertEquals("yearOfCentury", test.yearOfCentury().getName()); [EOL]     assertEquals("Property[yearOfCentury]", test.yearOfCentury().toString()); [EOL]     assertSame(test, test.yearOfCentury().getDateTime()); [EOL]     assertEquals(4, test.yearOfCentury().get()); [EOL]     assertEquals("4", test.yearOfCentury().getAsString()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText(Locale.FRENCH)); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField()); [EOL]     assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().weekyear(), test.weekyear().getField()); [EOL]     assertEquals("weekyear", test.weekyear().getName()); [EOL]     assertEquals("Property[weekyear]", test.weekyear().toString()); [EOL]     assertSame(test, test.weekyear().getDateTime()); [EOL]     assertEquals(2004, test.weekyear().get()); [EOL]     assertEquals("2004", test.weekyear().getAsString()); [EOL]     assertEquals("2004", test.weekyear().getAsText()); [EOL]     assertEquals("2004", test.weekyear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("2004", test.weekyear().getAsShortText()); [EOL]     assertEquals("2004", test.weekyear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().weekyears(), test.weekyear().getDurationField()); [EOL]     assertEquals(null, test.weekyear().getRangeDurationField()); [EOL]     assertEquals(9, test.weekyear().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.weekyear().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyCompareToDayOfYear() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.monthOfYear().addToCopy(6); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     assertEquals("2005-01-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     assertEquals("2004-01-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     assertEquals("2003-12-09T00:00:00.000Z", copy.toString()); [EOL]     test = new DateTime(2004, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     assertEquals("2004-01-31T00:00:00.000Z", test.toString()); [EOL]     assertEquals("2004-02-29T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     assertEquals("2004-03-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     assertEquals("2004-04-30T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2003, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     assertEquals("2003-02-28T00:00:00.000Z", copy.toString()); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.monthOfYear().addToCopy(6); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     assertEquals("2005-01-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     assertEquals("2004-01-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     assertEquals("2003-12-09T00:00:00.000Z", copy.toString()); [EOL]     test = new DateTime(2004, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     assertEquals("2004-01-31T00:00:00.000Z", test.toString()); [EOL]     assertEquals("2004-02-29T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     assertEquals("2004-03-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     assertEquals("2004-04-30T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2003, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     assertEquals("2003-02-28T00:00:00.000Z", copy.toString()); [EOL] }
public void testPropertyAddMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.monthOfYear().addToCopy(6); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     assertEquals("2005-01-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     assertEquals("2004-01-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     assertEquals("2003-12-09T00:00:00.000Z", copy.toString()); [EOL]     test = new DateTime(2004, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     assertEquals("2004-01-31T00:00:00.000Z", test.toString()); [EOL]     assertEquals("2004-02-29T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     assertEquals("2004-03-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     assertEquals("2004-04-30T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2003, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     assertEquals("2003-02-28T00:00:00.000Z", copy.toString()); [EOL] }
public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseInto_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     MutablePeriod result = new MutablePeriod(); [EOL]     assertEquals(20, f.parseInto(result, "P1Y2M3W4DT5H6M7.008S", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         f.parseInto(null, "P1Y2M3W4DT5H6M7.008S", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, f.parseInto(result, "ABC", 0)); [EOL] }
public void testParseInto_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     MutablePeriod result = new MutablePeriod(); [EOL]     assertEquals(20, f.parseInto(result, "P1Y2M3W4DT5H6M7.008S", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         f.parseInto(null, "P1Y2M3W4DT5H6M7.008S", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, f.parseInto(result, "ABC", 0)); [EOL] }
public void testParseInto_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     MutablePeriod result = new MutablePeriod(); [EOL]     assertEquals(20, f.parseInto(result, "P1Y2M3W4DT5H6M7.008S", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         f.parseInto(null, "P1Y2M3W4DT5H6M7.008S", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, f.parseInto(result, "ABC", 0)); [EOL] }
public void testParseInto_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     MutablePeriod result = new MutablePeriod(); [EOL]     assertEquals(20, f.parseInto(result, "P1Y2M3W4DT5H6M7.008S", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         f.parseInto(null, "P1Y2M3W4DT5H6M7.008S", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, f.parseInto(result, "ABC", 0)); [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testConstructorEx1_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial((DateTimeFieldType[]) null, new int[] { 1 }); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testConstructorEx_Partial() throws Throwable { [EOL]     try { [EOL]         new Partial((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testConstructorEx_Partial() throws Throwable { [EOL]     try { [EOL]         new Partial((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWithField1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withField(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWithField1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withField(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWithField1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withField(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWithFieldAddWrapped4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAddWrapped4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAddWrapped4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyAddWrapFieldHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(18); [EOL]     check(copy, 4, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(-15); [EOL]     check(copy, 19, 20, 30, 40); [EOL] }
public void testMutableDuration() { [EOL]     MockMutableDuration test = new MockMutableDuration(123L); [EOL]     assertEquals(123L, test.getMillis()); [EOL]     test.setMillis(2345L); [EOL]     assertEquals(2345L, test.getMillis()); [EOL] }
public void testToIntervalFrom() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval result = test.toIntervalFrom(dt); [EOL]     assertEquals(new Interval(dt, test), result); [EOL] }
public void testToIntervalFrom() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval result = test.toIntervalFrom(dt); [EOL]     assertEquals(new Interval(dt, test), result); [EOL] }
public void testMinus_int() { [EOL]     Years test2 = Years.years(2); [EOL]     Years result = test2.minus(3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(-1, result.getYears()); [EOL]     assertEquals(1, Years.ONE.minus(0).getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Years test2 = Years.years(2); [EOL]     Years result = test2.minus(3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(-1, result.getYears()); [EOL]     assertEquals(1, Years.ONE.minus(0).getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Years test2 = Years.years(2); [EOL]     Years result = test2.minus(3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(-1, result.getYears()); [EOL]     assertEquals(1, Years.ONE.minus(0).getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(6, test.dividedBy(2).getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     assertEquals(4, test.dividedBy(3).getYears()); [EOL]     assertEquals(3, test.dividedBy(4).getYears()); [EOL]     assertEquals(2, test.dividedBy(5).getYears()); [EOL]     assertEquals(2, test.dividedBy(6).getYears()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Years.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(6, test.dividedBy(2).getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     assertEquals(4, test.dividedBy(3).getYears()); [EOL]     assertEquals(3, test.dividedBy(4).getYears()); [EOL]     assertEquals(2, test.dividedBy(5).getYears()); [EOL]     assertEquals(2, test.dividedBy(6).getYears()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Years.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(6, test.dividedBy(2).getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     assertEquals(4, test.dividedBy(3).getYears()); [EOL]     assertEquals(3, test.dividedBy(4).getYears()); [EOL]     assertEquals(2, test.dividedBy(5).getYears()); [EOL]     assertEquals(2, test.dividedBy(6).getYears()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Years.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(6, test.dividedBy(2).getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     assertEquals(4, test.dividedBy(3).getYears()); [EOL]     assertEquals(3, test.dividedBy(4).getYears()); [EOL]     assertEquals(2, test.dividedBy(5).getYears()); [EOL]     assertEquals(2, test.dividedBy(6).getYears()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Years.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_now() throws Throwable { [EOL]     Instant test = Instant.now(); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testMinus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testToDateTime() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testFactory_fromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(1970, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromCalendarFields(cal)); [EOL] }
public void testFactory_fromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(1970, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromCalendarFields(cal)); [EOL] }
public void testFactory_fromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(1970, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromCalendarFields(cal)); [EOL] }
public void testFactory_fromDateFields_null() throws Exception { [EOL]     try { [EOL]         LocalDate.fromDateFields((Date) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_fromDateFields_null() throws Exception { [EOL]     try { [EOL]         LocalDate.fromDateFields((Date) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_fromDateFields_null() throws Exception { [EOL]     try { [EOL]         LocalDate.fromDateFields((Date) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalDate test = new LocalDate((DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL] }
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalDate test = new LocalDate((DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectLocalDate() throws Throwable { [EOL]     LocalDate date = new LocalDate(1970, 5, 6); [EOL]     try { [EOL]         new LocalDateTime(date); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectLocalDate() throws Throwable { [EOL]     LocalDate date = new LocalDate(1970, 5, 6); [EOL]     try { [EOL]         new LocalDateTime(date); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectLocalDate() throws Throwable { [EOL]     LocalDate date = new LocalDate(1970, 5, 6); [EOL]     try { [EOL]         new LocalDateTime(date); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testIsEqual_LocalDate() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalDate(2005, 7, 2).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalDate() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalDate(2005, 7, 2).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalDate() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalDate(2005, 7, 2).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalDate() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalDate(2005, 7, 2).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalDate() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalDate(2005, 7, 2).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalDate() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalDate(2005, 7, 2).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDate_winter() { [EOL]     LocalDate base = new LocalDate(2005, 1, 9, COPTIC_PARIS); [EOL]     Date test = base.toDate(); [EOL]     check(base, 2005, 1, 9); [EOL]     GregorianCalendar gcal = new GregorianCalendar(); [EOL]     gcal.clear(); [EOL]     gcal.set(Calendar.YEAR, 2005); [EOL]     gcal.set(Calendar.MONTH, Calendar.JANUARY); [EOL]     gcal.set(Calendar.DAY_OF_MONTH, 9); [EOL]     assertEquals(gcal.getTime(), test); [EOL] }
public void testToDate_winter() { [EOL]     LocalDate base = new LocalDate(2005, 1, 9, COPTIC_PARIS); [EOL]     Date test = base.toDate(); [EOL]     check(base, 2005, 1, 9); [EOL]     GregorianCalendar gcal = new GregorianCalendar(); [EOL]     gcal.clear(); [EOL]     gcal.set(Calendar.YEAR, 2005); [EOL]     gcal.set(Calendar.MONTH, Calendar.JANUARY); [EOL]     gcal.set(Calendar.DAY_OF_MONTH, 9); [EOL]     assertEquals(gcal.getTime(), test); [EOL] }
public void testToDate_winter() { [EOL]     LocalDate base = new LocalDate(2005, 1, 9, COPTIC_PARIS); [EOL]     Date test = base.toDate(); [EOL]     check(base, 2005, 1, 9); [EOL]     GregorianCalendar gcal = new GregorianCalendar(); [EOL]     gcal.clear(); [EOL]     gcal.set(Calendar.YEAR, 2005); [EOL]     gcal.set(Calendar.MONTH, Calendar.JANUARY); [EOL]     gcal.set(Calendar.DAY_OF_MONTH, 9); [EOL]     assertEquals(gcal.getTime(), test); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPropertySetCopyTextDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetCopyTextDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetCopyTextDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetCopyTextDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetCopyTextDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetCopyTextDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetCopyTextDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetCopyTextDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testConstructor_Object_PeriodType1() throws Throwable { [EOL]     Period test = new Period("P1Y2M3D", PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(3, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_Object_PeriodType1() throws Throwable { [EOL]     Period test = new Period("P1Y2M3D", PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(3, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testYearMonthDay() throws Exception { [EOL]     PeriodType type = PeriodType.yearMonthDay(); [EOL]     assertEquals(3, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals("YearMonthDay", type.getName()); [EOL]     assertEquals("PeriodType[YearMonthDay]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearMonthDay()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearMonthDay().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testYearMonthDay() throws Exception { [EOL]     PeriodType type = PeriodType.yearMonthDay(); [EOL]     assertEquals(3, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals("YearMonthDay", type.getName()); [EOL]     assertEquals("PeriodType[YearMonthDay]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearMonthDay()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearMonthDay().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testYearWeekDay() throws Exception { [EOL]     PeriodType type = PeriodType.yearWeekDay(); [EOL]     assertEquals(3, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals("YearWeekDay", type.getName()); [EOL]     assertEquals("PeriodType[YearWeekDay]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearWeekDay()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearWeekDay().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testYearDayTime() throws Exception { [EOL]     PeriodType type = PeriodType.yearDayTime(); [EOL]     assertEquals(6, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(5)); [EOL]     assertEquals("YearDayTime", type.getName()); [EOL]     assertEquals("PeriodType[YearDayTime]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearDayTime()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearDayTime().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testYearDayTime() throws Exception { [EOL]     PeriodType type = PeriodType.yearDayTime(); [EOL]     assertEquals(6, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(5)); [EOL]     assertEquals("YearDayTime", type.getName()); [EOL]     assertEquals("PeriodType[YearDayTime]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearDayTime()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearDayTime().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testYearDay() throws Exception { [EOL]     PeriodType type = PeriodType.yearDay(); [EOL]     assertEquals(2, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(1)); [EOL]     assertEquals("YearDay", type.getName()); [EOL]     assertEquals("PeriodType[YearDay]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearDay()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearDay().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testYearDay() throws Exception { [EOL]     PeriodType type = PeriodType.yearDay(); [EOL]     assertEquals(2, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(1)); [EOL]     assertEquals("YearDay", type.getName()); [EOL]     assertEquals("PeriodType[YearDay]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearDay()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearDay().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testSerializedPeriodType() throws Exception { [EOL]     PeriodType test = PeriodType.dayTime(); [EOL]     loadAndCompare(test, "PeriodType", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testToPeriod() { [EOL]     DateTimeZone zone = DateTimeZone.getDefault(); [EOL]     try { [EOL]         DateTimeZone.setDefault(DateTimeZone.forID("Europe/Paris")); [EOL]         long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]         Duration dur = new Duration(length); [EOL]         Period test = dur.toPeriod(); [EOL]         assertEquals(0, test.getYears()); [EOL]         assertEquals(0, test.getMonths()); [EOL]         assertEquals(0, test.getWeeks()); [EOL]         assertEquals(0, test.getDays()); [EOL]         assertEquals((450 * 24) + 5, test.getHours()); [EOL]         assertEquals(6, test.getMinutes()); [EOL]         assertEquals(7, test.getSeconds()); [EOL]         assertEquals(8, test.getMillis()); [EOL]     } finally { [EOL]         DateTimeZone.setDefault(zone); [EOL]     } [EOL] }
public void testToPeriod() { [EOL]     DateTimeZone zone = DateTimeZone.getDefault(); [EOL]     try { [EOL]         DateTimeZone.setDefault(DateTimeZone.forID("Europe/Paris")); [EOL]         long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]         Duration dur = new Duration(length); [EOL]         Period test = dur.toPeriod(); [EOL]         assertEquals(0, test.getYears()); [EOL]         assertEquals(0, test.getMonths()); [EOL]         assertEquals(0, test.getWeeks()); [EOL]         assertEquals(0, test.getDays()); [EOL]         assertEquals((450 * 24) + 5, test.getHours()); [EOL]         assertEquals(6, test.getMinutes()); [EOL]         assertEquals(7, test.getSeconds()); [EOL]         assertEquals(8, test.getMillis()); [EOL]     } finally { [EOL]         DateTimeZone.setDefault(zone); [EOL]     } [EOL] }
public void testYears() throws Exception { [EOL]     PeriodType type = PeriodType.years(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals("Years", type.getName()); [EOL]     assertEquals("PeriodType[Years]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.years()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.years().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardMinutes() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L - 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(60000L + 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L - 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L); [EOL]     assertEquals(Minutes.minutes(2), test.toStandardMinutes()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L + 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L); [EOL]     assertEquals(Minutes.minutes(-1), test.toStandardMinutes()); [EOL] }
public void testIsSupported() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime().withMillisRemoved(); [EOL]     assertEquals(false, type.isSupported(DurationFieldType.years())); [EOL]     assertEquals(false, type.isSupported(DurationFieldType.months())); [EOL]     assertEquals(false, type.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, type.isSupported(DurationFieldType.days())); [EOL]     assertEquals(true, type.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, type.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, type.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(false, type.isSupported(DurationFieldType.millis())); [EOL] }
public void testMaskMinutes() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withMinutesRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withMinutesRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withMinutesRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoMinutes", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoMinutes]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMillisProvider_null() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisProvider(null); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetIntervalChronology_RInterval() { [EOL]     Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null)); [EOL]     MutableInterval ai = new MutableInterval() { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai)); [EOL] }
public void testGetIntervalChronology_RInterval() { [EOL]     Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null)); [EOL]     MutableInterval ai = new MutableInterval() { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai)); [EOL] }
public void testGetIntervalChronology_RInterval() { [EOL]     Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null)); [EOL]     MutableInterval ai = new MutableInterval() { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai)); [EOL] }
public void testGetIntervalChronology_RInterval() { [EOL]     Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null)); [EOL]     MutableInterval ai = new MutableInterval() { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai)); [EOL] }
public void testGetIntervalChronology_RInterval() { [EOL]     Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null)); [EOL]     MutableInterval ai = new MutableInterval() { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai)); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RD_RI3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadableDuration) null, dt); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getProvider()); [EOL]         Provider provider = DateTimeZone.getProvider(); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass()); [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNullIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockEmptyIDSProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockNoUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         try { [EOL]             DateTimeZone.setProvider(new MockBadUTCProvider()); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         Provider prov = new MockOKProvider(); [EOL]         DateTimeZone.setProvider(prov); [EOL]         assertSame(prov, DateTimeZone.getProvider()); [EOL]         assertEquals(2, DateTimeZone.getAvailableIDs().size()); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL]         assertTrue(DateTimeZone.getAvailableIDs().contains("Europe/London")); [EOL]     } finally { [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void test_DateTime_plusDayMidGap_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString()); [EOL] }
public void test_DateTime_plusDayMidGap_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString()); [EOL] }
public void test_DateTime_plusDayMidGap_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString()); [EOL] }
public void test_DateTime_plusDayMidGap_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString()); [EOL] }
public void test_DateTime_plusDayMidGap_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString()); [EOL] }
public void test_DateTime_setHourAcross_NewYork_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T00:00:00.000-05:00", dt.toString()); [EOL]     DateTime res = dt.hourOfDay().setCopy(4); [EOL]     assertEquals("2007-03-11T04:00:00.000-04:00", res.toString()); [EOL] }
public void test_DateTime_setHourAcross_NewYork_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T00:00:00.000-05:00", dt.toString()); [EOL]     DateTime res = dt.hourOfDay().setCopy(4); [EOL]     assertEquals("2007-03-11T04:00:00.000-04:00", res.toString()); [EOL] }
public void test_DateTime_setHourAcross_NewYork_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T00:00:00.000-05:00", dt.toString()); [EOL]     DateTime res = dt.hourOfDay().setCopy(4); [EOL]     assertEquals("2007-03-11T04:00:00.000-04:00", res.toString()); [EOL] }
public void test_DateTime_setHourAcross_NewYork_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T00:00:00.000-05:00", dt.toString()); [EOL]     DateTime res = dt.hourOfDay().setCopy(4); [EOL]     assertEquals("2007-03-11T04:00:00.000-04:00", res.toString()); [EOL] }
public void test_DateTime_parse_Turk() { [EOL]     try { [EOL]         new DateTime("2007-04-01T00:00", MOCK_TURK); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0); [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testEqualsHashCode() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     YearMonthDay test3 = new YearMonthDay(1971, 6, 9); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     YearMonthDay test3 = new YearMonthDay(1971, 6, 9); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     YearMonthDay test3 = new YearMonthDay(1971, 6, 9); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testConstructor_trickyDifferences_RI_RI_toFeb_exactMonths() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 12, 28, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 2, 28, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] }
public void testToDurationFrom() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L))); [EOL] }
public void testMergePeriod_RP3() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     test.mergePeriod(new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 18)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] }
public void testMergePeriod_RP3() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     test.mergePeriod(new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 18)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] }
public void testAdd_RP4() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime()); [EOL]     try { [EOL]         test.add(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_weekBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_weekBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_weekBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_weekBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_weekBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_weekBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_weekBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_weekBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_dateTimeParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateTimeParser(); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, true, "2006-06-09T+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, true, "2006-123T+02:00"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "T10:20:30.040"); [EOL]     assertParse(parser, true, "T10.5"); [EOL]     assertParse(parser, true, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void testFormat_timeNoMillis_partial() { [EOL]     Partial dt = new Partial(new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }, new int[] { 10, 20, 30, 40 }); [EOL]     assertEquals("10:20:30", ISODateTimeFormat.timeNoMillis().print(dt)); [EOL] }
public void test_ordinalDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTime(); [EOL]     assertParse(parser, "2006-123T10:20:30.400999999Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-123T10:20:30.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-123T10:20:30.40Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-123T10:20:30.4Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-12T10:20:30.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(12)); [EOL]     assertParse(parser, "2006-1T10:20:30.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(1)); [EOL]     assertParse(parser, "2006-123T5:6:7.800Z", new DateTime(2006, 1, 1, 5, 6, 7, 800).withDayOfYear(123)); [EOL]     assertParse(parser, false, "2006-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-123T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-123T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-123T10.400Z"); [EOL]     assertParse(parser, false, "2006-123T1.400Z"); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void test_basicDate() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicDate(); [EOL]     assertParse(parser, "20060204", new DateTime(2006, 2, 4, 0, 0, 0, 0)); [EOL]     assertParse(parser, false, "2006024"); [EOL]     assertParse(parser, false, "200602"); [EOL]     assertParse(parser, false, "20061"); [EOL]     assertParse(parser, false, "2006"); [EOL] }
public void testFormat_basicWeekDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004W243", ISODateTimeFormat.basicWeekDate().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004W243", ISODateTimeFormat.basicWeekDate().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004W243", ISODateTimeFormat.basicWeekDate().print(dt)); [EOL] }
public void testFormat_hour() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10", ISODateTimeFormat.hour().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11", ISODateTimeFormat.hour().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12", ISODateTimeFormat.hour().print(dt)); [EOL] }
public void testFormat_dateHour() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10", ISODateTimeFormat.dateHour().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11", ISODateTimeFormat.dateHour().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12", ISODateTimeFormat.dateHour().print(dt)); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] }
public void testFactory_standardMinutesIn_RPeriod() { [EOL]     assertEquals(0, Minutes.standardMinutesIn((ReadablePeriod) null).getMinutes()); [EOL]     assertEquals(0, Minutes.standardMinutesIn(Period.ZERO).getMinutes()); [EOL]     assertEquals(1, Minutes.standardMinutesIn(new Period(0, 0, 0, 0, 0, 1, 0, 0)).getMinutes()); [EOL]     assertEquals(123, Minutes.standardMinutesIn(Period.minutes(123)).getMinutes()); [EOL]     assertEquals(-987, Minutes.standardMinutesIn(Period.minutes(-987)).getMinutes()); [EOL]     assertEquals(1, Minutes.standardMinutesIn(Period.seconds(119)).getMinutes()); [EOL]     assertEquals(2, Minutes.standardMinutesIn(Period.seconds(120)).getMinutes()); [EOL]     assertEquals(2, Minutes.standardMinutesIn(Period.seconds(121)).getMinutes()); [EOL]     assertEquals(120, Minutes.standardMinutesIn(Period.hours(2)).getMinutes()); [EOL]     try { [EOL]         Minutes.standardMinutesIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardMinutesIn_RPeriod() { [EOL]     assertEquals(0, Minutes.standardMinutesIn((ReadablePeriod) null).getMinutes()); [EOL]     assertEquals(0, Minutes.standardMinutesIn(Period.ZERO).getMinutes()); [EOL]     assertEquals(1, Minutes.standardMinutesIn(new Period(0, 0, 0, 0, 0, 1, 0, 0)).getMinutes()); [EOL]     assertEquals(123, Minutes.standardMinutesIn(Period.minutes(123)).getMinutes()); [EOL]     assertEquals(-987, Minutes.standardMinutesIn(Period.minutes(-987)).getMinutes()); [EOL]     assertEquals(1, Minutes.standardMinutesIn(Period.seconds(119)).getMinutes()); [EOL]     assertEquals(2, Minutes.standardMinutesIn(Period.seconds(120)).getMinutes()); [EOL]     assertEquals(2, Minutes.standardMinutesIn(Period.seconds(121)).getMinutes()); [EOL]     assertEquals(120, Minutes.standardMinutesIn(Period.hours(2)).getMinutes()); [EOL]     try { [EOL]         Minutes.standardMinutesIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardMinutesIn_RPeriod() { [EOL]     assertEquals(0, Minutes.standardMinutesIn((ReadablePeriod) null).getMinutes()); [EOL]     assertEquals(0, Minutes.standardMinutesIn(Period.ZERO).getMinutes()); [EOL]     assertEquals(1, Minutes.standardMinutesIn(new Period(0, 0, 0, 0, 0, 1, 0, 0)).getMinutes()); [EOL]     assertEquals(123, Minutes.standardMinutesIn(Period.minutes(123)).getMinutes()); [EOL]     assertEquals(-987, Minutes.standardMinutesIn(Period.minutes(-987)).getMinutes()); [EOL]     assertEquals(1, Minutes.standardMinutesIn(Period.seconds(119)).getMinutes()); [EOL]     assertEquals(2, Minutes.standardMinutesIn(Period.seconds(120)).getMinutes()); [EOL]     assertEquals(2, Minutes.standardMinutesIn(Period.seconds(121)).getMinutes()); [EOL]     assertEquals(120, Minutes.standardMinutesIn(Period.hours(2)).getMinutes()); [EOL]     try { [EOL]         Minutes.standardMinutesIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSerialization() throws Exception { [EOL]     Minutes test = Minutes.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Minutes result = (Minutes) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testToStandardHours() { [EOL]     Minutes test = Minutes.minutes(3 * 60); [EOL]     Hours expected = Hours.hours(3); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Minutes test = Minutes.minutes(3 * 60); [EOL]     Hours expected = Hours.hours(3); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Minutes test = Minutes.minutes(3 * 60); [EOL]     Hours expected = Hours.hours(3); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Minutes test = Minutes.minutes(3 * 60); [EOL]     Hours expected = Hours.hours(3); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Minutes test = Minutes.minutes(3 * 60); [EOL]     Hours expected = Hours.hours(3); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] }
public void testMinus_int() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes result = test2.minus(3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(0).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes result = test2.minus(3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(0).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes result = test2.minus(3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(0).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes result = test2.minus(3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(0).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Minutes() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes test3 = Minutes.minutes(3); [EOL]     Minutes result = test2.plus(test3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(3, test3.getMinutes()); [EOL]     assertEquals(5, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.plus(Minutes.ZERO).getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.plus((Minutes) null).getMinutes()); [EOL]     try { [EOL]         Minutes.MAX_VALUE.plus(Minutes.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Minutes() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes test3 = Minutes.minutes(3); [EOL]     Minutes result = test2.plus(test3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(3, test3.getMinutes()); [EOL]     assertEquals(5, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.plus(Minutes.ZERO).getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.plus((Minutes) null).getMinutes()); [EOL]     try { [EOL]         Minutes.MAX_VALUE.plus(Minutes.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes result = test2.minus(3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(0).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes result = test2.minus(3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(0).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes result = test2.minus(3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(0).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes result = test2.minus(3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(0).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes result = test2.minus(3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(0).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinutes() { [EOL]     Minutes test = Minutes.minutes(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("PT5M", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Minutes.class, str)); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateMidnight test = new DateMidnight(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_PARIS, test.getMillis()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateMidnight test = new DateMidnight(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_PARIS, test.getMillis()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void test_Amman_2006() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Asia/Amman"); [EOL]     DateTime dt = new DateTime(2006, 3, 1, 0, 0, zone); [EOL]     long next = zone.nextTransition(dt.getMillis()); [EOL]     assertEquals(next, new DateTime(2006, 3, 31, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis()); [EOL] }
public void testIsFixed() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     assertEquals(false, zone.isFixed()); [EOL]     assertEquals(true, DateTimeZone.UTC.isFixed()); [EOL] }
public void testSetInto_Object() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime()); [EOL]     ReadableDurationConverter.INSTANCE.setInto(m, new Duration(3L * DateTimeConstants.MILLIS_PER_DAY + 4L * DateTimeConstants.MILLIS_PER_MINUTE + 5L), null); [EOL]     assertEquals(0, m.getYears()); [EOL]     assertEquals(0, m.getMonths()); [EOL]     assertEquals(0, m.getWeeks()); [EOL]     assertEquals(0, m.getDays()); [EOL]     assertEquals(3 * 24, m.getHours()); [EOL]     assertEquals(4, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(5, m.getMillis()); [EOL] }
public void testToString() { [EOL]     assertEquals("Converter[org.joda.time.ReadableDuration]", ReadableDurationConverter.INSTANCE.toString()); [EOL] }
public void testConstructor() { [EOL]     DateTimeConstants c = new DateTimeConstants() { [EOL]     }; [EOL]     c.toString(); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyLeapMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2004, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.monthOfYear().isLeap()); [EOL]     assertEquals(1, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2003, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL] }
public void testPropertyLeapMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2004, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.monthOfYear().isLeap()); [EOL]     assertEquals(1, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2003, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL] }
public void testPropertyLeapMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2004, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.monthOfYear().isLeap()); [EOL]     assertEquals(1, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2003, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testAlwaysFalseReturnTypes() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertFalse(fieldOne.isLenient()); [EOL]     assertFalse(fieldOne.isSupported()); [EOL] }
public void testAlwaysFalseReturnTypes() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertFalse(fieldOne.isLenient()); [EOL]     assertFalse(fieldOne.isSupported()); [EOL] }
public void testAlwaysFalseReturnTypes() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertFalse(fieldOne.isLenient()); [EOL]     assertFalse(fieldOne.isSupported()); [EOL] }
public void test_constructor1() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 3); [EOL]     assertEquals(DateTimeFieldType.secondOfMinute(), field.getType()); [EOL]     assertEquals(3, field.getOffset()); [EOL]     try { [EOL]         field = new OffsetDateTimeField(null, 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), UnsupportedDurationField.getInstance(DurationFieldType.seconds())), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testAlwaysFalseReturnTypes() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertFalse(fieldOne.isLenient()); [EOL]     assertFalse(fieldOne.isSupported()); [EOL] }
public void testAlwaysFalseReturnTypes() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertFalse(fieldOne.isLenient()); [EOL]     assertFalse(fieldOne.isSupported()); [EOL] }
public void testAlwaysFalseReturnTypes() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertFalse(fieldOne.isLenient()); [EOL]     assertFalse(fieldOne.isSupported()); [EOL] }
public void test_constructor() { [EOL]     BaseDateTimeField field = new PreciseDateTimeField(DateTimeFieldType.secondOfMinute(), ISOChronology.getInstanceUTC().millis(), ISOChronology.getInstanceUTC().hours()); [EOL]     assertEquals(DateTimeFieldType.secondOfMinute(), field.getType()); [EOL]     try { [EOL]         field = new PreciseDateTimeField(null, null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), new MockImpreciseDurationField(DurationFieldType.minutes()), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), ISOChronology.getInstanceUTC().hours(), new MockImpreciseDurationField(DurationFieldType.minutes())); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), ISOChronology.getInstanceUTC().hours(), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), new MockZeroDurationField(DurationFieldType.minutes()), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_constructor() { [EOL]     BaseDateTimeField field = new PreciseDateTimeField(DateTimeFieldType.secondOfMinute(), ISOChronology.getInstanceUTC().millis(), ISOChronology.getInstanceUTC().hours()); [EOL]     assertEquals(DateTimeFieldType.secondOfMinute(), field.getType()); [EOL]     try { [EOL]         field = new PreciseDateTimeField(null, null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), new MockImpreciseDurationField(DurationFieldType.minutes()), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), ISOChronology.getInstanceUTC().hours(), new MockImpreciseDurationField(DurationFieldType.minutes())); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), ISOChronology.getInstanceUTC().hours(), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), new MockZeroDurationField(DurationFieldType.minutes()), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_constructor() { [EOL]     BaseDateTimeField field = new PreciseDateTimeField(DateTimeFieldType.secondOfMinute(), ISOChronology.getInstanceUTC().millis(), ISOChronology.getInstanceUTC().hours()); [EOL]     assertEquals(DateTimeFieldType.secondOfMinute(), field.getType()); [EOL]     try { [EOL]         field = new PreciseDateTimeField(null, null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), new MockImpreciseDurationField(DurationFieldType.minutes()), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), ISOChronology.getInstanceUTC().hours(), new MockImpreciseDurationField(DurationFieldType.minutes())); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), ISOChronology.getInstanceUTC().hours(), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), new MockZeroDurationField(DurationFieldType.minutes()), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetPeriod_long1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod(100L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] }
public void testSetPeriod_long1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod(100L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] }
public void testSetPeriod_long1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod(100L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] }
public void testSetPeriod_long1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod(100L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyLeapYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.year().isLeap()); [EOL]     assertEquals(1, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.year().isLeap()); [EOL]     assertEquals(0, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL] }
public void testPropertyLeapYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.year().isLeap()); [EOL]     assertEquals(1, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.year().isLeap()); [EOL]     assertEquals(0, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL] }
public void testPropertyLeapYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.year().isLeap()); [EOL]     assertEquals(1, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.year().isLeap()); [EOL]     assertEquals(0, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testGetIntervalChronology_RInterval() { [EOL]     Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null)); [EOL]     MutableInterval ai = new MutableInterval() { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai)); [EOL] }
public void testGetIntervalChronology_RInterval() { [EOL]     Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null)); [EOL]     MutableInterval ai = new MutableInterval() { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai)); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void testOtherConstructors() { [EOL]     IllegalFieldValueException e = new IllegalFieldValueException(DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3)); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.days(), e.getDurationFieldType()); [EOL]     assertEquals("days", e.getFieldName()); [EOL]     assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]     assertEquals(null, e.getIllegalStringValue()); [EOL]     assertEquals("1", e.getIllegalValueAsString()); [EOL]     assertEquals(new Integer(2), e.getLowerBound()); [EOL]     assertEquals(new Integer(3), e.getUpperBound()); [EOL]     e = new IllegalFieldValueException(DurationFieldType.months(), "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.months(), e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL]     e = new IllegalFieldValueException("months", "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(null, e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL] }
public void testOtherConstructors() { [EOL]     IllegalFieldValueException e = new IllegalFieldValueException(DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3)); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.days(), e.getDurationFieldType()); [EOL]     assertEquals("days", e.getFieldName()); [EOL]     assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]     assertEquals(null, e.getIllegalStringValue()); [EOL]     assertEquals("1", e.getIllegalValueAsString()); [EOL]     assertEquals(new Integer(2), e.getLowerBound()); [EOL]     assertEquals(new Integer(3), e.getUpperBound()); [EOL]     e = new IllegalFieldValueException(DurationFieldType.months(), "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.months(), e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL]     e = new IllegalFieldValueException("months", "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(null, e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL] }
public void testOtherConstructors() { [EOL]     IllegalFieldValueException e = new IllegalFieldValueException(DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3)); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.days(), e.getDurationFieldType()); [EOL]     assertEquals("days", e.getFieldName()); [EOL]     assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]     assertEquals(null, e.getIllegalStringValue()); [EOL]     assertEquals("1", e.getIllegalValueAsString()); [EOL]     assertEquals(new Integer(2), e.getLowerBound()); [EOL]     assertEquals(new Integer(3), e.getUpperBound()); [EOL]     e = new IllegalFieldValueException(DurationFieldType.months(), "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.months(), e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL]     e = new IllegalFieldValueException("months", "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(null, e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL] }
public void testOtherConstructors() { [EOL]     IllegalFieldValueException e = new IllegalFieldValueException(DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3)); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.days(), e.getDurationFieldType()); [EOL]     assertEquals("days", e.getFieldName()); [EOL]     assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]     assertEquals(null, e.getIllegalStringValue()); [EOL]     assertEquals("1", e.getIllegalValueAsString()); [EOL]     assertEquals(new Integer(2), e.getLowerBound()); [EOL]     assertEquals(new Integer(3), e.getUpperBound()); [EOL]     e = new IllegalFieldValueException(DurationFieldType.months(), "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.months(), e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL]     e = new IllegalFieldValueException("months", "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(null, e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlusHours_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusHours(1); [EOL]     LocalTime expected = new LocalTime(2, 2, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusHours_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusHours(1); [EOL]     LocalTime expected = new LocalTime(2, 2, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusHours_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusHours(1); [EOL]     LocalTime expected = new LocalTime(2, 2, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] }
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyPlusHour() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.hourOfDay().addCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testPropertyPlusHour() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.hourOfDay().addCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testPropertyPlusHour() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.hourOfDay().addCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.millis())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.halfdays())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] }
public void testProperty() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] }
public void test_now_nullChronology() throws Throwable { [EOL]     try { [EOL]         MutableDateTime.now((Chronology) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_now_nullChronology() throws Throwable { [EOL]     try { [EOL]         MutableDateTime.now((Chronology) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutableDateTime(2010, 6, 30, 1, 20, 0, 0, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), MutableDateTime.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new MutableDateTime(2010, 1, 2, 14, 50, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse("2010-002T14:50")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutableDateTime(2010, 6, 30, 1, 20, 0, 0, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), MutableDateTime.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new MutableDateTime(2010, 1, 2, 14, 50, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse("2010-002T14:50")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutableDateTime(2010, 6, 30, 1, 20, 0, 0, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), MutableDateTime.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new MutableDateTime(2010, 1, 2, 14, 50, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse("2010-002T14:50")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutableDateTime(2010, 6, 30, 1, 20, 0, 0, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), MutableDateTime.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new MutableDateTime(2010, 1, 2, 14, 50, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse("2010-002T14:50")); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutableDateTime(2010, 6, 30, 1, 20, 0, 0, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), MutableDateTime.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new MutableDateTime(2010, 1, 2, 14, 50, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse("2010-002T14:50")); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testRounding8() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING); [EOL]     assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(null, -1); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay()); [EOL]     assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test.setRounding(null); [EOL]     assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode()); [EOL]     assertEquals(null, test.getRoundingField()); [EOL] }
public void testAdd_RD_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(new Duration(123456L), -2); [EOL]     assertEquals(TEST_TIME1 - (2L * 123456L), test.getMillis()); [EOL] }
public void testAdd_RD_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(new Duration(123456L), -2); [EOL]     assertEquals(TEST_TIME1 - (2L * 123456L), test.getMillis()); [EOL] }
public void testAdd_RD_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(new Duration(123456L), -2); [EOL]     assertEquals(TEST_TIME1 - (2L * 123456L), test.getMillis()); [EOL] }
public void testAdd_RD_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(new Duration(123456L), -2); [EOL]     assertEquals(TEST_TIME1 - (2L * 123456L), test.getMillis()); [EOL] }
public void testSetYear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setYear(2010); [EOL]     assertEquals("2010-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetYear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setYear(2010); [EOL]     assertEquals("2010-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetYear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setYear(2010); [EOL]     assertEquals("2010-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testAddWeekyears_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addWeekyears(-1); [EOL]     assertEquals("2001-06-10T05:06:07.008+01:00", test.toString()); [EOL] }
public void testAddWeekyears_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addWeekyears(-1); [EOL]     assertEquals("2001-06-10T05:06:07.008+01:00", test.toString()); [EOL] }
public void testAddWeekyears_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addWeekyears(-1); [EOL]     assertEquals("2001-06-10T05:06:07.008+01:00", test.toString()); [EOL] }
public void testAddMonths_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMonths(6); [EOL]     assertEquals("2002-12-09T05:06:07.008Z", test.toString()); [EOL] }
public void testAddMonths_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMonths(6); [EOL]     assertEquals("2002-12-09T05:06:07.008Z", test.toString()); [EOL] }
public void testAddMonths_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMonths(6); [EOL]     assertEquals("2002-12-09T05:06:07.008Z", test.toString()); [EOL] }
public void testAddWeeks_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addWeeks(-21); [EOL]     assertEquals("2002-01-13T05:06:07.008Z", test.toString()); [EOL] }
public void testAddWeeks_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addWeeks(-21); [EOL]     assertEquals("2002-01-13T05:06:07.008Z", test.toString()); [EOL] }
public void testAddWeeks_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addWeeks(-21); [EOL]     assertEquals("2002-01-13T05:06:07.008Z", test.toString()); [EOL] }
public void testSetHourOfDay_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetHourOfDay_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetHourOfDay_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetTime_int_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(5, 6, 7, 8); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(6, test.getMinuteOfHour()); [EOL]     assertEquals(7, test.getSecondOfMinute()); [EOL]     assertEquals(8, test.getMillisOfSecond()); [EOL] }
public void testPropertySetTextYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.year().set("1960"); [EOL]     assertEquals("1960-06-09T00:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertySetDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().set(4); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyGetMillisOfSecond() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField()); [EOL]     assertEquals("millisOfSecond", test.millisOfSecond().getName()); [EOL]     assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString()); [EOL]     assertEquals(53, test.millisOfSecond().get()); [EOL]     assertEquals("53", test.millisOfSecond().getAsText()); [EOL]     assertEquals("53", test.millisOfSecond().getAsText(Locale.FRENCH)); [EOL]     assertEquals("53", test.millisOfSecond().getAsShortText()); [EOL]     assertEquals("53", test.millisOfSecond().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField()); [EOL]     assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField()); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null)); [EOL] }
public void testPropertySetDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().set(4); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertySetDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().set(4); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", test.toString()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] }
public void testFactory_parseHours_String() { [EOL]     assertEquals(0, Hours.parseHours((String) null).getHours()); [EOL]     assertEquals(0, Hours.parseHours("PT0H").getHours()); [EOL]     assertEquals(1, Hours.parseHours("PT1H").getHours()); [EOL]     assertEquals(-3, Hours.parseHours("PT-3H").getHours()); [EOL]     assertEquals(2, Hours.parseHours("P0Y0M0DT2H").getHours()); [EOL]     assertEquals(2, Hours.parseHours("PT2H0M").getHours()); [EOL]     try { [EOL]         Hours.parseHours("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Hours.parseHours("P1DT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseHours_String() { [EOL]     assertEquals(0, Hours.parseHours((String) null).getHours()); [EOL]     assertEquals(0, Hours.parseHours("PT0H").getHours()); [EOL]     assertEquals(1, Hours.parseHours("PT1H").getHours()); [EOL]     assertEquals(-3, Hours.parseHours("PT-3H").getHours()); [EOL]     assertEquals(2, Hours.parseHours("P0Y0M0DT2H").getHours()); [EOL]     assertEquals(2, Hours.parseHours("PT2H0M").getHours()); [EOL]     try { [EOL]         Hours.parseHours("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Hours.parseHours("P1DT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseHours_String() { [EOL]     assertEquals(0, Hours.parseHours((String) null).getHours()); [EOL]     assertEquals(0, Hours.parseHours("PT0H").getHours()); [EOL]     assertEquals(1, Hours.parseHours("PT1H").getHours()); [EOL]     assertEquals(-3, Hours.parseHours("PT-3H").getHours()); [EOL]     assertEquals(2, Hours.parseHours("P0Y0M0DT2H").getHours()); [EOL]     assertEquals(2, Hours.parseHours("PT2H0M").getHours()); [EOL]     try { [EOL]         Hours.parseHours("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Hours.parseHours("P1DT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlus_Hours() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours test3 = Hours.hours(3); [EOL]     Hours result = test2.plus(test3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(3, test3.getHours()); [EOL]     assertEquals(5, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.plus(Hours.ZERO).getHours()); [EOL]     assertEquals(1, Hours.ONE.plus((Hours) null).getHours()); [EOL]     try { [EOL]         Hours.MAX_VALUE.plus(Hours.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Hours() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours test3 = Hours.hours(3); [EOL]     Hours result = test2.plus(test3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(3, test3.getHours()); [EOL]     assertEquals(5, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.plus(Hours.ZERO).getHours()); [EOL]     assertEquals(1, Hours.ONE.plus((Hours) null).getHours()); [EOL]     try { [EOL]         Hours.MAX_VALUE.plus(Hours.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(-12, test.negated().getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(-12, test.negated().getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(-12, test.negated().getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(-12, test.negated().getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(-12, test.negated().getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Hours.THREE.isLessThan(Hours.TWO)); [EOL]     assertEquals(false, Hours.THREE.isLessThan(Hours.THREE)); [EOL]     assertEquals(true, Hours.TWO.isLessThan(Hours.THREE)); [EOL]     assertEquals(false, Hours.ONE.isLessThan(null)); [EOL]     assertEquals(true, Hours.hours(-1).isLessThan(null)); [EOL] }
public void testRemoveBadIndex1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     try { [EOL]         set.remove(200, null); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(4, set.size()); [EOL] }
public void testRemoveBadIndex1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     try { [EOL]         set.remove(200, null); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(4, set.size()); [EOL] }
public void testRemoveBadIndex1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     try { [EOL]         set.remove(200, null); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(4, set.size()); [EOL] }
public void testBigHashtable() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     set.select(Boolean.class); [EOL]     set.select(Character.class); [EOL]     set.select(Byte.class); [EOL]     set.select(Short.class); [EOL]     set.select(Integer.class); [EOL]     set.select(Long.class); [EOL]     set.select(Float.class); [EOL]     set.select(Double.class); [EOL]     set.select(null); [EOL]     set.select(Calendar.class); [EOL]     set.select(GregorianCalendar.class); [EOL]     set.select(DateTime.class); [EOL]     set.select(DateMidnight.class); [EOL]     set.select(ReadableInstant.class); [EOL]     set.select(ReadableDateTime.class); [EOL]     set.select(ReadWritableInstant.class); [EOL]     set.select(ReadWritableDateTime.class); [EOL]     set.select(DateTime.class); [EOL]     assertEquals(4, set.size()); [EOL] }
public void testBigHashtable() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     set.select(Boolean.class); [EOL]     set.select(Character.class); [EOL]     set.select(Byte.class); [EOL]     set.select(Short.class); [EOL]     set.select(Integer.class); [EOL]     set.select(Long.class); [EOL]     set.select(Float.class); [EOL]     set.select(Double.class); [EOL]     set.select(null); [EOL]     set.select(Calendar.class); [EOL]     set.select(GregorianCalendar.class); [EOL]     set.select(DateTime.class); [EOL]     set.select(DateMidnight.class); [EOL]     set.select(ReadableInstant.class); [EOL]     set.select(ReadableDateTime.class); [EOL]     set.select(ReadWritableInstant.class); [EOL]     set.select(ReadWritableDateTime.class); [EOL]     set.select(DateTime.class); [EOL]     assertEquals(4, set.size()); [EOL] }
public void testBigHashtable() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     set.select(Boolean.class); [EOL]     set.select(Character.class); [EOL]     set.select(Byte.class); [EOL]     set.select(Short.class); [EOL]     set.select(Integer.class); [EOL]     set.select(Long.class); [EOL]     set.select(Float.class); [EOL]     set.select(Double.class); [EOL]     set.select(null); [EOL]     set.select(Calendar.class); [EOL]     set.select(GregorianCalendar.class); [EOL]     set.select(DateTime.class); [EOL]     set.select(DateMidnight.class); [EOL]     set.select(ReadableInstant.class); [EOL]     set.select(ReadableDateTime.class); [EOL]     set.select(ReadWritableInstant.class); [EOL]     set.select(ReadWritableDateTime.class); [EOL]     set.select(DateTime.class); [EOL]     assertEquals(4, set.size()); [EOL] }
public void testBigHashtable() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     set.select(Boolean.class); [EOL]     set.select(Character.class); [EOL]     set.select(Byte.class); [EOL]     set.select(Short.class); [EOL]     set.select(Integer.class); [EOL]     set.select(Long.class); [EOL]     set.select(Float.class); [EOL]     set.select(Double.class); [EOL]     set.select(null); [EOL]     set.select(Calendar.class); [EOL]     set.select(GregorianCalendar.class); [EOL]     set.select(DateTime.class); [EOL]     set.select(DateMidnight.class); [EOL]     set.select(ReadableInstant.class); [EOL]     set.select(ReadableDateTime.class); [EOL]     set.select(ReadWritableInstant.class); [EOL]     set.select(ReadWritableDateTime.class); [EOL]     set.select(DateTime.class); [EOL]     assertEquals(4, set.size()); [EOL] }
public void testRemoveBadIndex1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     try { [EOL]         set.remove(200, null); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(4, set.size()); [EOL] }
public void testRemoveBadIndex1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     try { [EOL]         set.remove(200, null); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(4, set.size()); [EOL] }
public void testRemoveBadIndex1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     try { [EOL]         set.remove(200, null); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(4, set.size()); [EOL] }
public void testRemoveBadIndex1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     try { [EOL]         set.remove(200, null); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(4, set.size()); [EOL] }
public void testRemoveBadIndex1() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     try { [EOL]         set.remove(200, null); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(4, set.size()); [EOL] }
public void testBigHashtable() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     set.select(Boolean.class); [EOL]     set.select(Character.class); [EOL]     set.select(Byte.class); [EOL]     set.select(Short.class); [EOL]     set.select(Integer.class); [EOL]     set.select(Long.class); [EOL]     set.select(Float.class); [EOL]     set.select(Double.class); [EOL]     set.select(null); [EOL]     set.select(Calendar.class); [EOL]     set.select(GregorianCalendar.class); [EOL]     set.select(DateTime.class); [EOL]     set.select(DateMidnight.class); [EOL]     set.select(ReadableInstant.class); [EOL]     set.select(ReadableDateTime.class); [EOL]     set.select(ReadWritableInstant.class); [EOL]     set.select(ReadWritableDateTime.class); [EOL]     set.select(DateTime.class); [EOL]     assertEquals(4, set.size()); [EOL] }
public void testBigHashtable() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     set.select(Boolean.class); [EOL]     set.select(Character.class); [EOL]     set.select(Byte.class); [EOL]     set.select(Short.class); [EOL]     set.select(Integer.class); [EOL]     set.select(Long.class); [EOL]     set.select(Float.class); [EOL]     set.select(Double.class); [EOL]     set.select(null); [EOL]     set.select(Calendar.class); [EOL]     set.select(GregorianCalendar.class); [EOL]     set.select(DateTime.class); [EOL]     set.select(DateMidnight.class); [EOL]     set.select(ReadableInstant.class); [EOL]     set.select(ReadableDateTime.class); [EOL]     set.select(ReadWritableInstant.class); [EOL]     set.select(ReadWritableDateTime.class); [EOL]     set.select(DateTime.class); [EOL]     assertEquals(4, set.size()); [EOL] }
public void test_toFormatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toFormatter()); [EOL] }
public void test_toFormatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toFormatter()); [EOL] }
public void test_toFormatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toFormatter()); [EOL] }
public void test_toFormatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toFormatter()); [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void test_append_nullParser() { [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append((DateTimeParser) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_nullParser() { [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append((DateTimeParser) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void testFormat_weekyear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("x").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "-123", f.print(dt)); [EOL] }
public void testFormat_weekyear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("x").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "-123", f.print(dt)); [EOL] }
public void testFormat_weekyear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("x").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "-123", f.print(dt)); [EOL] }
public void testFormat_weekyear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("x").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "-123", f.print(dt)); [EOL] }
public void testFormat_weekyear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("x").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "-123", f.print(dt)); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForFields_time_HSm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 30, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10-30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("10-30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HSm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 30, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10-30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("10-30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_HSm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 30, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10-30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("10-30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMillis_fractionOfSecondLong() { [EOL]     DateTimeFormatter f = new DateTimeFormatterBuilder().appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9).toFormatter().withZoneUTC(); [EOL]     assertEquals(10512, f.parseMillis("10.5123456")); [EOL]     assertEquals(10512, f.parseMillis("10.512999")); [EOL] }
public void testParseMillis_fractionOfSecondLong() { [EOL]     DateTimeFormatter f = new DateTimeFormatterBuilder().appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9).toFormatter().withZoneUTC(); [EOL]     assertEquals(10512, f.parseMillis("10.5123456")); [EOL]     assertEquals(10512, f.parseMillis("10.512999")); [EOL] }
public void testParseMillis_fractionOfSecondLong() { [EOL]     DateTimeFormatter f = new DateTimeFormatterBuilder().appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9).toFormatter().withZoneUTC(); [EOL]     assertEquals(10512, f.parseMillis("10.5123456")); [EOL]     assertEquals(10512, f.parseMillis("10.512999")); [EOL] }
public void testFormat_hourOfHalfday() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("K").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "10", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "7", f.print(dt)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC); [EOL]     assertEquals(dt.toString(), "0", f.print(dt)); [EOL] }
public void testFormat_hourOfHalfday() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("K").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "10", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "7", f.print(dt)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC); [EOL]     assertEquals(dt.toString(), "0", f.print(dt)); [EOL] }
public void testFormat_hourOfHalfday() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("K").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "10", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "7", f.print(dt)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC); [EOL]     assertEquals(dt.toString(), "0", f.print(dt)); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testToString4() { [EOL]     Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals("-W-5", test.toString()); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 13); [EOL]     assertEquals("[dayOfMonth=13, dayOfWeek=5]", test.toString()); [EOL] }
public void testToString4() { [EOL]     Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals("-W-5", test.toString()); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 13); [EOL]     assertEquals("[dayOfMonth=13, dayOfWeek=5]", test.toString()); [EOL] }
public void testFormat_year_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_year_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_centuryOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("C").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "1", f.print(dt)); [EOL] }
public void testFormat_centuryOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("C").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "1", f.print(dt)); [EOL] }
public void testFormat_centuryOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("C").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "1", f.print(dt)); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testFormatParse_textEraAD_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$AD2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormat_zoneAmount() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Z").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "+0000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "-0400", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "+0900", f.print(dt)); [EOL] }
public void testFormat_zoneAmount() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Z").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "+0000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "-0400", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "+0900", f.print(dt)); [EOL] }
public void testFormat_zoneAmount() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Z").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "+0000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "-0400", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "+0900", f.print(dt)); [EOL] }
public void testFormat_zoneAmount() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Z").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "+0000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "-0400", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "+0900", f.print(dt)); [EOL] }
public void testFormat_zoneAmount() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Z").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "+0000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "-0400", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "+0900", f.print(dt)); [EOL] }
public void testFormat_zoneAmount() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Z").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "+0000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "-0400", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "+0900", f.print(dt)); [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor2_Object_Chronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("T10:20"); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay("T1020"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_appendTimeZoneId() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendTimeZoneId(); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("Asia/Tokyo", f.print(new DateTime(2007, 3, 4, 0, 0, 0, TOKYO))); [EOL]     assertEquals(TOKYO, f.parseDateTime("Asia/Tokyo").getZone()); [EOL]     try { [EOL]         f.parseDateTime("Nonsense"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromDateFields_after1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     TimeOfDay expected = new TimeOfDay(4, 5, 6, 7); [EOL]     assertEquals(expected, TimeOfDay.fromDateFields(cal.getTime())); [EOL] }
public void testFactory_FromDateFields_after1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     TimeOfDay expected = new TimeOfDay(4, 5, 6, 7); [EOL]     assertEquals(expected, TimeOfDay.fromDateFields(cal.getTime())); [EOL] }
public void testFactoryMillisOfDay_long1() throws Throwable { [EOL]     TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testFactoryMillisOfDay_long1() throws Throwable { [EOL]     TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testFactoryMillisOfDay_long1() throws Throwable { [EOL]     TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(2, test.getMinuteOfHour()); [EOL]     assertEquals(3, test.getSecondOfMinute()); [EOL]     assertEquals(4, test.getMillisOfSecond()); [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField3() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.dayOfMonth(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMinus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     TimeOfDay expected = new TimeOfDay(9, 19, 29, 39, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     TimeOfDay expected = new TimeOfDay(9, 19, 29, 39, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     TimeOfDay expected = new TimeOfDay(9, 19, 29, 39, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     TimeOfDay expected = new TimeOfDay(9, 19, 29, 39, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     TimeOfDay expected = new TimeOfDay(9, 19, 29, 39, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     TimeOfDay expected = new TimeOfDay(9, 19, 29, 39, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusMinutes(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 1, 3, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusMinutes(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 1, 3, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToLocalTime() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_UTC); [EOL]     LocalTime test = base.toLocalTime(); [EOL]     assertEquals(new LocalTime(10, 20, 30, 40, COPTIC_UTC), test); [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetMaxMinValuesSecond() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(0, test.secondOfMinute().getMinimumValue()); [EOL]     assertEquals(0, test.secondOfMinute().getMinimumValueOverall()); [EOL]     assertEquals(59, test.secondOfMinute().getMaximumValue()); [EOL]     assertEquals(59, test.secondOfMinute().getMaximumValueOverall()); [EOL] }
public void testToString() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals("T10:20:30.040", test.toString()); [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetMaxMinValuesSecond() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(0, test.secondOfMinute().getMinimumValue()); [EOL]     assertEquals(0, test.secondOfMinute().getMinimumValueOverall()); [EOL]     assertEquals(59, test.secondOfMinute().getMaximumValue()); [EOL]     assertEquals(59, test.secondOfMinute().getMaximumValueOverall()); [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetYearOfCentury() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField()); [EOL]     assertEquals("yearOfCentury", test.yearOfCentury().getName()); [EOL]     assertEquals("Property[yearOfCentury]", test.yearOfCentury().toString()); [EOL]     assertSame(test, test.yearOfCentury().getDateTime()); [EOL]     assertEquals(4, test.yearOfCentury().get()); [EOL]     assertEquals("4", test.yearOfCentury().getAsString()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText(Locale.FRENCH)); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField()); [EOL]     assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null)); [EOL] }
public void testContains_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL] }
public void testContains_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL] }
public void testContains_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL] }
public void testContains_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL] }
public void testContains_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL] }
public void testContains_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL] }
public void testContains_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL] }
public void testContains_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL] }
public void testIsBefore_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1))); [EOL]     assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1))); [EOL]     assertEquals(false, test.isBefore(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE))); [EOL]     assertEquals(true, test.isBefore(new Interval(TEST_TIME2, Long.MAX_VALUE))); [EOL]     assertEquals(true, test.isBefore(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isBefore((ReadableInterval) null)); [EOL] }
public void testIsBefore_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1))); [EOL]     assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1))); [EOL]     assertEquals(false, test.isBefore(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE))); [EOL]     assertEquals(true, test.isBefore(new Interval(TEST_TIME2, Long.MAX_VALUE))); [EOL]     assertEquals(true, test.isBefore(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isBefore((ReadableInterval) null)); [EOL] }
public void testIsBefore_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1))); [EOL]     assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1))); [EOL]     assertEquals(false, test.isBefore(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE))); [EOL]     assertEquals(true, test.isBefore(new Interval(TEST_TIME2, Long.MAX_VALUE))); [EOL]     assertEquals(true, test.isBefore(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE))); [EOL]     assertEquals(false, test.isBefore((ReadableInterval) null)); [EOL] }
public void testIsAfter_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL] }
public void testIsAfter_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL] }
public void testIsAfter_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL] }
public void testConstructor_trickyDifferences_RI_RI_toFeb_exactMonths() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 12, 28, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 2, 28, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] }
public void testConstructor_4int1() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(5, 6, 7, 8); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testSetHours() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(10); [EOL]     assertEquals(10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(-10); [EOL]     assertEquals(-10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(0); [EOL]     assertEquals(0, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(5); [EOL]     assertEquals(5, test.getHours()); [EOL] }
public void testConstructor_long_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_long_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testSetPeriod_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(new Interval(dt1, dt2)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testSetPeriod_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(new Interval(dt1, dt2)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testSetPeriod_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(new Interval(dt1, dt2)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testSetPeriod_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(new Interval(dt1, dt2)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testSetPeriod_RD3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod((ReadableDuration) null); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testSetPeriod_RD3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod((ReadableDuration) null); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testSetPeriod_RD3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod((ReadableDuration) null); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testSetPeriod_RD3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod((ReadableDuration) null); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testSetPeriod_RD3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod((ReadableDuration) null); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testAdd_Field() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.add(DurationFieldType.years(), 10); [EOL]     assertEquals(11, test.getYears()); [EOL]     test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis()); [EOL]     test.add(DurationFieldType.years(), 0); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(1, test.getMillis()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.add(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.add(null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetHours() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(10); [EOL]     assertEquals(10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(-10); [EOL]     assertEquals(-10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(0); [EOL]     assertEquals(0, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(5); [EOL]     assertEquals(5, test.getHours()); [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetHours() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(10); [EOL]     assertEquals(10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(-10); [EOL]     assertEquals(-10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(0); [EOL]     assertEquals(0, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(5); [EOL]     assertEquals(5, test.getHours()); [EOL] }
public void testSetHours() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(10); [EOL]     assertEquals(10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(-10); [EOL]     assertEquals(-10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(0); [EOL]     assertEquals(0, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(5); [EOL]     assertEquals(5, test.getHours()); [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testAddSeconds() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(10); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(-10); [EOL]     assertEquals(-3, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(0); [EOL]     assertEquals(7, test.getSeconds()); [EOL] }
public void testAddSeconds() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(10); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(-10); [EOL]     assertEquals(-3, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(0); [EOL]     assertEquals(7, test.getSeconds()); [EOL] }
public void testAddSeconds() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(10); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(-10); [EOL]     assertEquals(-3, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(0); [EOL]     assertEquals(7, test.getSeconds()); [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testCopy() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     MutablePeriod copy = test.copy(); [EOL]     assertEquals(test.getPeriodType(), copy.getPeriodType()); [EOL]     assertEquals(test, copy); [EOL] }
public void testCopy() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     MutablePeriod copy = test.copy(); [EOL]     assertEquals(test.getPeriodType(), copy.getPeriodType()); [EOL]     assertEquals(test, copy); [EOL] }
public void testCopy() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     MutablePeriod copy = test.copy(); [EOL]     assertEquals(test.getPeriodType(), copy.getPeriodType()); [EOL]     assertEquals(test, copy); [EOL] }
public void test_roundFloor_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(-120L, field.roundFloor(-61L)); [EOL]     assertEquals(-60L, field.roundFloor(-60L)); [EOL]     assertEquals(-60L, field.roundFloor(-59L)); [EOL]     assertEquals(-60L, field.roundFloor(-1L)); [EOL]     assertEquals(0L, field.roundFloor(0L)); [EOL]     assertEquals(0L, field.roundFloor(1L)); [EOL]     assertEquals(0L, field.roundFloor(29L)); [EOL]     assertEquals(0L, field.roundFloor(30L)); [EOL]     assertEquals(0L, field.roundFloor(31L)); [EOL]     assertEquals(60L, field.roundFloor(60L)); [EOL] }
public void test_roundFloor_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(-120L, field.roundFloor(-61L)); [EOL]     assertEquals(-60L, field.roundFloor(-60L)); [EOL]     assertEquals(-60L, field.roundFloor(-59L)); [EOL]     assertEquals(-60L, field.roundFloor(-1L)); [EOL]     assertEquals(0L, field.roundFloor(0L)); [EOL]     assertEquals(0L, field.roundFloor(1L)); [EOL]     assertEquals(0L, field.roundFloor(29L)); [EOL]     assertEquals(0L, field.roundFloor(30L)); [EOL]     assertEquals(0L, field.roundFloor(31L)); [EOL]     assertEquals(60L, field.roundFloor(60L)); [EOL] }
public void test_roundFloor_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(-120L, field.roundFloor(-61L)); [EOL]     assertEquals(-60L, field.roundFloor(-60L)); [EOL]     assertEquals(-60L, field.roundFloor(-59L)); [EOL]     assertEquals(-60L, field.roundFloor(-1L)); [EOL]     assertEquals(0L, field.roundFloor(0L)); [EOL]     assertEquals(0L, field.roundFloor(1L)); [EOL]     assertEquals(0L, field.roundFloor(29L)); [EOL]     assertEquals(0L, field.roundFloor(30L)); [EOL]     assertEquals(0L, field.roundFloor(31L)); [EOL]     assertEquals(60L, field.roundFloor(60L)); [EOL] }
public void test_roundFloor_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(-120L, field.roundFloor(-61L)); [EOL]     assertEquals(-60L, field.roundFloor(-60L)); [EOL]     assertEquals(-60L, field.roundFloor(-59L)); [EOL]     assertEquals(-60L, field.roundFloor(-1L)); [EOL]     assertEquals(0L, field.roundFloor(0L)); [EOL]     assertEquals(0L, field.roundFloor(1L)); [EOL]     assertEquals(0L, field.roundFloor(29L)); [EOL]     assertEquals(0L, field.roundFloor(30L)); [EOL]     assertEquals(0L, field.roundFloor(31L)); [EOL]     assertEquals(60L, field.roundFloor(60L)); [EOL] }
public void test_remainder_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0L, field.remainder(0L)); [EOL]     assertEquals(29L, field.remainder(29L)); [EOL]     assertEquals(30L, field.remainder(30L)); [EOL]     assertEquals(31L, field.remainder(31L)); [EOL]     assertEquals(0L, field.remainder(60L)); [EOL] }
public void test_remainder_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0L, field.remainder(0L)); [EOL]     assertEquals(29L, field.remainder(29L)); [EOL]     assertEquals(30L, field.remainder(30L)); [EOL]     assertEquals(31L, field.remainder(31L)); [EOL]     assertEquals(0L, field.remainder(60L)); [EOL] }
public void test_remainder_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0L, field.remainder(0L)); [EOL]     assertEquals(29L, field.remainder(29L)); [EOL]     assertEquals(30L, field.remainder(30L)); [EOL]     assertEquals(31L, field.remainder(31L)); [EOL]     assertEquals(0L, field.remainder(60L)); [EOL] }
public void test_remainder_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0L, field.remainder(0L)); [EOL]     assertEquals(29L, field.remainder(29L)); [EOL]     assertEquals(30L, field.remainder(30L)); [EOL]     assertEquals(31L, field.remainder(31L)); [EOL]     assertEquals(0L, field.remainder(60L)); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testPropertyLeapYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.year().isLeap()); [EOL]     assertEquals(1, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.year().isLeap()); [EOL]     assertEquals(0, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL] }
public void testPropertyLeapYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.year().isLeap()); [EOL]     assertEquals(1, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.year().isLeap()); [EOL]     assertEquals(0, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL] }
public void testPropertyLeapYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.year().isLeap()); [EOL]     assertEquals(1, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.year().isLeap()); [EOL]     assertEquals(0, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL] }
public void testPropertyLeapYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.year().isLeap()); [EOL]     assertEquals(1, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.year().isLeap()); [EOL]     assertEquals(0, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void test_roundHalfEven_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(499L)); [EOL]     assertEquals(0L, field.roundHalfEven(500L)); [EOL]     assertEquals(1000L, field.roundHalfEven(501L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1000L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1499L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1500L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1501L)); [EOL] }
public void test_roundHalfEven_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(499L)); [EOL]     assertEquals(0L, field.roundHalfEven(500L)); [EOL]     assertEquals(1000L, field.roundHalfEven(501L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1000L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1499L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1500L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1501L)); [EOL] }
public void test_constructor2() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3); [EOL]     assertEquals(DateTimeFieldType.secondOfDay(), field.getType()); [EOL]     assertEquals(3, field.getOffset()); [EOL]     try { [EOL]         field = new OffsetDateTimeField(null, DateTimeFieldType.secondOfDay(), 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), null, 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_constructor2() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3); [EOL]     assertEquals(DateTimeFieldType.secondOfDay(), field.getType()); [EOL]     assertEquals(3, field.getOffset()); [EOL]     try { [EOL]         field = new OffsetDateTimeField(null, DateTimeFieldType.secondOfDay(), 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), null, 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_constructor2() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3); [EOL]     assertEquals(DateTimeFieldType.secondOfDay(), field.getType()); [EOL]     assertEquals(3, field.getOffset()); [EOL]     try { [EOL]         field = new OffsetDateTimeField(null, DateTimeFieldType.secondOfDay(), 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), null, 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_roundHalfEven_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(499L)); [EOL]     assertEquals(0L, field.roundHalfEven(500L)); [EOL]     assertEquals(1000L, field.roundHalfEven(501L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1000L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1499L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1500L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1501L)); [EOL] }
public void test_roundHalfEven_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(499L)); [EOL]     assertEquals(0L, field.roundHalfEven(500L)); [EOL]     assertEquals(1000L, field.roundHalfEven(501L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1000L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1499L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1500L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1501L)); [EOL] }
public void test_roundHalfEven_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(499L)); [EOL]     assertEquals(0L, field.roundHalfEven(500L)); [EOL]     assertEquals(1000L, field.roundHalfEven(501L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1000L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1499L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1500L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1501L)); [EOL] }
public void test_roundHalfEven_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(499L)); [EOL]     assertEquals(0L, field.roundHalfEven(500L)); [EOL]     assertEquals(1000L, field.roundHalfEven(501L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1000L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1499L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1500L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1501L)); [EOL] }
public void test_getAsShortText_long_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("32", field.getAsShortText(1000L * 29, Locale.ENGLISH)); [EOL]     assertEquals("32", field.getAsShortText(1000L * 29, null)); [EOL] }
public void test_isLeap_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(false, field.isLeap(0L)); [EOL] }
public void test_getLeapAmount_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0, field.getLeapAmount(0L)); [EOL] }
public void test_getLeapDurationField() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(null, field.getLeapDurationField()); [EOL] }
public void test_getMinimumValue_RP_intarray() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(3, field.getMinimumValue(new TimeOfDay(), new int[4])); [EOL] }
public void test_getMaximumShortTextLength_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH)); [EOL] }
public void test_roundHalfEven_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(499L)); [EOL]     assertEquals(0L, field.roundHalfEven(500L)); [EOL]     assertEquals(1000L, field.roundHalfEven(501L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1000L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1499L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1500L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1501L)); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] }
public void testForFields_weekBased_WD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_WD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_WD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_WD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testFactory_daysIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Days.daysIn((ReadableInterval) null).getDays()); [EOL]     assertEquals(3, Days.daysIn(new Interval(start, end1)).getDays()); [EOL]     assertEquals(0, Days.daysIn(new Interval(start, start)).getDays()); [EOL]     assertEquals(0, Days.daysIn(new Interval(end1, end1)).getDays()); [EOL]     assertEquals(6, Days.daysIn(new Interval(start, end2)).getDays()); [EOL] }
public void testFactory_daysIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Days.daysIn((ReadableInterval) null).getDays()); [EOL]     assertEquals(3, Days.daysIn(new Interval(start, end1)).getDays()); [EOL]     assertEquals(0, Days.daysIn(new Interval(start, start)).getDays()); [EOL]     assertEquals(0, Days.daysIn(new Interval(end1, end1)).getDays()); [EOL]     assertEquals(6, Days.daysIn(new Interval(start, end2)).getDays()); [EOL] }
public void testMinus_Days() { [EOL]     Days test2 = Days.days(2); [EOL]     Days test3 = Days.days(3); [EOL]     Days result = test2.minus(test3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(3, test3.getDays()); [EOL]     assertEquals(-1, result.getDays()); [EOL]     assertEquals(1, Days.ONE.minus(Days.ZERO).getDays()); [EOL]     assertEquals(1, Days.ONE.minus((Days) null).getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.minus(Days.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Days() { [EOL]     Days test2 = Days.days(2); [EOL]     Days test3 = Days.days(3); [EOL]     Days result = test2.minus(test3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(3, test3.getDays()); [EOL]     assertEquals(-1, result.getDays()); [EOL]     assertEquals(1, Days.ONE.minus(Days.ZERO).getDays()); [EOL]     assertEquals(1, Days.ONE.minus((Days) null).getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.minus(Days.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Days() { [EOL]     Days test2 = Days.days(2); [EOL]     Days test3 = Days.days(3); [EOL]     Days result = test2.minus(test3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(3, test3.getDays()); [EOL]     assertEquals(-1, result.getDays()); [EOL]     assertEquals(1, Days.ONE.minus(Days.ZERO).getDays()); [EOL]     assertEquals(1, Days.ONE.minus((Days) null).getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.minus(Days.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Days() { [EOL]     Days test2 = Days.days(2); [EOL]     Days test3 = Days.days(3); [EOL]     Days result = test2.minus(test3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(3, test3.getDays()); [EOL]     assertEquals(-1, result.getDays()); [EOL]     assertEquals(1, Days.ONE.minus(Days.ZERO).getDays()); [EOL]     assertEquals(1, Days.ONE.minus((Days) null).getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.minus(Days.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Days() { [EOL]     Days test2 = Days.days(2); [EOL]     Days test3 = Days.days(3); [EOL]     Days result = test2.minus(test3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(3, test3.getDays()); [EOL]     assertEquals(-1, result.getDays()); [EOL]     assertEquals(1, Days.ONE.minus(Days.ZERO).getDays()); [EOL]     assertEquals(1, Days.ONE.minus((Days) null).getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.minus(Days.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     MonthDay test = new MonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(30, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now(LONDON)); [EOL]     test = new MonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now(PARIS)); [EOL] }
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     MonthDay expected = new MonthDay(2, 3); [EOL]     assertEquals(expected, MonthDay.fromCalendarFields(cal)); [EOL]     try { [EOL]         MonthDay.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     MonthDay expected = new MonthDay(2, 3); [EOL]     assertEquals(expected, MonthDay.fromCalendarFields(cal)); [EOL]     try { [EOL]         MonthDay.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     MonthDay test = new MonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(30, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now(LONDON)); [EOL]     test = new MonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now(PARIS)); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testSerialization() throws Exception { [EOL]     MonthDay test = new MonthDay(5, 6, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     MonthDay result = (MonthDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     MonthDay test = new MonthDay(5, 6, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     MonthDay result = (MonthDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testWithChronologyRetainFields_sameChrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] }
public void testWithChronologyRetainFields_sameChrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] }
public void testWithField_same() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 9); [EOL]     assertEquals(new MonthDay(9, 6), test); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     MonthDay expected = new MonthDay(8, 9, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     MonthDay expected = new MonthDay(8, 9, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getMonthDay()); [EOL]     assertEquals(6, test.dayOfMonth().get()); [EOL]     assertEquals("6", test.dayOfMonth().getAsString()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("6", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     test = new MonthDay(4, 7); [EOL]     assertEquals("7", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("7", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     MonthDay copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     check(test, 5, 6); [EOL]     check(copy, 7, 6); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     check(copy, 7, 6); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(292278993 - 4 + 1); [EOL]     check(copy, 11, 6); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-292275054 - 4 - 1); [EOL]     check(copy, 6, 6); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     MonthDay copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     check(test, 5, 6); [EOL]     check(copy, 7, 6); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     check(copy, 7, 6); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(292278993 - 4 + 1); [EOL]     check(copy, 11, 6); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-292275054 - 4 - 1); [EOL]     check(copy, 6, 6); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     MonthDay copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     check(test, 5, 6); [EOL]     check(copy, 7, 6); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     check(copy, 7, 6); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(292278993 - 4 + 1); [EOL]     check(copy, 11, 6); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-292275054 - 4 - 1); [EOL]     check(copy, 6, 6); [EOL] }
public void testPropertySetMonthOfYear() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     MonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 10, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetMonthOfYear() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     MonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 10, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] }
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime((Object) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime((Object) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime((Object) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime((Object) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime((Object) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testGetField_int() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfDay(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField_int() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfDay(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField_int() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfDay(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField_int() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfDay(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField_int() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfDay(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testToLocalDate() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); [EOL]     LocalDate expected = new LocalDate(2005, 6, 9, COPTIC_LONDON); [EOL]     assertEquals(expected, base.toLocalDate()); [EOL] }
public void testToDate_autumnDST_Zone() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(TimeZone.getDefault()); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] }
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] }
public void testWithTime() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withTime(9, 8, 7, 6); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2004, 6, 9, 9, 8, 7, 6); [EOL] }
public void testWithTime() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withTime(9, 8, 7, 6); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2004, 6, 9, 9, 8, 7, 6); [EOL] }
public void testWithTime() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withTime(9, 8, 7, 6); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2004, 6, 9, 9, 8, 7, 6); [EOL] }
public void testWithTime() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withTime(9, 8, 7, 6); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2004, 6, 9, 9, 8, 7, 6); [EOL] }
public void testWithTime() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withTime(9, 8, 7, 6); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2004, 6, 9, 9, 8, 7, 6); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test); [EOL]     assertEquals(new LocalDateTime(2010, 6, 9, 10, 20, 30, 40), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test); [EOL]     assertEquals(new LocalDateTime(2010, 6, 9, 10, 20, 30, 40), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test); [EOL]     assertEquals(new LocalDateTime(2010, 6, 9, 10, 20, 30, 40), result); [EOL] }
public void testMinusDays_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusDays(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 2, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusDays(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 2, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusDays(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 2, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] }
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] }
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] }
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] }
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] }
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(JULIAN, CalendarConverter.INSTANCE.getChronology(cal, JULIAN)); [EOL] }
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(JULIAN, CalendarConverter.INSTANCE.getChronology(cal, JULIAN)); [EOL] }
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(JULIAN, CalendarConverter.INSTANCE.getChronology(cal, JULIAN)); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     TimeOfDay result = (TimeOfDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void testWithGetChronology() { [EOL]     DateTimeFormatter f2 = f.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals(BUDDHIST_PARIS, f2.getChronology()); [EOL]     assertSame(f2, f2.withChronology(BUDDHIST_PARIS)); [EOL]     f2 = f.withChronology(null); [EOL]     assertEquals(null, f2.getChronology()); [EOL]     assertSame(f2, f2.withChronology(null)); [EOL] }
public void testPrint_zone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withZone(null).print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withZoneUTC().print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withZone(null).print(dt)); [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void test_append_Formatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(f); [EOL]     bld2.appendLiteral('Z'); [EOL]     assertEquals("XYZ", bld2.toFormatter().print(0L)); [EOL] }
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseInto_zone() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(LONDON).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(null).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testParseInto_zone() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(LONDON).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(null).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testParseInto_zone() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(LONDON).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(null).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testParseInto_zone() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(LONDON).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(null).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testParseInto_zone() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(LONDON).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(null).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testConstructor2_Object_Chronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("T10:20"); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay("T1020"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor2_Object_Chronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("T10:20"); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay("T1020"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor2_Object_Chronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("T10:20"); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay("T1020"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutableDateTime_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseMutableDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutableDateTime_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseMutableDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseMutableDateTime_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseMutableDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_getName() { [EOL]     assertEquals("millis", MillisDurationField.INSTANCE.getName()); [EOL] }
public void test_isPrecise() { [EOL]     assertEquals(true, MillisDurationField.INSTANCE.isPrecise()); [EOL] }
public void test_getValue_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValue_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getMillis_int() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getMillis(0)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234)); [EOL] }
public void test_getMillis_int() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getMillis(0)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234)); [EOL] }
public void test_getMillis_int() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getMillis(0)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234)); [EOL] }
public void test_getMillis_long() { [EOL]     assertEquals(0L, MillisDurationField.INSTANCE.getMillis(0L)); [EOL]     assertEquals(1234L, MillisDurationField.INSTANCE.getMillis(1234L)); [EOL]     assertEquals(-1234L, MillisDurationField.INSTANCE.getMillis(-1234L)); [EOL] }
public void test_add_long_int() { [EOL]     assertEquals(567L, MillisDurationField.INSTANCE.add(567L, 0)); [EOL]     assertEquals(567L + 1234L, MillisDurationField.INSTANCE.add(567L, 1234)); [EOL]     assertEquals(567L - 1234L, MillisDurationField.INSTANCE.add(567L, -1234)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.add(Long.MAX_VALUE, 1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(567L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 0L)); [EOL]     assertEquals(567L - 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 1234L)); [EOL]     assertEquals(567L + 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifferenceAsLong(Long.MAX_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(567L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 0L)); [EOL]     assertEquals(567L - 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 1234L)); [EOL]     assertEquals(567L + 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifferenceAsLong(Long.MAX_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(567L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 0L)); [EOL]     assertEquals(567L - 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 1234L)); [EOL]     assertEquals(567L + 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifferenceAsLong(Long.MAX_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void test_year() throws Exception { [EOL]     assertEquals(DateTimeFieldType.year(), DateTimeFieldType.year()); [EOL]     assertEquals("year", DateTimeFieldType.year().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.year().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.year().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().year(), DateTimeFieldType.year().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().year().isSupported(), DateTimeFieldType.year().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.year()); [EOL] }
public void testToPeriod() { [EOL]     DateTimeZone zone = DateTimeZone.getDefault(); [EOL]     try { [EOL]         DateTimeZone.setDefault(DateTimeZone.forID("Europe/Paris")); [EOL]         long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]         Duration dur = new Duration(length); [EOL]         Period test = dur.toPeriod(); [EOL]         assertEquals(0, test.getYears()); [EOL]         assertEquals(0, test.getMonths()); [EOL]         assertEquals(0, test.getWeeks()); [EOL]         assertEquals(0, test.getDays()); [EOL]         assertEquals((450 * 24) + 5, test.getHours()); [EOL]         assertEquals(6, test.getMinutes()); [EOL]         assertEquals(7, test.getSeconds()); [EOL]         assertEquals(8, test.getMillis()); [EOL]     } finally { [EOL]         DateTimeZone.setDefault(zone); [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     assertEquals(+1, test2.compareTo(new MockDuration(123L))); [EOL]     assertEquals(0, test1.compareTo(new MockDuration(123L))); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     assertEquals(+1, test2.compareTo(new MockDuration(123L))); [EOL]     assertEquals(0, test1.compareTo(new MockDuration(123L))); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     assertEquals(+1, test2.compareTo(new MockDuration(123L))); [EOL]     assertEquals(0, test1.compareTo(new MockDuration(123L))); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testIsEqual() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     assertEquals(false, test2.isEqual(new MockDuration(123L))); [EOL]     assertEquals(true, test1.isEqual(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isEqual(null)); [EOL]     assertEquals(true, new Duration(0L).isEqual(null)); [EOL] }
public void testIsEqual() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     assertEquals(false, test2.isEqual(new MockDuration(123L))); [EOL]     assertEquals(true, test1.isEqual(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isEqual(null)); [EOL]     assertEquals(true, new Duration(0L).isEqual(null)); [EOL] }
public void testIsEqual() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     assertEquals(false, test2.isEqual(new MockDuration(123L))); [EOL]     assertEquals(true, test1.isEqual(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isEqual(null)); [EOL]     assertEquals(true, new Duration(0L).isEqual(null)); [EOL] }
public void testIsBefore() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isShorterThan(test1a)); [EOL]     assertEquals(false, test1a.isShorterThan(test1)); [EOL]     assertEquals(false, test1.isShorterThan(test1)); [EOL]     assertEquals(false, test1a.isShorterThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(true, test1.isShorterThan(test2)); [EOL]     assertEquals(false, test2.isShorterThan(test1)); [EOL]     assertEquals(false, test2.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(null)); [EOL]     assertEquals(false, new Duration(0L).isShorterThan(null)); [EOL] }
public void testIsBefore() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isShorterThan(test1a)); [EOL]     assertEquals(false, test1a.isShorterThan(test1)); [EOL]     assertEquals(false, test1.isShorterThan(test1)); [EOL]     assertEquals(false, test1a.isShorterThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(true, test1.isShorterThan(test2)); [EOL]     assertEquals(false, test2.isShorterThan(test1)); [EOL]     assertEquals(false, test2.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(null)); [EOL]     assertEquals(false, new Duration(0L).isShorterThan(null)); [EOL] }
public void testIsBefore() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isShorterThan(test1a)); [EOL]     assertEquals(false, test1a.isShorterThan(test1)); [EOL]     assertEquals(false, test1.isShorterThan(test1)); [EOL]     assertEquals(false, test1a.isShorterThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(true, test1.isShorterThan(test2)); [EOL]     assertEquals(false, test2.isShorterThan(test1)); [EOL]     assertEquals(false, test2.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(null)); [EOL]     assertEquals(false, new Duration(0L).isShorterThan(null)); [EOL] }
public void testIsBefore() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isShorterThan(test1a)); [EOL]     assertEquals(false, test1a.isShorterThan(test1)); [EOL]     assertEquals(false, test1.isShorterThan(test1)); [EOL]     assertEquals(false, test1a.isShorterThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(true, test1.isShorterThan(test2)); [EOL]     assertEquals(false, test2.isShorterThan(test1)); [EOL]     assertEquals(false, test2.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(null)); [EOL]     assertEquals(false, new Duration(0L).isShorterThan(null)); [EOL] }
public void test_subtract() throws Exception { [EOL]     DurationField fld = ISOChronology.getInstanceUTC().millis(); [EOL]     assertEquals(900, fld.subtract(1000L, 100)); [EOL]     assertEquals(900L, fld.subtract(1000L, 100L)); [EOL]     assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE)); [EOL]     assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE)); [EOL]     assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE)); [EOL]     try { [EOL]         fld.subtract(-1000L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_subtract() throws Exception { [EOL]     DurationField fld = ISOChronology.getInstanceUTC().millis(); [EOL]     assertEquals(900, fld.subtract(1000L, 100)); [EOL]     assertEquals(900L, fld.subtract(1000L, 100L)); [EOL]     assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE)); [EOL]     assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE)); [EOL]     assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE)); [EOL]     try { [EOL]         fld.subtract(-1000L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_subtract() throws Exception { [EOL]     DurationField fld = ISOChronology.getInstanceUTC().millis(); [EOL]     assertEquals(900, fld.subtract(1000L, 100)); [EOL]     assertEquals(900L, fld.subtract(1000L, 100L)); [EOL]     assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE)); [EOL]     assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE)); [EOL]     assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE)); [EOL]     try { [EOL]         fld.subtract(-1000L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_subtract() throws Exception { [EOL]     DurationField fld = ISOChronology.getInstanceUTC().millis(); [EOL]     assertEquals(900, fld.subtract(1000L, 100)); [EOL]     assertEquals(900L, fld.subtract(1000L, 100L)); [EOL]     assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE)); [EOL]     assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE)); [EOL]     assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE)); [EOL]     try { [EOL]         fld.subtract(-1000L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_subtract() throws Exception { [EOL]     DurationField fld = ISOChronology.getInstanceUTC().millis(); [EOL]     assertEquals(900, fld.subtract(1000L, 100)); [EOL]     assertEquals(900L, fld.subtract(1000L, 100L)); [EOL]     assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE)); [EOL]     assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE)); [EOL]     assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE)); [EOL]     try { [EOL]         fld.subtract(-1000L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_subtract() throws Exception { [EOL]     DurationField fld = ISOChronology.getInstanceUTC().millis(); [EOL]     assertEquals(900, fld.subtract(1000L, 100)); [EOL]     assertEquals(900L, fld.subtract(1000L, 100L)); [EOL]     assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE)); [EOL]     assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE)); [EOL]     assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE)); [EOL]     try { [EOL]         fld.subtract(-1000L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNameProvider() { [EOL]     try { [EOL]         assertNotNull(DateTimeZone.getNameProvider()); [EOL]         NameProvider provider = DateTimeZone.getNameProvider(); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass()); [EOL]         provider = new MockOKButNullNameProvider(); [EOL]         DateTimeZone.setNameProvider(provider); [EOL]         assertSame(provider, DateTimeZone.getNameProvider()); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER)); [EOL]         assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER)); [EOL]     } finally { [EOL]         DateTimeZone.setNameProvider(null); [EOL]     } [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.NameProvider"); [EOL]         DateTimeZone.setNameProvider(null); [EOL]         assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass()); [EOL]     } [EOL] }
public void testGetShortNameProviderName() { [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null)); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null)); [EOL] }
public void testGetShortNameProviderName() { [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null)); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null)); [EOL] }
public void testGetShortNameProviderName() { [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null)); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null)); [EOL] }
public void testGetShortNameProviderName() { [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null)); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null)); [EOL] }
public void testGetShortNameProviderName() { [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null)); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null)); [EOL] }
public void testGetShortNameProviderName() { [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null)); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null)); [EOL] }
public void testGetShortNameProviderName() { [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null)); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null)); [EOL] }
public void testGetShortNameProviderName() { [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST")); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null)); [EOL]     assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null)); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] }
public void testPropertyGetDayOfWeek() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField()); [EOL]     assertEquals("dayOfWeek", test.dayOfWeek().getName()); [EOL]     assertEquals("Property[dayOfWeek]", test.dayOfWeek().toString()); [EOL]     assertSame(test, test.dayOfWeek().getDateMidnight()); [EOL]     assertEquals(3, test.dayOfWeek().get()); [EOL]     assertEquals("3", test.dayOfWeek().getAsString()); [EOL]     assertEquals("Wednesday", test.dayOfWeek().getAsText()); [EOL]     assertEquals("mercredi", test.dayOfWeek().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Wed", test.dayOfWeek().getAsShortText()); [EOL]     assertEquals("mer.", test.dayOfWeek().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField()); [EOL]     assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField()); [EOL]     assertEquals(9, test.dayOfWeek().getMaximumTextLength(null)); [EOL]     assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null)); [EOL]     assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH)); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValueOverall()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValue()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValueOverall()); [EOL]     assertEquals(false, test.dayOfWeek().isLeap()); [EOL]     assertEquals(0, test.dayOfWeek().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfWeek().getLeapDurationField()); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testFormatParse_textHalfdayAM_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textHalfdayAM_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testToMutableDateTime_Chronology() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toMutableDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testToMutableDateTime_Chronology() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toMutableDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MutableInterval test = new MutableInterval(); [EOL]     assertEquals(0L, test.getStartMillis()); [EOL]     assertEquals(0L, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_Object2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval base = new MutableInterval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_Object2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval base = new MutableInterval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] }
public void testCopy() { [EOL]     MutableInterval test = new MutableInterval(123L, 456L, COPTIC_PARIS); [EOL]     MutableInterval cloned = test.copy(); [EOL]     assertEquals(test, cloned); [EOL]     assertNotSame(test, cloned); [EOL] }
public void test_now() throws Throwable { [EOL]     DateMidnight test = DateMidnight.now(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void test_now_nullChronology() throws Throwable { [EOL]     try { [EOL]         DateMidnight.now((Chronology) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_now_nullChronology() throws Throwable { [EOL]     try { [EOL]         DateMidnight.now((Chronology) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     DateMidnight test = new DateMidnight((DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     DateMidnight test = new DateMidnight((DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     DateMidnight test = new DateMidnight((Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     DateMidnight test = new DateMidnight((Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPlusYears_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusYears(1); [EOL]     DateMidnight expected = new DateMidnight(2003, 5, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusYears(1); [EOL]     DateMidnight expected = new DateMidnight(2003, 5, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusYears(1); [EOL]     DateMidnight expected = new DateMidnight(2003, 5, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusDays(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusDays(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusDays(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyToIntervalYearOfEra() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     Interval testInterval = test.yearOfEra().toInterval(); [EOL]     assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart()); [EOL]     assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().setCopy("8"); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(8, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyRoundHalfCeilingMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 16); [EOL]     DateMidnight copy = test.monthOfYear().roundHalfCeilingCopy(); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateMidnight(2004, 6, 17); [EOL]     copy = test.monthOfYear().roundHalfCeilingCopy(); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateMidnight(2004, 6, 15); [EOL]     copy = test.monthOfYear().roundHalfCeilingCopy(); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL] }
public void test_getMinimumValue_RP_intarray() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(3, field.getMinimumValue(new TimeOfDay(), new int[4])); [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_invalidInNewChrono() { [EOL]     YearMonth base = new YearMonth(2005, 13, COPTIC_UTC); [EOL]     try { [EOL]         base.withChronologyRetainFields(ISO_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_invalidInNewChrono() { [EOL]     YearMonth base = new YearMonth(2005, 13, COPTIC_UTC); [EOL]     try { [EOL]         base.withChronologyRetainFields(ISO_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
