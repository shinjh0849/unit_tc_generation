@Test [EOL] public void test_isNotTrue_Boolean() { [EOL]     assertFalse(BooleanUtils.isNotTrue(Boolean.TRUE)); [EOL]     assertTrue(BooleanUtils.isNotTrue(Boolean.FALSE)); [EOL]     assertTrue(BooleanUtils.isNotTrue((Boolean) null)); [EOL] }
@Test [EOL] public void test_toBoolean_Boolean() { [EOL]     assertTrue(BooleanUtils.toBoolean(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.toBoolean(Boolean.FALSE)); [EOL]     assertFalse(BooleanUtils.toBoolean((Boolean) null)); [EOL] }
@Test [EOL] public void test_toBoolean_Boolean() { [EOL]     assertTrue(BooleanUtils.toBoolean(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.toBoolean(Boolean.FALSE)); [EOL]     assertFalse(BooleanUtils.toBoolean((Boolean) null)); [EOL] }
@Test [EOL] public void test_toBoolean_Boolean() { [EOL]     assertTrue(BooleanUtils.toBoolean(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.toBoolean(Boolean.FALSE)); [EOL]     assertFalse(BooleanUtils.toBoolean((Boolean) null)); [EOL] }
@Test [EOL] public void test_toBoolean_int_int_int() { [EOL]     assertTrue(BooleanUtils.toBoolean(6, 6, 7)); [EOL]     assertFalse(BooleanUtils.toBoolean(7, 6, 7)); [EOL] }
@Test [EOL] public void test_toBoolean_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     assertTrue(BooleanUtils.toBoolean((Integer) null, null, seven)); [EOL]     assertFalse(BooleanUtils.toBoolean((Integer) null, six, null)); [EOL]     assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven)); [EOL]     assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven)); [EOL] }
@Test [EOL] public void test_toStringTrueFalse_Boolean() { [EOL]     assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null)); [EOL]     assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE)); [EOL]     assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE)); [EOL] }
@Test [EOL] public void test_toStringTrueFalse_Boolean() { [EOL]     assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null)); [EOL]     assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE)); [EOL]     assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_emptyInput() { [EOL]     BooleanUtils.and(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_emptyInput() { [EOL]     BooleanUtils.and(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_emptyInput() { [EOL]     BooleanUtils.and(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_emptyInput() { [EOL]     BooleanUtils.and(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_emptyInput() { [EOL]     BooleanUtils.and(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_emptyInput() { [EOL]     BooleanUtils.or(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_emptyInput() { [EOL]     BooleanUtils.or(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_emptyInput() { [EOL]     BooleanUtils.or(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_emptyInput() { [EOL]     BooleanUtils.or(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_emptyInput() { [EOL]     BooleanUtils.or(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_emptyInput() { [EOL]     BooleanUtils.or(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_nullInput() { [EOL]     BooleanUtils.xor((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_nullInput() { [EOL]     BooleanUtils.xor((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_nullInput() { [EOL]     BooleanUtils.xor((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_nullInput() { [EOL]     BooleanUtils.xor((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_nullInput() { [EOL]     BooleanUtils.xor((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_nullInput() { [EOL]     BooleanUtils.xor((Boolean[]) null); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void testCreateFloat() { [EOL]     assertEquals("createFloat(String) failed", Float.valueOf("1234.5"), NumberUtils.createFloat("1234.5")); [EOL]     assertEquals("createFloat(null) failed", null, NumberUtils.createFloat(null)); [EOL]     this.testCreateFloatFailure(""); [EOL]     this.testCreateFloatFailure(" "); [EOL]     this.testCreateFloatFailure("\b\t\n\f\r"); [EOL]     this.testCreateFloatFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] }
@Test [EOL] public void testCreateFloat() { [EOL]     assertEquals("createFloat(String) failed", Float.valueOf("1234.5"), NumberUtils.createFloat("1234.5")); [EOL]     assertEquals("createFloat(null) failed", null, NumberUtils.createFloat(null)); [EOL]     this.testCreateFloatFailure(""); [EOL]     this.testCreateFloatFailure(" "); [EOL]     this.testCreateFloatFailure("\b\t\n\f\r"); [EOL]     this.testCreateFloatFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] }
@Test [EOL] public void testCreateFloat() { [EOL]     assertEquals("createFloat(String) failed", Float.valueOf("1234.5"), NumberUtils.createFloat("1234.5")); [EOL]     assertEquals("createFloat(null) failed", null, NumberUtils.createFloat(null)); [EOL]     this.testCreateFloatFailure(""); [EOL]     this.testCreateFloatFailure(" "); [EOL]     this.testCreateFloatFailure("\b\t\n\f\r"); [EOL]     this.testCreateFloatFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinInt_emptyArray() { [EOL]     NumberUtils.min(new int[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinInt_emptyArray() { [EOL]     NumberUtils.min(new int[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinInt_emptyArray() { [EOL]     NumberUtils.min(new int[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinInt_emptyArray() { [EOL]     NumberUtils.min(new int[0]); [EOL] }
@Test [EOL] public void testMinByte() { [EOL]     assertEquals("min(byte[]) failed for array length 1", 5, NumberUtils.min(new byte[] { 5 })); [EOL]     assertEquals("min(byte[]) failed for array length 2", 6, NumberUtils.min(new byte[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinByte() { [EOL]     assertEquals("min(byte[]) failed for array length 1", 5, NumberUtils.min(new byte[] { 5 })); [EOL]     assertEquals("min(byte[]) failed for array length 2", 6, NumberUtils.min(new byte[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinByte() { [EOL]     assertEquals("min(byte[]) failed for array length 1", 5, NumberUtils.min(new byte[] { 5 })); [EOL]     assertEquals("min(byte[]) failed for array length 2", 6, NumberUtils.min(new byte[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinByte() { [EOL]     assertEquals("min(byte[]) failed for array length 1", 5, NumberUtils.min(new byte[] { 5 })); [EOL]     assertEquals("min(byte[]) failed for array length 2", 6, NumberUtils.min(new byte[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMaxInt() { [EOL]     assertEquals("max(int[]) failed for array length 1", 5, NumberUtils.max(new int[] { 5 })); [EOL]     assertEquals("max(int[]) failed for array length 2", 9, NumberUtils.max(new int[] { 6, 9 })); [EOL]     assertEquals("max(int[]) failed for array length 5", 10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxInt() { [EOL]     assertEquals("max(int[]) failed for array length 1", 5, NumberUtils.max(new int[] { 5 })); [EOL]     assertEquals("max(int[]) failed for array length 2", 9, NumberUtils.max(new int[] { 6, 9 })); [EOL]     assertEquals("max(int[]) failed for array length 5", 10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxInt() { [EOL]     assertEquals("max(int[]) failed for array length 1", 5, NumberUtils.max(new int[] { 5 })); [EOL]     assertEquals("max(int[]) failed for array length 2", 9, NumberUtils.max(new int[] { 6, 9 })); [EOL]     assertEquals("max(int[]) failed for array length 5", 10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxInt() { [EOL]     assertEquals("max(int[]) failed for array length 1", 5, NumberUtils.max(new int[] { 5 })); [EOL]     assertEquals("max(int[]) failed for array length 2", 9, NumberUtils.max(new int[] { 6, 9 })); [EOL]     assertEquals("max(int[]) failed for array length 5", 10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxDouble_nullArray() { [EOL]     NumberUtils.max((double[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxDouble_nullArray() { [EOL]     NumberUtils.max((double[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxDouble_nullArray() { [EOL]     NumberUtils.max((double[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxDouble_nullArray() { [EOL]     NumberUtils.max((double[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxDouble_nullArray() { [EOL]     NumberUtils.max((double[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxDouble_nullArray() { [EOL]     NumberUtils.max((double[]) null); [EOL] }
@Test [EOL] public void testMaximumInt() { [EOL]     assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2)); [EOL]     assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2)); [EOL]     assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345)); [EOL]     assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345)); [EOL]     assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.max(12345, 12345, 12345)); [EOL] }
@Test [EOL] public void testMaximumByte() { [EOL]     final byte low = 123; [EOL]     final byte mid = 123 + 1; [EOL]     final byte high = 123 + 2; [EOL]     assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(low, mid, high)); [EOL]     assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, low, high)); [EOL]     assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, high, low)); [EOL]     assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(high, mid, high)); [EOL] }
@Test [EOL] public void testIsDigits() { [EOL]     assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]     assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]     assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]     assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]     assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]     assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL] }
@Test [EOL] public void testIsDigits() { [EOL]     assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]     assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]     assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]     assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]     assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]     assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL] }
@Test [EOL] public void testIsDigits() { [EOL]     assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]     assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]     assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]     assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]     assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]     assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL] }
@Test [EOL] public void testIsDigits() { [EOL]     assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]     assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]     assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]     assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]     assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]     assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL] }
@Test [EOL] public void testGetShortValue() { [EOL]     assertEquals(bf_multi.getShortValue((short) -1), (short) 127); [EOL]     assertEquals(bf_multi.getShortValue((short) 0), (short) 0); [EOL]     assertEquals(bf_single.getShortValue((short) -1), (short) 1); [EOL]     assertEquals(bf_single.getShortValue((short) 0), (short) 0); [EOL]     assertEquals(bf_zero.getShortValue((short) -1), (short) 0); [EOL]     assertEquals(bf_zero.getShortValue((short) 0), (short) 0); [EOL] }
@Test [EOL] public void testGetShortRawValue() { [EOL]     assertEquals(bf_multi.getShortRawValue((short) -1), (short) 0x3F80); [EOL]     assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0); [EOL]     assertEquals(bf_single.getShortRawValue((short) -1), (short) 0x4000); [EOL]     assertEquals(bf_single.getShortRawValue((short) 0), (short) 0); [EOL]     assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0); [EOL]     assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0); [EOL] }
@Test [EOL] public void testGetShortRawValue() { [EOL]     assertEquals(bf_multi.getShortRawValue((short) -1), (short) 0x3F80); [EOL]     assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0); [EOL]     assertEquals(bf_single.getShortRawValue((short) -1), (short) 0x4000); [EOL]     assertEquals(bf_single.getShortRawValue((short) 0), (short) 0); [EOL]     assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0); [EOL]     assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0); [EOL] }
@Test [EOL] public void testIsAllSet() { [EOL]     for (int j = 0; j < 0x3F80; j += 0x80) { [EOL]         assertTrue(!bf_multi.isAllSet(j)); [EOL]         assertTrue(bf_zero.isAllSet(j)); [EOL]     } [EOL]     assertTrue(bf_multi.isAllSet(0x3F80)); [EOL]     assertTrue(!bf_single.isAllSet(0)); [EOL]     assertTrue(bf_single.isAllSet(0x4000)); [EOL] }
@Test [EOL] public void testIsAllSet() { [EOL]     for (int j = 0; j < 0x3F80; j += 0x80) { [EOL]         assertTrue(!bf_multi.isAllSet(j)); [EOL]         assertTrue(bf_zero.isAllSet(j)); [EOL]     } [EOL]     assertTrue(bf_multi.isAllSet(0x3F80)); [EOL]     assertTrue(!bf_single.isAllSet(0)); [EOL]     assertTrue(bf_single.isAllSet(0x4000)); [EOL] }
@Test [EOL] public void testSetShortValue() { [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j); [EOL]         assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7)); [EOL]     } [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0); [EOL]         assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) 0); [EOL]     } [EOL]     assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0); [EOL]     for (int j = 0; j < 2; j++) { [EOL]         assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j); [EOL]         assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14)); [EOL]     } [EOL]     assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0); [EOL] }
@Test [EOL] public void testSetShortValue() { [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j); [EOL]         assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7)); [EOL]     } [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0); [EOL]         assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) 0); [EOL]     } [EOL]     assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0); [EOL]     for (int j = 0; j < 2; j++) { [EOL]         assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j); [EOL]         assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14)); [EOL]     } [EOL]     assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0); [EOL] }
@Test [EOL] public void testSetShortValue() { [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j); [EOL]         assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7)); [EOL]     } [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0); [EOL]         assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) 0); [EOL]     } [EOL]     assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0); [EOL]     for (int j = 0; j < 2; j++) { [EOL]         assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j); [EOL]         assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14)); [EOL]     } [EOL]     assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0); [EOL] }
@Test [EOL] public void testSetBoolean() { [EOL]     assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); [EOL]     assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); [EOL]     assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); [EOL]     assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false)); [EOL]     assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false)); [EOL]     assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false)); [EOL] }
@Test [EOL] public void testSetBoolean() { [EOL]     assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); [EOL]     assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); [EOL]     assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); [EOL]     assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false)); [EOL]     assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false)); [EOL]     assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false)); [EOL] }
@Test [EOL] public void testSetBoolean() { [EOL]     assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); [EOL]     assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); [EOL]     assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); [EOL]     assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false)); [EOL]     assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false)); [EOL]     assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false)); [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testBuiltInChoiceFormat() { [EOL]     final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf("2.2"), Double.valueOf("1234.5") }; [EOL]     String choicePattern = null; [EOL]     final Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL]     choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL]     choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}"; [EOL]     for (final Object value : values) { [EOL]         checkBuiltInFormat(value + ": " + choicePattern, new Object[] { value }, availableLocales); [EOL]     } [EOL] }
@Test [EOL] public void testFormattable_simple() throws Exception { [EOL]     final Pair<String, String> pair = Pair.of("Key", "Value"); [EOL]     assertEquals("(Key,Value)", String.format("%1$s", pair)); [EOL] }
@Test [EOL] public void testFormattable_simple() throws Exception { [EOL]     final Pair<String, String> pair = Pair.of("Key", "Value"); [EOL]     assertEquals("(Key,Value)", String.format("%1$s", pair)); [EOL] }
@Test [EOL] public void testToStringCustom() throws Exception { [EOL]     final Calendar date = Calendar.getInstance(); [EOL]     date.set(2011, Calendar.APRIL, 25); [EOL]     final Pair<String, Calendar> pair = Pair.of("DOB", date); [EOL]     assertEquals("Test created on " + "04-25-2011", pair.toString("Test created on %2$tm-%2$td-%2$tY")); [EOL] }
@Test [EOL] public void testToStringCustom() throws Exception { [EOL]     final Calendar date = Calendar.getInstance(); [EOL]     date.set(2011, Calendar.APRIL, 25); [EOL]     final Pair<String, Calendar> pair = Pair.of("DOB", date); [EOL]     assertEquals("Test created on " + "04-25-2011", pair.toString("Test created on %2$tm-%2$td-%2$tY")); [EOL] }
@Test [EOL] public void testGet() throws ConcurrentException { [EOL]     assertEquals("Wrong object", VALUE, init.get()); [EOL] }
@Test [EOL] public void testGet() throws ConcurrentException { [EOL]     assertEquals("Wrong object", VALUE, init.get()); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testBuildUncaughtExceptionHandlerNull() { [EOL]     builder.uncaughtExceptionHandler(null); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testGetAvailablePermits() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     for (int i = 0; i < LIMIT; i++) { [EOL]         assertEquals("Wrong available count at " + i, LIMIT - i, semaphore.getAvailablePermits()); [EOL]         semaphore.acquire(); [EOL]     } [EOL]     semaphore.endOfPeriod(); [EOL]     assertEquals("Wrong available count in new period", LIMIT, semaphore.getAvailablePermits()); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testGetAvailablePermits() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     for (int i = 0; i < LIMIT; i++) { [EOL]         assertEquals("Wrong available count at " + i, LIMIT - i, semaphore.getAvailablePermits()); [EOL]         semaphore.acquire(); [EOL]     } [EOL]     semaphore.endOfPeriod(); [EOL]     assertEquals("Wrong available count in new period", LIMIT, semaphore.getAvailablePermits()); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testGetAvailablePermits() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     for (int i = 0; i < LIMIT; i++) { [EOL]         assertEquals("Wrong available count at " + i, LIMIT - i, semaphore.getAvailablePermits()); [EOL]         semaphore.acquire(); [EOL]     } [EOL]     semaphore.endOfPeriod(); [EOL]     assertEquals("Wrong available count in new period", LIMIT, semaphore.getAvailablePermits()); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testGetAvailablePermits() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     for (int i = 0; i < LIMIT; i++) { [EOL]         assertEquals("Wrong available count at " + i, LIMIT - i, semaphore.getAvailablePermits()); [EOL]         semaphore.acquire(); [EOL]     } [EOL]     semaphore.endOfPeriod(); [EOL]     assertEquals("Wrong available count in new period", LIMIT, semaphore.getAvailablePermits()); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] }
@Test [EOL] public void testContextedException() { [EOL]     exceptionContext = new ContextedRuntimeException(); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(StringUtils.isEmpty(message)); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f); [EOL]     assertEquals(2f, new MutableFloat(Float.valueOf(2f)).floatValue(), 0.0001f); [EOL]     assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f); [EOL]     assertEquals(2f, new MutableFloat("2.0").floatValue(), 0.0001f); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f); [EOL]     assertEquals(2f, new MutableFloat(Float.valueOf(2f)).floatValue(), 0.0001f); [EOL]     assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f); [EOL]     assertEquals(2f, new MutableFloat("2.0").floatValue(), 0.0001f); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f); [EOL]     assertEquals(2f, new MutableFloat(Float.valueOf(2f)).floatValue(), 0.0001f); [EOL]     assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f); [EOL]     assertEquals(2f, new MutableFloat("2.0").floatValue(), 0.0001f); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableFloat mutNumA = new MutableFloat(0f); [EOL]     final MutableFloat mutNumB = new MutableFloat(0f); [EOL]     final MutableFloat mutNumC = new MutableFloat(1f); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Float.valueOf(0f))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableFloat mutNumA = new MutableFloat(0f); [EOL]     final MutableFloat mutNumB = new MutableFloat(0f); [EOL]     final MutableFloat mutNumC = new MutableFloat(1f); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableFloat mutNumA = new MutableFloat(0f); [EOL]     final MutableFloat mutNumB = new MutableFloat(0f); [EOL]     final MutableFloat mutNumC = new MutableFloat(1f); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableFloat mutNumA = new MutableFloat(0f); [EOL]     final MutableFloat mutNumB = new MutableFloat(0f); [EOL]     final MutableFloat mutNumC = new MutableFloat(1f); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableFloat mutNumA = new MutableFloat(0f); [EOL]     final MutableFloat mutNumB = new MutableFloat(0f); [EOL]     final MutableFloat mutNumC = new MutableFloat(1f); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableFloat mutNumA = new MutableFloat(0f); [EOL]     final MutableFloat mutNumB = new MutableFloat(0f); [EOL]     final MutableFloat mutNumC = new MutableFloat(1f); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableFloat mutNumA = new MutableFloat(0f); [EOL]     final MutableFloat mutNumB = new MutableFloat(0f); [EOL]     final MutableFloat mutNumC = new MutableFloat(1f); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); [EOL] }
@Test [EOL] public void test_getPackageName_Class() { [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String.class)); [EOL]     assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getPackageName((Class<?>) null)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(boolean[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(byte[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(char[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(short[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(int[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(long[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(float[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(double[].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(Named.class)); [EOL] }
@Test [EOL] public void test_getPackageName_Class() { [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String.class)); [EOL]     assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getPackageName((Class<?>) null)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(boolean[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(byte[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(char[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(short[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(int[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(long[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(float[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(double[].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(Named.class)); [EOL] }
@Test [EOL] public void test_getPackageName_Class() { [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String.class)); [EOL]     assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getPackageName((Class<?>) null)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(boolean[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(byte[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(char[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(short[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(int[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(long[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(float[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(double[].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(Named.class)); [EOL] }
@Test [EOL] public void test_getAllInterfaces_Class() { [EOL]     final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]     assertEquals(6, list.size()); [EOL]     assertEquals(IB.class, list.get(0)); [EOL]     assertEquals(IC.class, list.get(1)); [EOL]     assertEquals(ID.class, list.get(2)); [EOL]     assertEquals(IE.class, list.get(3)); [EOL]     assertEquals(IF.class, list.get(4)); [EOL]     assertEquals(IA.class, list.get(5)); [EOL]     assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL] }
@Test [EOL] public void test_getAllInterfaces_Class() { [EOL]     final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]     assertEquals(6, list.size()); [EOL]     assertEquals(IB.class, list.get(0)); [EOL]     assertEquals(IC.class, list.get(1)); [EOL]     assertEquals(ID.class, list.get(2)); [EOL]     assertEquals(IE.class, list.get(3)); [EOL]     assertEquals(IF.class, list.get(4)); [EOL]     assertEquals(IA.class, list.get(5)); [EOL]     assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL] }
@Test [EOL] public void test_getAllInterfaces_Class() { [EOL]     final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]     assertEquals(6, list.size()); [EOL]     assertEquals(IB.class, list.get(0)); [EOL]     assertEquals(IC.class, list.get(1)); [EOL]     assertEquals(ID.class, list.get(2)); [EOL]     assertEquals(IE.class, list.get(3)); [EOL]     assertEquals(IF.class, list.get(4)); [EOL]     assertEquals(IA.class, list.get(5)); [EOL]     assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL] }
@Test [EOL] public void test_getAllInterfaces_Class() { [EOL]     final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]     assertEquals(6, list.size()); [EOL]     assertEquals(IB.class, list.get(0)); [EOL]     assertEquals(IC.class, list.get(1)); [EOL]     assertEquals(ID.class, list.get(2)); [EOL]     assertEquals(IE.class, list.get(3)); [EOL]     assertEquals(IF.class, list.get(4)); [EOL]     assertEquals(IA.class, list.get(5)); [EOL]     assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL] }
@Test [EOL] public void test_getAllInterfaces_Class() { [EOL]     final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]     assertEquals(6, list.size()); [EOL]     assertEquals(IB.class, list.get(0)); [EOL]     assertEquals(IC.class, list.get(1)); [EOL]     assertEquals(ID.class, list.get(2)); [EOL]     assertEquals(IE.class, list.get(3)); [EOL]     assertEquals(IF.class, list.get(4)); [EOL]     assertEquals(IA.class, list.get(5)); [EOL]     assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL] }
@Test [EOL] public void test_getAllInterfaces_Class() { [EOL]     final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]     assertEquals(6, list.size()); [EOL]     assertEquals(IB.class, list.get(0)); [EOL]     assertEquals(IC.class, list.get(1)); [EOL]     assertEquals(ID.class, list.get(2)); [EOL]     assertEquals(IE.class, list.get(3)); [EOL]     assertEquals(IF.class, list.get(4)); [EOL]     assertEquals(IA.class, list.get(5)); [EOL]     assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getShortCanonicalName(null, "<null>")); [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(new Inner(), "<null>")); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getShortCanonicalName(null, "<null>")); [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(new Inner(), "<null>")); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class)); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class)); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class)); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class)); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.7", ClassUtils.getShortCanonicalName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("ClassUtilsTest.6Named", ClassUtils.getShortCanonicalName(Named.class)); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(Inner.class)); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class)); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class)); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class)); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class)); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.7", ClassUtils.getShortCanonicalName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("ClassUtilsTest.6Named", ClassUtils.getShortCanonicalName(Named.class)); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(Inner.class)); [EOL] }
@Test [EOL] public void testHTML40_EXTENDED_ESCAPE() { [EOL]     final Set<String> col0 = new HashSet<String>(); [EOL]     final Set<String> col1 = new HashSet<String>(); [EOL]     final String[][] sa = EntityArrays.HTML40_EXTENDED_ESCAPE(); [EOL]     for (int i = 0; i < sa.length; i++) { [EOL]         assertTrue("Already added entry 0: " + i + " " + sa[i][0], col0.add(sa[i][0])); [EOL]         assertTrue("Already added entry 1: " + i + " " + sa[i][1], col1.add(sa[i][1])); [EOL]     } [EOL] }
@Test [EOL] public void testSupplementary() { [EOL]     final NumericEntityEscaper nee = new NumericEntityEscaper(); [EOL]     final String input = "\uD803\uDC22"; [EOL]     final String expected = "&#68642;"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testHandleCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]         fail("ConcurrentException not thrown!"); [EOL]     } catch (final ConcurrentException cex) { [EOL]         assertEquals("Wrong cause", ex, cex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testHandleCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]         fail("ConcurrentException not thrown!"); [EOL]     } catch (final ConcurrentException cex) { [EOL]         assertEquals("Wrong cause", ex, cex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testHandleCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]         fail("ConcurrentException not thrown!"); [EOL]     } catch (final ConcurrentException cex) { [EOL]         assertEquals("Wrong cause", ex, cex.getCause()); [EOL]     } [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentExceptionCauseError() { [EOL]     new ConcurrentException("An error", new Error()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentExceptionCauseError() { [EOL]     new ConcurrentException("An error", new Error()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentExceptionCauseError() { [EOL]     new ConcurrentException("An error", new Error()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentExceptionCauseError() { [EOL]     new ConcurrentException("An error", new Error()); [EOL] }
@Test [EOL] public void testTimeZoneMatches() { [EOL]     final DateParser parser = getInstance(yMdHmsSZ, REYKJAVIK); [EOL]     assertEquals(REYKJAVIK, parser.getTimeZone()); [EOL] }
@Test [EOL] public void test_Equality_Hash() { [EOL]     final DateParser[] parsers = { getInstance(yMdHmsSZ, NEW_YORK, Locale.US), getInstance(DMY_DOT, NEW_YORK, Locale.US), getInstance(YMD_SLASH, NEW_YORK, Locale.US), getInstance(MDY_DASH, NEW_YORK, Locale.US), getInstance(MDY_SLASH, NEW_YORK, Locale.US), getInstance(MDY_SLASH, REYKJAVIK, Locale.US), getInstance(MDY_SLASH, REYKJAVIK, SWEDEN) }; [EOL]     final Map<DateParser, Integer> map = new HashMap<DateParser, Integer>(); [EOL]     int i = 0; [EOL]     for (final DateParser parser : parsers) { [EOL]         map.put(parser, Integer.valueOf(i++)); [EOL]     } [EOL]     i = 0; [EOL]     for (final DateParser parser : parsers) { [EOL]         assertEquals(i++, map.get(parser).intValue()); [EOL]     } [EOL] }
@Test [EOL] public void testToStringContainsName() { [EOL]     final DateParser parser = getInstance(YMD_SLASH); [EOL]     assertTrue(parser.toString().startsWith("FastDate")); [EOL] }
@Test [EOL] public void testLang303() throws ParseException { [EOL]     DateParser parser = getInstance(YMD_SLASH); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2004, 11, 31); [EOL]     final Date date = parser.parse("2004/11/31"); [EOL]     parser = SerializationUtils.deserialize(SerializationUtils.serialize((Serializable) parser)); [EOL]     assertEquals(date, parser.parse("2004/11/31")); [EOL] }
@Test [EOL] public void testLocales_Long_AD() throws Exception { [EOL]     testLocales(LONG_FORMAT, false); [EOL] }
@Test [EOL] public void testTimeISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("T10:11:12", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("T10:11:12", text); [EOL]     text = DateFormatUtils.ISO_TIME_FORMAT.format(cal); [EOL]     assertEquals("T10:11:12", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("T10:11:12-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("T10:11:12-03:00", text); [EOL]     text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("T10:11:12-03:00", text); [EOL] }
@Test [EOL] public void testDayOf() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     cal.set(2003, 1, 10); [EOL]     final DateParser fdf = getInstance("W w F D y", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); [EOL] }
@Test [EOL] public void testLocales_Long_AD() throws Exception { [EOL]     testLocales(LONG_FORMAT, false); [EOL] }
@Test [EOL] public void testParseLongShort() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     cal.set(2003, 1, 10, 15, 33, 20); [EOL]     cal.set(Calendar.MILLISECOND, 989); [EOL]     cal.setTimeZone(NEW_YORK); [EOL]     DateParser fdf = getInstance("yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     final Date parse = fdf.parse("2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00"); [EOL]     assertEquals(cal.getTime(), parse); [EOL]     fdf = getInstance("y G M d a E H m s S Z", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.AD); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500")); [EOL] }
@Test [EOL] public void testParseLongShort() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     cal.set(2003, 1, 10, 15, 33, 20); [EOL]     cal.set(Calendar.MILLISECOND, 989); [EOL]     cal.setTimeZone(NEW_YORK); [EOL]     DateParser fdf = getInstance("yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     final Date parse = fdf.parse("2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00"); [EOL]     assertEquals(cal.getTime(), parse); [EOL]     fdf = getInstance("y G M d a E H m s S Z", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.AD); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500")); [EOL] }
@Test [EOL] public void testParseLongShort() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     cal.set(2003, 1, 10, 15, 33, 20); [EOL]     cal.set(Calendar.MILLISECOND, 989); [EOL]     cal.setTimeZone(NEW_YORK); [EOL]     DateParser fdf = getInstance("yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     final Date parse = fdf.parse("2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00"); [EOL]     assertEquals(cal.getTime(), parse); [EOL]     fdf = getInstance("y G M d a E H m s S Z", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.AD); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500")); [EOL] }
@Test [EOL] public void testParseLongShort() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     cal.set(2003, 1, 10, 15, 33, 20); [EOL]     cal.set(Calendar.MILLISECOND, 989); [EOL]     cal.setTimeZone(NEW_YORK); [EOL]     DateParser fdf = getInstance("yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     final Date parse = fdf.parse("2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00"); [EOL]     assertEquals(cal.getTime(), parse); [EOL]     fdf = getInstance("y G M d a E H m s S Z", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.AD); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500")); [EOL] }
@Test [EOL] public void testParseLongShort() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     cal.set(2003, 1, 10, 15, 33, 20); [EOL]     cal.set(Calendar.MILLISECOND, 989); [EOL]     cal.setTimeZone(NEW_YORK); [EOL]     DateParser fdf = getInstance("yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     final Date parse = fdf.parse("2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00"); [EOL]     assertEquals(cal.getTime(), parse); [EOL]     fdf = getInstance("y G M d a E H m s S Z", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.AD); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500")); [EOL] }
@Test [EOL] public void testParseLongShort() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     cal.set(2003, 1, 10, 15, 33, 20); [EOL]     cal.set(Calendar.MILLISECOND, 989); [EOL]     cal.setTimeZone(NEW_YORK); [EOL]     DateParser fdf = getInstance("yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     final Date parse = fdf.parse("2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00"); [EOL]     assertEquals(cal.getTime(), parse); [EOL]     fdf = getInstance("y G M d a E H m s S Z", NEW_YORK, Locale.US); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500")); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.AD); [EOL]     assertEquals(cal.getTime(), fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500")); [EOL] }
@Test [EOL] public void testSubstituteDefaultProperties() { [EOL]     final String org = "${doesnotwork}"; [EOL]     System.setProperty("doesnotwork", "It works!"); [EOL]     final Properties props = new Properties(System.getProperties()); [EOL]     assertEquals("It works!", StrSubstitutor.replace(org, props)); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSubstituteDefaultProperties() { [EOL]     final String org = "${doesnotwork}"; [EOL]     System.setProperty("doesnotwork", "It works!"); [EOL]     final Properties props = new Properties(System.getProperties()); [EOL]     assertEquals("It works!", StrSubstitutor.replace(org, props)); [EOL] }
@Test [EOL] public void testSubstituteDefaultProperties() { [EOL]     final String org = "${doesnotwork}"; [EOL]     System.setProperty("doesnotwork", "It works!"); [EOL]     final Properties props = new Properties(System.getProperties()); [EOL]     assertEquals("It works!", StrSubstitutor.replace(org, props)); [EOL] }
@Test [EOL] public void testSubstituteDefaultProperties() { [EOL]     final String org = "${doesnotwork}"; [EOL]     System.setProperty("doesnotwork", "It works!"); [EOL]     final Properties props = new Properties(System.getProperties()); [EOL]     assertEquals("It works!", StrSubstitutor.replace(org, props)); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testReplaceToIdentical() { [EOL]     values.put("animal", "$${${thing}}"); [EOL]     values.put("thing", "animal"); [EOL]     doTestReplace("The ${animal} jumps.", "The ${animal} jumps.", true); [EOL] }
@Test [EOL] public void testGetSetPrefix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariablePrefix('<'); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariablePrefix("<<"); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariablePrefix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariablePrefixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL]     try { [EOL]         sub.setVariablePrefixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL] }
@Test [EOL] public void testGetSetPrefix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariablePrefix('<'); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariablePrefix("<<"); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariablePrefix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariablePrefixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL]     try { [EOL]         sub.setVariablePrefixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL] }
@Test [EOL] public void testGetSetPrefix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariablePrefix('<'); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariablePrefix("<<"); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariablePrefix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariablePrefixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL]     try { [EOL]         sub.setVariablePrefixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] }
@Test [EOL] public void testFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(23, 345); [EOL]     assertEquals(23, f.getNumerator()); [EOL]     assertEquals(345, f.getDenominator()); [EOL]     f = Fraction.getFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, 10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, -10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, -10); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(4, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(23, 345); [EOL]     assertEquals(23, f.getNumerator()); [EOL]     assertEquals(345, f.getDenominator()); [EOL]     f = Fraction.getFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, 10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, -10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, -10); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(4, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(23, 345); [EOL]     assertEquals(23, f.getNumerator()); [EOL]     assertEquals(345, f.getDenominator()); [EOL]     f = Fraction.getFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, 10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, -10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, -10); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(4, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(23, 345); [EOL]     assertEquals(23, f.getNumerator()); [EOL]     assertEquals(345, f.getDenominator()); [EOL]     f = Fraction.getFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, 10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, -10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, -10); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(4, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(23, 345); [EOL]     assertEquals(23, f.getNumerator()); [EOL]     assertEquals(345, f.getDenominator()); [EOL]     f = Fraction.getFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, 10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, -10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, -10); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(4, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testReduce() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     Fraction result = f.reduce(); [EOL]     assertEquals(2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     f = Fraction.getFraction(-2, -3); [EOL]     result = f.reduce(); [EOL]     assertEquals(2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     f = Fraction.getFraction(2, -3); [EOL]     result = f.reduce(); [EOL]     assertEquals(-2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     f = Fraction.getFraction(-2, 3); [EOL]     result = f.reduce(); [EOL]     assertEquals(-2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     assertSame(f, result); [EOL]     f = Fraction.getFraction(2, 3); [EOL]     result = f.reduce(); [EOL]     assertEquals(2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     assertSame(f, result); [EOL]     f = Fraction.getFraction(0, 1); [EOL]     result = f.reduce(); [EOL]     assertEquals(0, result.getNumerator()); [EOL]     assertEquals(1, result.getDenominator()); [EOL]     assertSame(f, result); [EOL]     f = Fraction.getFraction(0, 100); [EOL]     result = f.reduce(); [EOL]     assertEquals(0, result.getNumerator()); [EOL]     assertEquals(1, result.getDenominator()); [EOL]     assertSame(result, Fraction.ZERO); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 2); [EOL]     result = f.reduce(); [EOL]     assertEquals(Integer.MIN_VALUE / 2, result.getNumerator()); [EOL]     assertEquals(1, result.getDenominator()); [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testMultiply() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(6, 10); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = f.multiplyBy(f2); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(-3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.multiplyBy(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testMultiply() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(6, 10); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = f.multiplyBy(f2); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(-3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.multiplyBy(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testMultiply() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(6, 10); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = f.multiplyBy(f2); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(-3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.multiplyBy(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testMultiply() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(6, 10); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = f.multiplyBy(f2); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(-3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.multiplyBy(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testListArray() { [EOL]     final String input = "a  b c"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     final String[] array = tok.getTokenArray(); [EOL]     final List<?> list = tok.getTokenList(); [EOL]     assertEquals(Arrays.asList(array), list); [EOL]     assertEquals(3, list.size()); [EOL] }
@Test [EOL] public void testListArray() { [EOL]     final String input = "a  b c"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     final String[] array = tok.getTokenArray(); [EOL]     final List<?> list = tok.getTokenList(); [EOL]     assertEquals(Arrays.asList(array), list); [EOL]     assertEquals(3, list.size()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void test6() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", " c", "d;\"e", "f", null, null, null }; [EOL]     int nextCount = 0; [EOL]     while (tok.hasNext()) { [EOL]         tok.next(); [EOL]         nextCount++; [EOL]     } [EOL]     int prevCount = 0; [EOL]     while (tok.hasPrevious()) { [EOL]         tok.previous(); [EOL]         prevCount++; [EOL]     } [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     assertTrue("could not cycle through entire token list" + " using the 'hasNext' and 'next' methods", nextCount == expected.length); [EOL]     assertTrue("could not cycle through entire token list" + " using the 'hasPrevious' and 'previous' methods", prevCount == expected.length); [EOL] }
@Test [EOL] public void test6() { [EOL]     final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]     final StrTokenizer tok = new StrTokenizer(input); [EOL]     tok.setDelimiterChar(';'); [EOL]     tok.setQuoteChar('"'); [EOL]     tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     final String[] tokens = tok.getTokenArray(); [EOL]     final String[] expected = new String[] { "a", "b", " c", "d;\"e", "f", null, null, null }; [EOL]     int nextCount = 0; [EOL]     while (tok.hasNext()) { [EOL]         tok.next(); [EOL]         nextCount++; [EOL]     } [EOL]     int prevCount = 0; [EOL]     while (tok.hasPrevious()) { [EOL]         tok.previous(); [EOL]         prevCount++; [EOL]     } [EOL]     assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]     assertTrue("could not cycle through entire token list" + " using the 'hasNext' and 'next' methods", nextCount == expected.length); [EOL]     assertTrue("could not cycle through entire token list" + " using the 'hasPrevious' and 'previous' methods", prevCount == expected.length); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testTSV() { [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]     this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicQuotedTrimmed1() { [EOL]     final String input = "a: 'b' :"; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new DateFormatUtils()); [EOL]     final Constructor<?>[] cons = DateFormatUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(DateFormatUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(DateFormatUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testTimeZoneMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, NEW_YORK); [EOL]     assertEquals(NEW_YORK, printer.getTimeZone()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testReflectionEquals() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); [EOL]     o2.setA(4); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); [EOL] }
@Test [EOL] public void testBoolean() { [EOL]     final boolean o1 = true; [EOL]     final boolean o2 = false; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testBoolean() { [EOL]     final boolean o1 = true; [EOL]     final boolean o2 = false; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testBoolean() { [EOL]     final boolean o1 = true; [EOL]     final boolean o2 = false; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testBoolean() { [EOL]     final boolean o1 = true; [EOL]     final boolean o2 = false; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testBoolean() { [EOL]     final boolean o1 = true; [EOL]     final boolean o2 = false; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     TestObject[] obj1 = new TestObject[3]; [EOL]     obj1[0] = new TestObject(4); [EOL]     obj1[1] = new TestObject(5); [EOL]     obj1[2] = null; [EOL]     TestObject[] obj2 = new TestObject[3]; [EOL]     obj2[0] = new TestObject(4); [EOL]     obj2[1] = new TestObject(5); [EOL]     obj2[2] = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1].setA(6); [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1].setA(5); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[2] = obj1[1]; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[2] = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     char[] obj1 = new char[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     char[] obj2 = new char[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testTabMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.tabMatcher(); [EOL]     assertSame(matcher, StrMatcher.tabMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testIncrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testIncrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals((byte) 0, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals((byte) 0, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals((byte) 0, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals((byte) 0, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals((byte) 0, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals((byte) 0, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0))); [EOL]     assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1))); [EOL]     assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0))); [EOL]     assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1))); [EOL]     assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0))); [EOL]     assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1))); [EOL]     assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1))); [EOL] }
@Test [EOL] public void testAlternatePadCharacter() { [EOL]     final char pad = '_'; [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, pad).toString()); [EOL]     assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, pad).toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, pad).toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, pad).toString()); [EOL]     assertEquals("_fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, pad).toString()); [EOL]     assertEquals("___fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, pad).toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, pad).toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, pad).toString()); [EOL]     assertEquals("fo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, pad).toString()); [EOL]     assertEquals("fo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, pad).toString()); [EOL] }
@Test [EOL] public void testConstructable() { [EOL]     new EnumUtils(); [EOL] }
@Test [EOL] public void test_generateBitVector() { [EOL]     assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class))); [EOL]     assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED))); [EOL]     assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER))); [EOL]     assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN))); [EOL]     assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER))); [EOL]     assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN))); [EOL]     assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN))); [EOL]     assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN))); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVectors_nullArrayElement() { [EOL]     EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVectors_nullArrayElement() { [EOL]     EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVectors_nullArrayElement() { [EOL]     EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVectors_nullArrayElement() { [EOL]     EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLowYearPadding() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     cal.set(1, 0, 1); [EOL]     assertEquals("0001/01/01", format.format(cal)); [EOL]     cal.set(10, 0, 1); [EOL]     assertEquals("0010/01/01", format.format(cal)); [EOL]     cal.set(100, 0, 1); [EOL]     assertEquals("0100/01/01", format.format(cal)); [EOL]     cal.set(999, 0, 1); [EOL]     assertEquals("0999/01/01", format.format(cal)); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN); [EOL]     assertEquals(SWEDEN, printer.getLocale()); [EOL] }
@Test [EOL] public void testFormattable_padded() throws Exception { [EOL]     final Triple<String, String, String> triple = Triple.of("Key", "Something", "Value"); [EOL]     assertEquals("         (Key,Something,Value)", String.format("%1$30s", triple)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testSetDefaultEx() { [EOL]     ToStringBuilder.setDefaultStyle(null); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     boolean[] array = new boolean[] { true, false, false }; [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     boolean[] array = new boolean[] { true, false, false }; [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     boolean[] array = new boolean[] { true, false, false }; [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] array = new short[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] array = new short[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] array = new short[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("HI", new MutableObject<String>("HI").toString()); [EOL]     assertEquals("10.0", new MutableObject<Double>(Double.valueOf(10)).toString()); [EOL]     assertEquals("null", new MutableObject<Object>(null).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("HI", new MutableObject<String>("HI").toString()); [EOL]     assertEquals("10.0", new MutableObject<Double>(Double.valueOf(10)).toString()); [EOL]     assertEquals("null", new MutableObject<Object>(null).toString()); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new DateUtils()); [EOL]     final Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(DateUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(DateUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testAddWeeks() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addWeeks(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addWeeks(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 12, 4, 3, 2, 1); [EOL]     result = DateUtils.addWeeks(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 5, 28, 4, 3, 2, 1); [EOL] }
@Test [EOL] public void testAddHours() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addHours(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addHours(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 5, 3, 2, 1); [EOL]     result = DateUtils.addHours(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 3, 3, 2, 1); [EOL] }
@Test [EOL] public void testTruncateHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField); [EOL] }
@Test [EOL] public void testTruncateHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField); [EOL] }
@Test [EOL] public void testRound() throws Exception { [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round(date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-0 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date0, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round(date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round(date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round(date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round(date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round(date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round(date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round(date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round(date2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round((Object) date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round((Object) date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.round((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm4, Calendar.AM_PM)); [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date rounding tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL] }
@Test [EOL] public void testRound() throws Exception { [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round(date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-0 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date0, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round(date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round(date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round(date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round(date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round(date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round(date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round(date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round(date2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round((Object) date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round((Object) date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.round((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm4, Calendar.AM_PM)); [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date rounding tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL] }
@Test [EOL] public void testRound() throws Exception { [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round(date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-0 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date0, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round(date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round(date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round(date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round(date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round(date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round(date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round(date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round(date2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round((Object) date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round((Object) date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.round((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm4, Calendar.AM_PM)); [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date rounding tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL] }
@Test [EOL] public void testRound() throws Exception { [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round(date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-0 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date0, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round(date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round(date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round(date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round(date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round(date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round(date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round(date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round(date2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round((Object) date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round((Object) date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.round((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm4, Calendar.AM_PM)); [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date rounding tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL] }
@Test [EOL] public void testTruncateHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField); [EOL] }
@Test [EOL] public void testTruncateHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField); [EOL] }
@Test [EOL] public void testTruncateHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField); [EOL] }
@Test [EOL] public void testCeil() throws Exception { [EOL]     assertEquals("ceiling javadoc-1 failed", dateTimeParser.parse("March 28, 2002 14:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.HOUR)); [EOL]     assertEquals("ceiling javadoc-2 failed", dateTimeParser.parse("April 1, 2002 00:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.MONTH)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling(date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling(date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling(date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling(date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling(date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling(date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling(date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling(date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling(date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling(date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling((Object) date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling((Object) date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("ceiling calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.ceiling((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] }
@Test [EOL] public void testCeil() throws Exception { [EOL]     assertEquals("ceiling javadoc-1 failed", dateTimeParser.parse("March 28, 2002 14:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.HOUR)); [EOL]     assertEquals("ceiling javadoc-2 failed", dateTimeParser.parse("April 1, 2002 00:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.MONTH)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling(date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling(date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling(date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling(date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling(date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling(date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling(date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling(date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling(date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling(date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling((Object) date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling((Object) date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("ceiling calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.ceiling((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] }
@Test [EOL] public void testCeil() throws Exception { [EOL]     assertEquals("ceiling javadoc-1 failed", dateTimeParser.parse("March 28, 2002 14:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.HOUR)); [EOL]     assertEquals("ceiling javadoc-2 failed", dateTimeParser.parse("April 1, 2002 00:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.MONTH)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling(date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling(date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling(date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling(date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling(date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling(date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling(date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling(date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling(date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling(date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling((Object) date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling((Object) date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("ceiling calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.ceiling((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] }
@Test [EOL] public void testCeil() throws Exception { [EOL]     assertEquals("ceiling javadoc-1 failed", dateTimeParser.parse("March 28, 2002 14:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.HOUR)); [EOL]     assertEquals("ceiling javadoc-2 failed", dateTimeParser.parse("April 1, 2002 00:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.MONTH)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling(date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling(date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling(date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling(date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling(date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling(date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling(date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling(date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling(date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling(date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling((Object) date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling((Object) date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("ceiling calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.ceiling((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] }
@Test [EOL] public void testTruncateHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField); [EOL] }
@Test [EOL] public void testIteratorEx() throws Exception { [EOL]     try { [EOL]         DateUtils.iterator(Calendar.getInstance(), -9999); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testIteratorEx() throws Exception { [EOL]     try { [EOL]         DateUtils.iterator(Calendar.getInstance(), -9999); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testIteratorEx() throws Exception { [EOL]     try { [EOL]         DateUtils.iterator(Calendar.getInstance(), -9999); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testIteratorEx() throws Exception { [EOL]     try { [EOL]         DateUtils.iterator(Calendar.getInstance(), -9999); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSecondsOfMonthWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH); [EOL]     assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); [EOL] }
@Test [EOL] public void testSecondsOfMonthWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH); [EOL]     assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); [EOL] }
@Test [EOL] public void testSecondsofMinuteWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE); [EOL]     assertEquals(seconds, testResult); [EOL]     assertEquals(aCalendar.get(Calendar.SECOND), testResult); [EOL] }
@Test [EOL] public void testSecondsofMinuteWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE); [EOL]     assertEquals(seconds, testResult); [EOL]     assertEquals(aCalendar.get(Calendar.SECOND), testResult); [EOL] }
@Test [EOL] public void testSecondsOfMonthWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH); [EOL]     assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); [EOL] }
@Test [EOL] public void testSecondsOfMonthWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH); [EOL]     assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); [EOL] }
@Test [EOL] public void testSecondsOfMonthWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH); [EOL]     assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); [EOL] }
@Test [EOL] public void testCapitalize_String() { [EOL]     assertEquals(null, WordUtils.capitalize(null)); [EOL]     assertEquals("", WordUtils.capitalize("")); [EOL]     assertEquals("  ", WordUtils.capitalize("  ")); [EOL]     assertEquals("I", WordUtils.capitalize("I")); [EOL]     assertEquals("I", WordUtils.capitalize("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123")); [EOL]     assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123")); [EOL]     assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalize_String() { [EOL]     assertEquals(null, WordUtils.capitalize(null)); [EOL]     assertEquals("", WordUtils.capitalize("")); [EOL]     assertEquals("  ", WordUtils.capitalize("  ")); [EOL]     assertEquals("I", WordUtils.capitalize("I")); [EOL]     assertEquals("I", WordUtils.capitalize("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123")); [EOL]     assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123")); [EOL]     assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalize_String() { [EOL]     assertEquals(null, WordUtils.capitalize(null)); [EOL]     assertEquals("", WordUtils.capitalize("")); [EOL]     assertEquals("  ", WordUtils.capitalize("  ")); [EOL]     assertEquals("I", WordUtils.capitalize("I")); [EOL]     assertEquals("I", WordUtils.capitalize("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123")); [EOL]     assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123")); [EOL]     assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalize_String() { [EOL]     assertEquals(null, WordUtils.capitalize(null)); [EOL]     assertEquals("", WordUtils.capitalize("")); [EOL]     assertEquals("  ", WordUtils.capitalize("  ")); [EOL]     assertEquals("I", WordUtils.capitalize("I")); [EOL]     assertEquals("I", WordUtils.capitalize("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123")); [EOL]     assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123")); [EOL]     assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123")); [EOL] }
@Test [EOL] public void testCapitalize_String() { [EOL]     assertEquals(null, WordUtils.capitalize(null)); [EOL]     assertEquals("", WordUtils.capitalize("")); [EOL]     assertEquals("  ", WordUtils.capitalize("  ")); [EOL]     assertEquals("I", WordUtils.capitalize("I")); [EOL]     assertEquals("I", WordUtils.capitalize("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123")); [EOL]     assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123")); [EOL]     assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123")); [EOL] }
@Test [EOL] public void testInitials_String() { [EOL]     assertEquals(null, WordUtils.initials(null)); [EOL]     assertEquals("", WordUtils.initials("")); [EOL]     assertEquals("", WordUtils.initials("  ")); [EOL]     assertEquals("I", WordUtils.initials("I")); [EOL]     assertEquals("i", WordUtils.initials("i")); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee")); [EOL]     assertEquals("BJ", WordUtils.initials("Ben J.Lee")); [EOL]     assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123")); [EOL] }
@Test [EOL] public void testInitials_String() { [EOL]     assertEquals(null, WordUtils.initials(null)); [EOL]     assertEquals("", WordUtils.initials("")); [EOL]     assertEquals("", WordUtils.initials("  ")); [EOL]     assertEquals("I", WordUtils.initials("I")); [EOL]     assertEquals("i", WordUtils.initials("i")); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee")); [EOL]     assertEquals("BJ", WordUtils.initials("Ben J.Lee")); [EOL]     assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123")); [EOL] }
@Test [EOL] public void testInitials_String() { [EOL]     assertEquals(null, WordUtils.initials(null)); [EOL]     assertEquals("", WordUtils.initials("")); [EOL]     assertEquals("", WordUtils.initials("  ")); [EOL]     assertEquals("I", WordUtils.initials("I")); [EOL]     assertEquals("i", WordUtils.initials("i")); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee")); [EOL]     assertEquals("BJ", WordUtils.initials("Ben J.Lee")); [EOL]     assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123")); [EOL] }
@Test [EOL] public void testInitials_String() { [EOL]     assertEquals(null, WordUtils.initials(null)); [EOL]     assertEquals("", WordUtils.initials("")); [EOL]     assertEquals("", WordUtils.initials("  ")); [EOL]     assertEquals("I", WordUtils.initials("I")); [EOL]     assertEquals("i", WordUtils.initials("i")); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee")); [EOL]     assertEquals("BJ", WordUtils.initials("Ben J.Lee")); [EOL]     assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123")); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAddInitializerNullName() { [EOL]     initializer.addInitializer(null, new ChildBackgroundInitializer()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAddInitializerNullName() { [EOL]     initializer.addInitializer(null, new ChildBackgroundInitializer()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAddInitializerNullName() { [EOL]     initializer.addInitializer(null, new ChildBackgroundInitializer()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAddInitializerNullName() { [EOL]     initializer.addInitializer(null, new ChildBackgroundInitializer()); [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLocaleLookupList_LocaleLocale() { [EOL]     assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); [EOL] }
@Test [EOL] public void testLocaleLookupList_LocaleLocale() { [EOL]     assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); [EOL] }
@Test [EOL] public void testLocaleLookupList_LocaleLocale() { [EOL]     assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); [EOL] }
@Test [EOL] public void testLocaleLookupList_LocaleLocale() { [EOL]     assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); [EOL] }
@Test [EOL] public void testLocaleLookupList_LocaleLocale() { [EOL]     assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); [EOL] }
@Test [EOL] public void testLocaleLookupList_LocaleLocale() { [EOL]     assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); [EOL] }
@Test [EOL] public void testLocaleLookupList_LocaleLocale() { [EOL]     assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); [EOL] }
@Test [EOL] public void testLocaleLookupList_LocaleLocale() { [EOL]     assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new ArrayUtils()); [EOL]     final Constructor<?>[] cons = ArrayUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(ArrayUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(ArrayUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test [EOL] public void testCloneShort() { [EOL]     assertEquals(null, ArrayUtils.clone((short[]) null)); [EOL]     final short[] original = new short[] { 1, 4 }; [EOL]     final short[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneShort() { [EOL]     assertEquals(null, ArrayUtils.clone((short[]) null)); [EOL]     final short[] original = new short[] { 1, 4 }; [EOL]     final short[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneShort() { [EOL]     assertEquals(null, ArrayUtils.clone((short[]) null)); [EOL]     final short[] original = new short[] { 1, 4 }; [EOL]     final short[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testNullToEmptyLong() { [EOL]     assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null)); [EOL]     final long[] original = new long[] { 1L, 2L }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final long[] empty = new long[] {}; [EOL]     final long[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyLong() { [EOL]     assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null)); [EOL]     final long[] original = new long[] { 1L, 2L }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final long[] empty = new long[] {}; [EOL]     final long[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyLong() { [EOL]     assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null)); [EOL]     final long[] original = new long[] { 1L, 2L }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final long[] empty = new long[] {}; [EOL]     final long[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyChar() { [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null)); [EOL]     final char[] original = new char[] { 'a', 'b' }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final char[] empty = new char[] {}; [EOL]     final char[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyChar() { [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null)); [EOL]     final char[] original = new char[] { 'a', 'b' }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final char[] empty = new char[] {}; [EOL]     final char[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyChar() { [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null)); [EOL]     final char[] original = new char[] { 'a', 'b' }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final char[] empty = new char[] {}; [EOL]     final char[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyBoolean() { [EOL]     assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); [EOL]     final boolean[] original = new boolean[] { true, false }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final boolean[] empty = new boolean[] {}; [EOL]     final boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyBoolean() { [EOL]     assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); [EOL]     final boolean[] original = new boolean[] { true, false }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final boolean[] empty = new boolean[] {}; [EOL]     final boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyBoolean() { [EOL]     assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); [EOL]     final boolean[] original = new boolean[] { true, false }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final boolean[] empty = new boolean[] {}; [EOL]     final boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyLongObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null)); [EOL]     @SuppressWarnings("boxing") [EOL]     final Long[] original = new Long[] { 1L, 2L }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Long[] empty = new Long[] {}; [EOL]     final Long[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyLongObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null)); [EOL]     @SuppressWarnings("boxing") [EOL]     final Long[] original = new Long[] { 1L, 2L }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Long[] empty = new Long[] {}; [EOL]     final Long[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyLongObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null)); [EOL]     @SuppressWarnings("boxing") [EOL]     final Long[] original = new Long[] { 1L, 2L }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Long[] empty = new Long[] {}; [EOL]     final Long[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyShortObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null)); [EOL]     @SuppressWarnings("boxing") [EOL]     final Short[] original = new Short[] { 1, 2 }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Short[] empty = new Short[] {}; [EOL]     final Short[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyByteObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null)); [EOL]     final Byte[] original = new Byte[] { 0x0F, 0x0E }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Byte[] empty = new Byte[] {}; [EOL]     final Byte[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyByteObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null)); [EOL]     final Byte[] original = new Byte[] { 0x0F, 0x0E }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Byte[] empty = new Byte[] {}; [EOL]     final Byte[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyByteObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null)); [EOL]     final Byte[] original = new Byte[] { 0x0F, 0x0E }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Byte[] empty = new Byte[] {}; [EOL]     final Byte[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyFloatObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null)); [EOL]     final Float[] original = new Float[] { 2.6f, 3.8f }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Float[] empty = new Float[] {}; [EOL]     final Float[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyFloatObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null)); [EOL]     final Float[] original = new Float[] { 2.6f, 3.8f }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Float[] empty = new Float[] {}; [EOL]     final Float[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyFloatObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null)); [EOL]     final Float[] original = new Float[] { 2.6f, 3.8f }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Float[] empty = new Float[] {}; [EOL]     final Float[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testSubarrayShort() { [EOL]     final short[] nullArray = null; [EOL]     final short[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final short[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final short[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final short[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("short type", short.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSubarrayShort() { [EOL]     final short[] nullArray = null; [EOL]     final short[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final short[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final short[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final short[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("short type", short.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSubarrayFloat() { [EOL]     final float[] nullArray = null; [EOL]     final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final float[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final float[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final float[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("float type", float.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSameLength() { [EOL]     final Object[] nullArray = null; [EOL]     final Object[] emptyArray = new Object[0]; [EOL]     final Object[] oneArray = new Object[] { "pick" }; [EOL]     final Object[] twoArray = new Object[] { "pick", "stick" }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLength() { [EOL]     final Object[] nullArray = null; [EOL]     final Object[] emptyArray = new Object[0]; [EOL]     final Object[] oneArray = new Object[] { "pick" }; [EOL]     final Object[] twoArray = new Object[] { "pick", "stick" }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLength() { [EOL]     final Object[] nullArray = null; [EOL]     final Object[] emptyArray = new Object[0]; [EOL]     final Object[] oneArray = new Object[] { "pick" }; [EOL]     final Object[] twoArray = new Object[] { "pick", "stick" }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLength() { [EOL]     final Object[] nullArray = null; [EOL]     final Object[] emptyArray = new Object[0]; [EOL]     final Object[] oneArray = new Object[] { "pick" }; [EOL]     final Object[] twoArray = new Object[] { "pick", "stick" }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLength() { [EOL]     final Object[] nullArray = null; [EOL]     final Object[] emptyArray = new Object[0]; [EOL]     final Object[] oneArray = new Object[] { "pick" }; [EOL]     final Object[] twoArray = new Object[] { "pick", "stick" }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthShort() { [EOL]     final short[] nullArray = null; [EOL]     final short[] emptyArray = new short[0]; [EOL]     final short[] oneArray = new short[] { 4 }; [EOL]     final short[] twoArray = new short[] { 6, 8 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthShort() { [EOL]     final short[] nullArray = null; [EOL]     final short[] emptyArray = new short[0]; [EOL]     final short[] oneArray = new short[] { 4 }; [EOL]     final short[] twoArray = new short[] { 6, 8 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthShort() { [EOL]     final short[] nullArray = null; [EOL]     final short[] emptyArray = new short[0]; [EOL]     final short[] oneArray = new short[] { 4 }; [EOL]     final short[] twoArray = new short[] { 6, 8 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthShort() { [EOL]     final short[] nullArray = null; [EOL]     final short[] emptyArray = new short[0]; [EOL]     final short[] oneArray = new short[] { 4 }; [EOL]     final short[] twoArray = new short[] { 6, 8 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthShort() { [EOL]     final short[] nullArray = null; [EOL]     final short[] emptyArray = new short[0]; [EOL]     final short[] oneArray = new short[] { 4 }; [EOL]     final short[] twoArray = new short[] { 6, 8 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testReverseLong() { [EOL]     long[] array = new long[] { 1L, 2L, 3L }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3L); [EOL]     assertEquals(array[1], 2L); [EOL]     assertEquals(array[2], 1L); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseLong() { [EOL]     long[] array = new long[] { 1L, 2L, 3L }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3L); [EOL]     assertEquals(array[1], 2L); [EOL]     assertEquals(array[2], 1L); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseLong() { [EOL]     long[] array = new long[] { 1L, 2L, 3L }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3L); [EOL]     assertEquals(array[1], 2L); [EOL]     assertEquals(array[2], 1L); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseLong() { [EOL]     long[] array = new long[] { 1L, 2L, 3L }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3L); [EOL]     assertEquals(array[1], 2L); [EOL]     assertEquals(array[2], 1L); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseBoolean() { [EOL]     boolean[] array = new boolean[] { false, false, true }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertTrue(array[0]); [EOL]     assertFalse(array[1]); [EOL]     assertFalse(array[2]); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseBoolean() { [EOL]     boolean[] array = new boolean[] { false, false, true }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertTrue(array[0]); [EOL]     assertFalse(array[1]); [EOL]     assertFalse(array[2]); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseBoolean() { [EOL]     boolean[] array = new boolean[] { false, false, true }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertTrue(array[0]); [EOL]     assertFalse(array[1]); [EOL]     assertFalse(array[2]); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] }
@Test [EOL] public void testIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6)); [EOL] }
@Test [EOL] public void testIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6)); [EOL] }
@Test [EOL] public void testIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6)); [EOL] }
@Test [EOL] public void testIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6)); [EOL] }
@Test [EOL] public void testIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6)); [EOL] }
@Test [EOL] public void testLastIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88)); [EOL] }
@Test [EOL] public void testLastIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88)); [EOL] }
@Test [EOL] public void testLastIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88)); [EOL] }
@Test [EOL] public void testLastIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88)); [EOL] }
@Test [EOL] public void testLastIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88)); [EOL] }
@Test [EOL] public void testIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); [EOL] }
@Test [EOL] public void testIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); [EOL] }
@Test [EOL] public void testIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); [EOL] }
@Test [EOL] public void testIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); [EOL] }
@Test [EOL] public void testIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); [EOL] }
@Test [EOL] public void testIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); [EOL] }
@Test [EOL] public void testIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); [EOL] }
@Test [EOL] public void testIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] }
@Test [EOL] public void testToObject_long() { [EOL]     final long[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.toObject(new long[0])); [EOL]     assertTrue(Arrays.equals(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, ArrayUtils.toObject(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_long() { [EOL]     final long[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.toObject(new long[0])); [EOL]     assertTrue(Arrays.equals(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, ArrayUtils.toObject(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_long() { [EOL]     final long[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.toObject(new long[0])); [EOL]     assertTrue(Arrays.equals(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, ArrayUtils.toObject(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_int() { [EOL]     final int[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.toObject(new int[0])); [EOL]     assertTrue(Arrays.equals(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, ArrayUtils.toObject(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_int() { [EOL]     final int[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.toObject(new int[0])); [EOL]     assertTrue(Arrays.equals(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, ArrayUtils.toObject(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_int() { [EOL]     final int[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.toObject(new int[0])); [EOL]     assertTrue(Arrays.equals(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, ArrayUtils.toObject(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToPrimitive_short_short() { [EOL]     final Short[] s = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], Short.MIN_VALUE)); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, Short.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null, Short.valueOf((short) 9999999) }, Short.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_short_short() { [EOL]     final Short[] s = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], Short.MIN_VALUE)); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, Short.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null, Short.valueOf((short) 9999999) }, Short.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_short_short() { [EOL]     final Short[] s = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], Short.MIN_VALUE)); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, Short.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null, Short.valueOf((short) 9999999) }, Short.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_short_short() { [EOL]     final Short[] s = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], Short.MIN_VALUE)); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, Short.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null, Short.valueOf((short) 9999999) }, Short.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_short_short() { [EOL]     final Short[] s = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], Short.MIN_VALUE)); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, Short.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null, Short.valueOf((short) 9999999) }, Short.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToObject_short() { [EOL]     final short[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.toObject(new short[0])); [EOL]     assertTrue(Arrays.equals(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, ArrayUtils.toObject(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_short() { [EOL]     final short[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.toObject(new short[0])); [EOL]     assertTrue(Arrays.equals(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, ArrayUtils.toObject(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_short() { [EOL]     final short[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.toObject(new short[0])); [EOL]     assertTrue(Arrays.equals(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, ArrayUtils.toObject(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }))); [EOL] }
@Test [EOL] public void testToPrimitive_double() { [EOL]     final Double[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0])); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_double() { [EOL]     final Double[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0])); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_double() { [EOL]     final Double[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0])); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_double() { [EOL]     final Double[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0])); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_double() { [EOL]     final Double[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0])); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_double() { [EOL]     final Double[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0])); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_float_float() { [EOL]     final Float[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null, Float.valueOf(9999999) }, Float.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_float_float() { [EOL]     final Float[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null, Float.valueOf(9999999) }, Float.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_float_float() { [EOL]     final Float[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null, Float.valueOf(9999999) }, Float.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_float_float() { [EOL]     final Float[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null, Float.valueOf(9999999) }, Float.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_float_float() { [EOL]     final Float[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null, Float.valueOf(9999999) }, Float.MAX_VALUE))); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test [EOL] public void testLANG571() { [EOL]     final String[] stringArray = null; [EOL]     final String aString = null; [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, 0, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectArrayInt() { [EOL]     int[] newArray; [EOL]     newArray = ArrayUtils.add((int[]) null, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 0 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((int[]) null, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL]     final int[] array1 = new int[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayInt() { [EOL]     int[] newArray; [EOL]     newArray = ArrayUtils.add((int[]) null, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 0 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((int[]) null, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL]     final int[] array1 = new int[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testLANG571() { [EOL]     final String[] stringArray = null; [EOL]     final String aString = null; [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, 0, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLANG571() { [EOL]     final String[] stringArray = null; [EOL]     final String aString = null; [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, 0, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testLANG571() { [EOL]     final String[] stringArray = null; [EOL]     final String aString = null; [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, 0, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testRemoveElementCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.removeElement((char[]) null, 'a'); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.removeElement((char[]) null, 'a'); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.removeElement((char[]) null, 'a'); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.removeElement((char[]) null, 'a'); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.remove(new float[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((float[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.remove(new float[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((float[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.remove(new float[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((float[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.remove(new float[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((float[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.remove(new float[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((float[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.remove(new float[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((float[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.removeElement((float[]) null, (float) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2, 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.removeElement((float[]) null, (float) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2, 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.removeElement((float[]) null, (float) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2, 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.removeElement((float[]) null, (float) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2, 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElement((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElement((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElement((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElement((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullCharArray() { [EOL]     ArrayUtils.removeAll((char[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullCharArray() { [EOL]     ArrayUtils.removeAll((char[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullCharArray() { [EOL]     ArrayUtils.removeAll((char[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullCharArray() { [EOL]     ArrayUtils.removeAll((char[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullCharArray() { [EOL]     ArrayUtils.removeAll((char[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullCharArray() { [EOL]     ArrayUtils.removeAll((char[]) null, 0); [EOL] }
@Test [EOL] public void testRemoveElementCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((char[]) null, 'a', 'b'); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a', 'b'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a' }, 'a', 'b'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'b'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a', 'a', 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException2() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s"); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException2() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s"); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test [EOL] public void testDetermineTypeVariableAssignments() throws SecurityException, NoSuchFieldException, NoSuchMethodException { [EOL]     final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable").getGenericType(); [EOL]     final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType); [EOL]     final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); [EOL] }
@Test [EOL] public void testDetermineTypeVariableAssignments() throws SecurityException, NoSuchFieldException, NoSuchMethodException { [EOL]     final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable").getGenericType(); [EOL]     final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType); [EOL]     final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); [EOL] }
@Test [EOL] public void testDetermineTypeVariableAssignments() throws SecurityException, NoSuchFieldException, NoSuchMethodException { [EOL]     final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable").getGenericType(); [EOL]     final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType); [EOL]     final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); [EOL] }
@Test [EOL] public void testDetermineTypeVariableAssignments() throws SecurityException, NoSuchFieldException, NoSuchMethodException { [EOL]     final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable").getGenericType(); [EOL]     final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType); [EOL]     final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); [EOL] }
@Test [EOL] public void testDetermineTypeVariableAssignments() throws SecurityException, NoSuchFieldException, NoSuchMethodException { [EOL]     final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable").getGenericType(); [EOL]     final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType); [EOL]     final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); [EOL] }
@Test [EOL] public void testDetermineTypeVariableAssignments() throws SecurityException, NoSuchFieldException, NoSuchMethodException { [EOL]     final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable").getGenericType(); [EOL]     final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType); [EOL]     final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); [EOL] }
@Test [EOL] public void testDetermineTypeVariableAssignments() throws SecurityException, NoSuchFieldException, NoSuchMethodException { [EOL]     final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable").getGenericType(); [EOL]     final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType); [EOL]     final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); [EOL] }
@Test [EOL] public void testDetermineTypeVariableAssignments() throws SecurityException, NoSuchFieldException, NoSuchMethodException { [EOL]     final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable").getGenericType(); [EOL]     final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType); [EOL]     final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); [EOL] }
@Test [EOL] public void testLang820() throws Exception { [EOL]     final Type[] typeArray = { String.class, String.class }; [EOL]     final Type[] expectedArray = { String.class }; [EOL]     Assert.assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray)); [EOL] }
@Test [EOL] public void testLang820() throws Exception { [EOL]     final Type[] typeArray = { String.class, String.class }; [EOL]     final Type[] expectedArray = { String.class }; [EOL]     Assert.assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray)); [EOL] }
@Test [EOL] public void testLang820() throws Exception { [EOL]     final Type[] typeArray = { String.class, String.class }; [EOL]     final Type[] expectedArray = { String.class }; [EOL]     Assert.assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray)); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testAppend_String() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testGetChars() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     char[] input = new char[10]; [EOL]     char[] a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[10], a)); [EOL]     sb.append("junit"); [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0 }, a)); [EOL]     a = sb.getChars(null); [EOL]     assertNotSame(input, a); [EOL]     assertEquals(5, a.length); [EOL]     assertTrue(Arrays.equals("junit".toCharArray(), a)); [EOL]     input = new char[5]; [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     input = new char[4]; [EOL]     a = sb.getChars(input); [EOL]     assertNotSame(input, a); [EOL] }
@Test [EOL] public void testGetChars() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     char[] input = new char[10]; [EOL]     char[] a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[10], a)); [EOL]     sb.append("junit"); [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0 }, a)); [EOL]     a = sb.getChars(null); [EOL]     assertNotSame(input, a); [EOL]     assertEquals(5, a.length); [EOL]     assertTrue(Arrays.equals("junit".toCharArray(), a)); [EOL]     input = new char[5]; [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     input = new char[4]; [EOL]     a = sb.getChars(input); [EOL]     assertNotSame(input, a); [EOL] }
@Test [EOL] public void testGetChars() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     char[] input = new char[10]; [EOL]     char[] a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[10], a)); [EOL]     sb.append("junit"); [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0 }, a)); [EOL]     a = sb.getChars(null); [EOL]     assertNotSame(input, a); [EOL]     assertEquals(5, a.length); [EOL]     assertTrue(Arrays.equals("junit".toCharArray(), a)); [EOL]     input = new char[5]; [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     input = new char[4]; [EOL]     a = sb.getChars(input); [EOL]     assertNotSame(input, a); [EOL] }
@Test [EOL] public void testGetChars() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     char[] input = new char[10]; [EOL]     char[] a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[10], a)); [EOL]     sb.append("junit"); [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0 }, a)); [EOL]     a = sb.getChars(null); [EOL]     assertNotSame(input, a); [EOL]     assertEquals(5, a.length); [EOL]     assertTrue(Arrays.equals("junit".toCharArray(), a)); [EOL]     input = new char[5]; [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     input = new char[4]; [EOL]     a = sb.getChars(input); [EOL]     assertNotSame(input, a); [EOL] }
@Test [EOL] public void testAppend_String() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo", 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append("bar", -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("bar", 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("abcbardef", 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append((CharSequence) "abcbardef", 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo", 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append("bar", -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("bar", 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("abcbardef", 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append((CharSequence) "abcbardef", 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo", 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append("bar", -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("bar", 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("abcbardef", 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append((CharSequence) "abcbardef", 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo", 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append("bar", -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("bar", 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("abcbardef", 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append((CharSequence) "abcbardef", 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo", 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append("bar", -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("bar", 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("abcbardef", 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append((CharSequence) "abcbardef", 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_String_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo", 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append("bar", -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("bar", 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("abcbardef", 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append((CharSequence) "abcbardef", 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppend_CharArray() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((char[]) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new char[0]); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foo", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_CharArray() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((char[]) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new char[0]); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foo", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_CharArray() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((char[]) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new char[0]); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foo", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuffer() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StrBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StrBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StrBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StrBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StrBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StrBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAsBuilder() { [EOL]     final StrBuilder sb = new StrBuilder().appendAll("Lorem", " ", "ipsum", " ", "dolor"); [EOL]     assertEquals(sb.toString(), sb.build()); [EOL] }
@Test [EOL] public void testAsBuilder() { [EOL]     final StrBuilder sb = new StrBuilder().appendAll("Lorem", " ", "ipsum", " ", "dolor"); [EOL]     assertEquals(sb.toString(), sb.build()); [EOL] }
@Test [EOL] public void testAsBuilder() { [EOL]     final StrBuilder sb = new StrBuilder().appendAll("Lorem", " ", "ipsum", " ", "dolor"); [EOL]     assertEquals(sb.toString(), sb.build()); [EOL] }
@Test [EOL] public void testAppendSeparator_String() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(","); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_String() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(","); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_char() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(','); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(','); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_char() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(','); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(','); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadRight() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadRight("foo", -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 1, '-'); [EOL]     assertEquals("f", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 2, '-'); [EOL]     assertEquals("fo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 3, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 4, '-'); [EOL]     assertEquals("foo-", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("foo-------", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.setNullText("null"); [EOL]     sb.appendFixedWidthPadRight(null, 5, '-'); [EOL]     assertEquals("null-", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteFirst_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteFirst((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("xA1A2yA3", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteFirst_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteFirst((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("xA1A2yA3", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteFirst_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteFirst((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("xA1A2yA3", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteFirst_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteFirst((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("xA1A2yA3", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testSubstringIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("hello", sb.substring(0, 5)); [EOL]     assertEquals("hello goodbye".substring(0, 6), sb.substring(0, 6)); [EOL]     assertEquals("goodbye", sb.substring(6, 13)); [EOL]     assertEquals("hello goodbye".substring(6, 13), sb.substring(6, 13)); [EOL]     assertEquals("goodbye", sb.substring(6, 20)); [EOL]     try { [EOL]         sb.substring(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15, 20); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubstringIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("hello", sb.substring(0, 5)); [EOL]     assertEquals("hello goodbye".substring(0, 6), sb.substring(0, 6)); [EOL]     assertEquals("goodbye", sb.substring(6, 13)); [EOL]     assertEquals("hello goodbye".substring(6, 13), sb.substring(6, 13)); [EOL]     assertEquals("goodbye", sb.substring(6, 20)); [EOL]     try { [EOL]         sb.substring(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15, 20); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubstringIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("hello", sb.substring(0, 5)); [EOL]     assertEquals("hello goodbye".substring(0, 6), sb.substring(0, 6)); [EOL]     assertEquals("goodbye", sb.substring(6, 13)); [EOL]     assertEquals("hello goodbye".substring(6, 13), sb.substring(6, 13)); [EOL]     assertEquals("goodbye", sb.substring(6, 20)); [EOL]     try { [EOL]         sb.substring(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15, 20); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubstringIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("hello", sb.substring(0, 5)); [EOL]     assertEquals("hello goodbye".substring(0, 6), sb.substring(0, 6)); [EOL]     assertEquals("goodbye", sb.substring(6, 13)); [EOL]     assertEquals("hello goodbye".substring(6, 13), sb.substring(6, 13)); [EOL]     assertEquals("goodbye", sb.substring(6, 20)); [EOL]     try { [EOL]         sb.substring(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15, 20); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubstringIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("hello", sb.substring(0, 5)); [EOL]     assertEquals("hello goodbye".substring(0, 6), sb.substring(0, 6)); [EOL]     assertEquals("goodbye", sb.substring(6, 13)); [EOL]     assertEquals("hello goodbye".substring(6, 13), sb.substring(6, 13)); [EOL]     assertEquals("goodbye", sb.substring(6, 20)); [EOL]     try { [EOL]         sb.substring(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15, 20); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubstringIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("hello", sb.substring(0, 5)); [EOL]     assertEquals("hello goodbye".substring(0, 6), sb.substring(0, 6)); [EOL]     assertEquals("goodbye", sb.substring(6, 13)); [EOL]     assertEquals("hello goodbye".substring(6, 13), sb.substring(6, 13)); [EOL]     assertEquals("goodbye", sb.substring(6, 20)); [EOL]     try { [EOL]         sb.substring(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15, 20); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsBuilder() { [EOL]     final StrBuilder sb = new StrBuilder().appendAll("Lorem", " ", "ipsum", " ", "dolor"); [EOL]     assertEquals(sb.toString(), sb.build()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] }
@Test [EOL] public void test_getInstance_String_TimeZone_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault(), Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]         assertEquals(TimeZone.getDefault(), format3.getTimeZone()); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]         assertEquals(Locale.GERMANY, format2.getLocale()); [EOL]         assertEquals(Locale.GERMANY, format3.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(NEW_YORK); [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]         final Date date1 = cal1.getTime(); [EOL]         final Date date2 = cal2.getTime(); [EOL]         final long millis1 = date1.getTime(); [EOL]         final long millis2 = date2.getTime(); [EOL]         DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]         assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]         assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]         assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]         fdf = getInstance("Z"); [EOL]         assertEquals("-0500", fdf.format(date1)); [EOL]         assertEquals("-0500", fdf.format(cal1)); [EOL]         assertEquals("-0500", fdf.format(millis1)); [EOL]         assertEquals("-0400", fdf.format(date2)); [EOL]         assertEquals("-0400", fdf.format(cal2)); [EOL]         assertEquals("-0400", fdf.format(millis2)); [EOL]         fdf = getInstance("ZZ"); [EOL]         assertEquals("-05:00", fdf.format(date1)); [EOL]         assertEquals("-05:00", fdf.format(cal1)); [EOL]         assertEquals("-05:00", fdf.format(millis1)); [EOL]         assertEquals("-04:00", fdf.format(date2)); [EOL]         assertEquals("-04:00", fdf.format(cal2)); [EOL]         assertEquals("-04:00", fdf.format(millis2)); [EOL]         final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]         fdf = getInstance(pattern); [EOL]         sdf = new SimpleDateFormat(pattern); [EOL]         assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]         assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testTruncateHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField); [EOL] }
@Test [EOL] public void testTruncateHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testJavaAwtHeadless() { [EOL]     final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4); [EOL]     final String expectedStringValue = System.getProperty("java.awt.headless"); [EOL]     final String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false"); [EOL]     assertNotNull(expectedStringValueWithDefault); [EOL]     if (atLeastJava14) { [EOL]         final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue(); [EOL]         if (expectedStringValue != null) { [EOL]             assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); [EOL]         } [EOL]         assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); [EOL]     } else { [EOL]         assertNull(expectedStringValue); [EOL]         assertNull(SystemUtils.JAVA_AWT_HEADLESS); [EOL]         assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]     } [EOL]     assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL] }
@Test [EOL] public void testJavaAwtHeadless() { [EOL]     final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4); [EOL]     final String expectedStringValue = System.getProperty("java.awt.headless"); [EOL]     final String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false"); [EOL]     assertNotNull(expectedStringValueWithDefault); [EOL]     if (atLeastJava14) { [EOL]         final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue(); [EOL]         if (expectedStringValue != null) { [EOL]             assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); [EOL]         } [EOL]         assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); [EOL]     } else { [EOL]         assertNull(expectedStringValue); [EOL]         assertNull(SystemUtils.JAVA_AWT_HEADLESS); [EOL]         assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]     } [EOL]     assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL] }
@Test [EOL] public void testJavaAwtHeadless() { [EOL]     final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4); [EOL]     final String expectedStringValue = System.getProperty("java.awt.headless"); [EOL]     final String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false"); [EOL]     assertNotNull(expectedStringValueWithDefault); [EOL]     if (atLeastJava14) { [EOL]         final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue(); [EOL]         if (expectedStringValue != null) { [EOL]             assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); [EOL]         } [EOL]         assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); [EOL]     } else { [EOL]         assertNull(expectedStringValue); [EOL]         assertNull(SystemUtils.JAVA_AWT_HEADLESS); [EOL]         assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]     } [EOL]     assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL] }
@Test [EOL] public void testJavaAwtHeadless() { [EOL]     final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4); [EOL]     final String expectedStringValue = System.getProperty("java.awt.headless"); [EOL]     final String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false"); [EOL]     assertNotNull(expectedStringValueWithDefault); [EOL]     if (atLeastJava14) { [EOL]         final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue(); [EOL]         if (expectedStringValue != null) { [EOL]             assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); [EOL]         } [EOL]         assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); [EOL]     } else { [EOL]         assertNull(expectedStringValue); [EOL]         assertNull(SystemUtils.JAVA_AWT_HEADLESS); [EOL]         assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]     } [EOL]     assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL] }
@Test [EOL] public void testJavaAwtHeadless() { [EOL]     final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4); [EOL]     final String expectedStringValue = System.getProperty("java.awt.headless"); [EOL]     final String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false"); [EOL]     assertNotNull(expectedStringValueWithDefault); [EOL]     if (atLeastJava14) { [EOL]         final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue(); [EOL]         if (expectedStringValue != null) { [EOL]             assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); [EOL]         } [EOL]         assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); [EOL]     } else { [EOL]         assertNull(expectedStringValue); [EOL]         assertNull(SystemUtils.JAVA_AWT_HEADLESS); [EOL]         assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]     } [EOL]     assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL] }
@Test [EOL] public void testJavaAwtHeadless() { [EOL]     final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4); [EOL]     final String expectedStringValue = System.getProperty("java.awt.headless"); [EOL]     final String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false"); [EOL]     assertNotNull(expectedStringValueWithDefault); [EOL]     if (atLeastJava14) { [EOL]         final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue(); [EOL]         if (expectedStringValue != null) { [EOL]             assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); [EOL]         } [EOL]         assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); [EOL]     } else { [EOL]         assertNull(expectedStringValue); [EOL]         assertNull(SystemUtils.JAVA_AWT_HEADLESS); [EOL]         assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]     } [EOL]     assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL] }
@Test [EOL] public void testJavaAwtHeadless() { [EOL]     final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4); [EOL]     final String expectedStringValue = System.getProperty("java.awt.headless"); [EOL]     final String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false"); [EOL]     assertNotNull(expectedStringValueWithDefault); [EOL]     if (atLeastJava14) { [EOL]         final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue(); [EOL]         if (expectedStringValue != null) { [EOL]             assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); [EOL]         } [EOL]         assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); [EOL]     } else { [EOL]         assertNull(expectedStringValue); [EOL]         assertNull(SystemUtils.JAVA_AWT_HEADLESS); [EOL]         assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]     } [EOL]     assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL] }
@Test [EOL] public void testJavaVersionMatches() { [EOL]     String javaVersion = null; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = ""; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.0"; [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.1"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.2"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.3.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.3.1"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.4.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.4.1"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.4.2"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.5.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.6.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.7.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new FieldUtils()); [EOL]     final Constructor<?>[] cons = FieldUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(FieldUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(FieldUtils.class.getModifiers())); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test [EOL] public void testReadNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE")); [EOL]     try { [EOL]         FieldUtils.readStaticField(null, "none"); [EOL]         fail("null class should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, null); [EOL]         fail("null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, "does_not_exist"); [EOL]         fail("a field that doesn't exist should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(PublicChild.class, "s"); [EOL]         fail("non-static field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE")); [EOL]     try { [EOL]         FieldUtils.readStaticField(null, "none"); [EOL]         fail("null class should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, null); [EOL]         fail("null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, "does_not_exist"); [EOL]         fail("a field that doesn't exist should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(PublicChild.class, "s"); [EOL]         fail("non-static field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE")); [EOL]     try { [EOL]         FieldUtils.readStaticField(null, "none"); [EOL]         fail("null class should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, null); [EOL]         fail("null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, "does_not_exist"); [EOL]         fail("a field that doesn't exist should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(PublicChild.class, "s"); [EOL]         fail("non-static field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE")); [EOL]     try { [EOL]         FieldUtils.readStaticField(null, "none"); [EOL]         fail("null class should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, null); [EOL]         fail("null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, "does_not_exist"); [EOL]         fail("a field that doesn't exist should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(PublicChild.class, "s"); [EOL]         fail("non-static field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE")); [EOL]     try { [EOL]         FieldUtils.readStaticField(null, "none"); [EOL]         fail("null class should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, null); [EOL]         fail("null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, "does_not_exist"); [EOL]         fail("a field that doesn't exist should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(PublicChild.class, "s"); [EOL]         fail("non-static field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE")); [EOL]     try { [EOL]         FieldUtils.readStaticField(null, "none"); [EOL]         fail("null class should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, null); [EOL]         fail("null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, "does_not_exist"); [EOL]         fail("a field that doesn't exist should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(PublicChild.class, "s"); [EOL]         fail("non-static field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE")); [EOL]     try { [EOL]         FieldUtils.readStaticField(null, "none"); [EOL]         fail("null class should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, null); [EOL]         fail("null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, "does_not_exist"); [EOL]         fail("a field that doesn't exist should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(PublicChild.class, "s"); [EOL]         fail("non-static field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE")); [EOL]     try { [EOL]         assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE")); [EOL]     try { [EOL]         assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE")); [EOL]     try { [EOL]         assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE")); [EOL]     try { [EOL]         assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException2() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s"); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException2() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s"); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException2() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s"); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testGetInstance_Stringarray() { [EOL]     assertEquals(null, CharSet.getInstance((String[]) null)); [EOL]     assertEquals("[]", CharSet.getInstance(new String[0]).toString()); [EOL]     assertEquals("[]", CharSet.getInstance(new String[] { null }).toString()); [EOL]     assertEquals("[a-e]", CharSet.getInstance(new String[] { "a-e" }).toString()); [EOL] }
@Test [EOL] public void testGetInstance_Stringarray() { [EOL]     assertEquals(null, CharSet.getInstance((String[]) null)); [EOL]     assertEquals("[]", CharSet.getInstance(new String[0]).toString()); [EOL]     assertEquals("[]", CharSet.getInstance(new String[] { null }).toString()); [EOL]     assertEquals("[a-e]", CharSet.getInstance(new String[] { "a-e" }).toString()); [EOL] }
@Test [EOL] public void testGetInstance_Stringarray() { [EOL]     assertEquals(null, CharSet.getInstance((String[]) null)); [EOL]     assertEquals("[]", CharSet.getInstance(new String[0]).toString()); [EOL]     assertEquals("[]", CharSet.getInstance(new String[] { null }).toString()); [EOL]     assertEquals("[a-e]", CharSet.getInstance(new String[] { "a-e" }).toString()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final CharSet abc = CharSet.getInstance("abc"); [EOL]     final CharSet abc2 = CharSet.getInstance("abc"); [EOL]     final CharSet atoc = CharSet.getInstance("a-c"); [EOL]     final CharSet atoc2 = CharSet.getInstance("a-c"); [EOL]     final CharSet notatoc = CharSet.getInstance("^a-c"); [EOL]     final CharSet notatoc2 = CharSet.getInstance("^a-c"); [EOL]     assertEquals(abc.hashCode(), abc.hashCode()); [EOL]     assertEquals(abc.hashCode(), abc2.hashCode()); [EOL]     assertEquals(atoc.hashCode(), atoc.hashCode()); [EOL]     assertEquals(atoc.hashCode(), atoc2.hashCode()); [EOL]     assertEquals(notatoc.hashCode(), notatoc.hashCode()); [EOL]     assertEquals(notatoc.hashCode(), notatoc2.hashCode()); [EOL] }
@Test [EOL] public void testContextedExceptionString() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE); [EOL]     assertEquals(TEST_MESSAGE, exceptionContext.getMessage()); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testJavaSerialization() { [EOL]     exceptionContext.setContextValue("test Poorly written obj", "serializable replacement"); [EOL]     final T clone = SerializationUtils.deserialize(SerializationUtils.serialize(exceptionContext)); [EOL]     assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null)); [EOL] }
@Test [EOL] public void testJavaSerialization() { [EOL]     exceptionContext.setContextValue("test Poorly written obj", "serializable replacement"); [EOL]     final T clone = SerializationUtils.deserialize(SerializationUtils.serialize(exceptionContext)); [EOL]     assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null)); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testRawMessage() { [EOL]     assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedException(null, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertNull(exceptionContext.getRawMessage()); [EOL] }
@Test [EOL] public void testRawMessage() { [EOL]     assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedException(null, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertNull(exceptionContext.getRawMessage()); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testInitExecutor() { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(new TestCallable(), exec); [EOL]     assertEquals("Executor not set", exec, init.getExternalExecutor()); [EOL] }
@Test [EOL] public void testInitExecutor() { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(new TestCallable(), exec); [EOL]     assertEquals("Executor not set", exec, init.getExternalExecutor()); [EOL] }
@Test [EOL] public void testInitExecutor() { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(new TestCallable(), exec); [EOL]     assertEquals("Executor not set", exec, init.getExternalExecutor()); [EOL] }
@Test [EOL] public void testInitExecutor() { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(new TestCallable(), exec); [EOL]     assertEquals("Executor not set", exec, init.getExternalExecutor()); [EOL] }
@Test [EOL] public void testInitExecutor() { [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(new TestCallable(), exec); [EOL]     assertEquals("Executor not set", exec, init.getExternalExecutor()); [EOL] }
@Test [EOL] public void testReflectionObjectCycle() { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     a.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL]     b.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL] }
@Test [EOL] public void testReflectionObjectCycle() { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     a.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL]     b.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL] }
@Test [EOL] public void testReflectionObjectCycle() { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     a.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL]     b.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL] }
@Test [EOL] public void testReflectionObjectCycle() { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     a.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL]     b.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL] }
@Test [EOL] public void testReflectionObjectCycle() { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     a.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL]     b.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL] }
@Test [EOL] public void testReflectionObjectCycle() { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     a.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL]     b.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL] }
@Test [EOL] public void testReflectionObjectCycle() { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     a.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL]     b.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL] }
@Test [EOL] public void testReflectionObjectCycle() { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     a.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL]     b.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL] }
@Test [EOL] public void testReflectionObjectCycle() { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     a.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL]     b.hashCode(); [EOL]     assertNull(HashCodeBuilder.getRegistry()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode()); [EOL]     final int[] obj = new int[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode()); [EOL]     final int[] obj = new int[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode()); [EOL]     final int[] obj = new int[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode()); [EOL]     final int[] obj = new int[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode()); [EOL]     final int[] obj = new int[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testIntArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode()); [EOL]     final int[] obj = new int[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testCharArrayAsObject() { [EOL]     final char[] obj = new char[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = (char) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = (char) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]     final short[] obj = new short[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (short) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (short) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]     final short[] obj = new short[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (short) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (short) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]     final short[] obj = new short[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (short) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (short) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]     final short[] obj = new short[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (short) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (short) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testDeserializeStreamNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize((InputStream) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testDeserializeStreamNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize((InputStream) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testDeserializeStreamNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize((InputStream) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testDeserializeStreamNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize((InputStream) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testDeserializeStreamNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize((InputStream) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testDeserializeStreamNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize((InputStream) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] }
@Test [EOL] public void testToChar_String_char() { [EOL]     assertEquals('A', CharUtils.toChar("A", 'X')); [EOL]     assertEquals('B', CharUtils.toChar("BA", 'X')); [EOL]     assertEquals('X', CharUtils.toChar("", 'X')); [EOL]     assertEquals('X', CharUtils.toChar((String) null, 'X')); [EOL] }
@Test [EOL] public void testToChar_String_char() { [EOL]     assertEquals('A', CharUtils.toChar("A", 'X')); [EOL]     assertEquals('B', CharUtils.toChar("BA", 'X')); [EOL]     assertEquals('X', CharUtils.toChar("", 'X')); [EOL]     assertEquals('X', CharUtils.toChar((String) null, 'X')); [EOL] }
@Test [EOL] public void testToChar_String_char() { [EOL]     assertEquals('A', CharUtils.toChar("A", 'X')); [EOL]     assertEquals('B', CharUtils.toChar("BA", 'X')); [EOL]     assertEquals('X', CharUtils.toChar("", 'X')); [EOL]     assertEquals('X', CharUtils.toChar((String) null, 'X')); [EOL] }
@Test [EOL] public void testToString_Character() { [EOL]     assertEquals(null, CharUtils.toString(null)); [EOL]     assertEquals("A", CharUtils.toString(CHARACTER_A)); [EOL]     assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A)); [EOL] }
@Test [EOL] public void testToString_Character() { [EOL]     assertEquals(null, CharUtils.toString(null)); [EOL]     assertEquals("A", CharUtils.toString(CHARACTER_A)); [EOL]     assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A)); [EOL] }
@Test [EOL] public void testToString_Character() { [EOL]     assertEquals(null, CharUtils.toString(null)); [EOL]     assertEquals("A", CharUtils.toString(CHARACTER_A)); [EOL]     assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A)); [EOL] }
@Test [EOL] public void testToString_Character() { [EOL]     assertEquals(null, CharUtils.toString(null)); [EOL]     assertEquals("A", CharUtils.toString(CHARACTER_A)); [EOL]     assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A)); [EOL] }
@Test [EOL] public void testIsAsciiControl_char() { [EOL]     assertFalse(CharUtils.isAsciiControl('a')); [EOL]     assertFalse(CharUtils.isAsciiControl('A')); [EOL]     assertFalse(CharUtils.isAsciiControl('3')); [EOL]     assertFalse(CharUtils.isAsciiControl('-')); [EOL]     assertTrue(CharUtils.isAsciiControl('\n')); [EOL]     assertFalse(CharUtils.isAsciiControl(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i < 32 || i == 127) { [EOL]             assertTrue(CharUtils.isAsciiControl((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiControl((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiControl_char() { [EOL]     assertFalse(CharUtils.isAsciiControl('a')); [EOL]     assertFalse(CharUtils.isAsciiControl('A')); [EOL]     assertFalse(CharUtils.isAsciiControl('3')); [EOL]     assertFalse(CharUtils.isAsciiControl('-')); [EOL]     assertTrue(CharUtils.isAsciiControl('\n')); [EOL]     assertFalse(CharUtils.isAsciiControl(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i < 32 || i == 127) { [EOL]             assertTrue(CharUtils.isAsciiControl((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiControl((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiControl_char() { [EOL]     assertFalse(CharUtils.isAsciiControl('a')); [EOL]     assertFalse(CharUtils.isAsciiControl('A')); [EOL]     assertFalse(CharUtils.isAsciiControl('3')); [EOL]     assertFalse(CharUtils.isAsciiControl('-')); [EOL]     assertTrue(CharUtils.isAsciiControl('\n')); [EOL]     assertFalse(CharUtils.isAsciiControl(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i < 32 || i == 127) { [EOL]             assertTrue(CharUtils.isAsciiControl((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiControl((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsWithCompare() { [EOL]     final Comparator<Integer> c = new Comparator<Integer>() { [EOL]  [EOL]         @Override [EOL]         public int compare(final Integer o1, final Integer o2) { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     Range<Integer> ri = Range.is(10); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertFalse("should not contain 11", ri.contains(11)); [EOL]     ri = Range.is(10, c); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertTrue("should contain 11", ri.contains(11)); [EOL] }
@Test [EOL] public void testIsWithCompare() { [EOL]     final Comparator<Integer> c = new Comparator<Integer>() { [EOL]  [EOL]         @Override [EOL]         public int compare(final Integer o1, final Integer o2) { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     Range<Integer> ri = Range.is(10); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertFalse("should not contain 11", ri.contains(11)); [EOL]     ri = Range.is(10, c); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertTrue("should contain 11", ri.contains(11)); [EOL] }
@Test [EOL] public void testIsWithCompare() { [EOL]     final Comparator<Integer> c = new Comparator<Integer>() { [EOL]  [EOL]         @Override [EOL]         public int compare(final Integer o1, final Integer o2) { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     Range<Integer> ri = Range.is(10); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertFalse("should not contain 11", ri.contains(11)); [EOL]     ri = Range.is(10, c); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertTrue("should contain 11", ri.contains(11)); [EOL] }
@Test [EOL] public void testIsWithCompare() { [EOL]     final Comparator<Integer> c = new Comparator<Integer>() { [EOL]  [EOL]         @Override [EOL]         public int compare(final Integer o1, final Integer o2) { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     Range<Integer> ri = Range.is(10); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertFalse("should not contain 11", ri.contains(11)); [EOL]     ri = Range.is(10, c); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertTrue("should contain 11", ri.contains(11)); [EOL] }
@Test [EOL] public void testGetMaximum() { [EOL]     assertEquals(20, (int) intRange.getMaximum()); [EOL]     assertEquals(20L, (long) longRange.getMaximum()); [EOL]     assertEquals(20f, floatRange.getMaximum(), 0.00001f); [EOL]     assertEquals(20d, doubleRange.getMaximum(), 0.00001d); [EOL] }
@Test [EOL] public void testIsAfter() { [EOL]     assertFalse(intRange.isAfter(null)); [EOL]     assertTrue(intRange.isAfter(5)); [EOL]     assertFalse(intRange.isAfter(10)); [EOL]     assertFalse(intRange.isAfter(15)); [EOL]     assertFalse(intRange.isAfter(20)); [EOL]     assertFalse(intRange.isAfter(25)); [EOL] }
@Test [EOL] public void testIsAfter() { [EOL]     assertFalse(intRange.isAfter(null)); [EOL]     assertTrue(intRange.isAfter(5)); [EOL]     assertFalse(intRange.isAfter(10)); [EOL]     assertFalse(intRange.isAfter(15)); [EOL]     assertFalse(intRange.isAfter(20)); [EOL]     assertFalse(intRange.isAfter(25)); [EOL] }
@Test [EOL] public void testIsAfter() { [EOL]     assertFalse(intRange.isAfter(null)); [EOL]     assertTrue(intRange.isAfter(5)); [EOL]     assertFalse(intRange.isAfter(10)); [EOL]     assertFalse(intRange.isAfter(15)); [EOL]     assertFalse(intRange.isAfter(20)); [EOL]     assertFalse(intRange.isAfter(25)); [EOL] }
@Test [EOL] public void testIsAfter() { [EOL]     assertFalse(intRange.isAfter(null)); [EOL]     assertTrue(intRange.isAfter(5)); [EOL]     assertFalse(intRange.isAfter(10)); [EOL]     assertFalse(intRange.isAfter(15)); [EOL]     assertFalse(intRange.isAfter(20)); [EOL]     assertFalse(intRange.isAfter(25)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     assertEquals(byteRange.hashCode(), byteRange2.hashCode()); [EOL]     assertFalse(byteRange.hashCode() == byteRange3.hashCode()); [EOL]     assertEquals(intRange.hashCode(), intRange.hashCode()); [EOL]     assertTrue(intRange.hashCode() != 0); [EOL] }
@Test [EOL] public void testIsAfter() { [EOL]     assertFalse(intRange.isAfter(null)); [EOL]     assertTrue(intRange.isAfter(5)); [EOL]     assertFalse(intRange.isAfter(10)); [EOL]     assertFalse(intRange.isAfter(15)); [EOL]     assertFalse(intRange.isAfter(20)); [EOL]     assertFalse(intRange.isAfter(25)); [EOL] }
@Test [EOL] public void testIsAfter() { [EOL]     assertFalse(intRange.isAfter(null)); [EOL]     assertTrue(intRange.isAfter(5)); [EOL]     assertFalse(intRange.isAfter(10)); [EOL]     assertFalse(intRange.isAfter(15)); [EOL]     assertFalse(intRange.isAfter(20)); [EOL]     assertFalse(intRange.isAfter(25)); [EOL] }
@Test [EOL] public void testIsAfter() { [EOL]     assertFalse(intRange.isAfter(null)); [EOL]     assertTrue(intRange.isAfter(5)); [EOL]     assertFalse(intRange.isAfter(10)); [EOL]     assertFalse(intRange.isAfter(15)); [EOL]     assertFalse(intRange.isAfter(20)); [EOL]     assertFalse(intRange.isAfter(25)); [EOL] }
@Test [EOL] public void test_toStringExcludeArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[] { SECRET_FIELD }); [EOL]     this.validateSecretFieldAbsent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[] { SECRET_FIELD }); [EOL]     this.validateSecretFieldAbsent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[] { SECRET_FIELD }); [EOL]     this.validateSecretFieldAbsent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[] { SECRET_FIELD }); [EOL]     this.validateSecretFieldAbsent(toString); [EOL] }
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] }
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_setUpToClass_invalid() { [EOL]     final Integer val = Integer.valueOf(5); [EOL]     final ReflectionToStringBuilder test = new ReflectionToStringBuilder(val); [EOL]     try { [EOL]         test.setUpToClass(String.class); [EOL]     } finally { [EOL]         test.toString(); [EOL]     } [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_setUpToClass_invalid() { [EOL]     final Integer val = Integer.valueOf(5); [EOL]     final ReflectionToStringBuilder test = new ReflectionToStringBuilder(val); [EOL]     try { [EOL]         test.setUpToClass(String.class); [EOL]     } finally { [EOL]         test.toString(); [EOL]     } [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_setUpToClass_invalid() { [EOL]     final Integer val = Integer.valueOf(5); [EOL]     final ReflectionToStringBuilder test = new ReflectionToStringBuilder(val); [EOL]     try { [EOL]         test.setUpToClass(String.class); [EOL]     } finally { [EOL]         test.toString(); [EOL]     } [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testGetJavaVersion() { [EOL]     assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]     assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]     assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]     assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]     assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]     assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]     assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]     assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]     assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]     assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]     assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("1.2", JAVA_1_2.toString()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.subtract(Long.valueOf(1)); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.subtract(Long.valueOf(1)); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("0", new MutableLong(0).toString()); [EOL]     assertEquals("10", new MutableLong(10).toString()); [EOL]     assertEquals("-123", new MutableLong(-123).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("0", new MutableLong(0).toString()); [EOL]     assertEquals("10", new MutableLong(10).toString()); [EOL]     assertEquals("-123", new MutableLong(-123).toString()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(Integer.valueOf(0), new MutableInt().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Integer.valueOf(2)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(Integer.valueOf(0), new MutableInt().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Integer.valueOf(2)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(Integer.valueOf(0), new MutableInt().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Integer.valueOf(2)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(Integer.valueOf(0), new MutableInt().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Integer.valueOf(2)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(Integer.valueOf(0), new MutableInt().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Integer.valueOf(2)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testIncrement() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testIncrement() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testIncrement() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] }
@Test [EOL] public void testComparatorMedian() { [EOL]     final CharSequenceComparator cmp = new CharSequenceComparator(); [EOL]     final NonComparableCharSequence foo = new NonComparableCharSequence("foo"); [EOL]     final NonComparableCharSequence bar = new NonComparableCharSequence("bar"); [EOL]     final NonComparableCharSequence baz = new NonComparableCharSequence("baz"); [EOL]     final NonComparableCharSequence blah = new NonComparableCharSequence("blah"); [EOL]     final NonComparableCharSequence wah = new NonComparableCharSequence("wah"); [EOL]     assertSame(foo, ObjectUtils.median(cmp, foo)); [EOL]     assertSame(bar, ObjectUtils.median(cmp, foo, bar)); [EOL]     assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz)); [EOL]     assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz, blah)); [EOL]     assertSame(blah, ObjectUtils.median(cmp, foo, bar, baz, blah, wah)); [EOL] }
@Test [EOL] public void testCloneOfStringArray() { [EOL]     assertTrue(Arrays.deepEquals(new String[] { "string" }, ObjectUtils.clone(new String[] { "string" }))); [EOL] }
@Test [EOL] public void testCloneOfStringArray() { [EOL]     assertTrue(Arrays.deepEquals(new String[] { "string" }, ObjectUtils.clone(new String[] { "string" }))); [EOL] }
@Test [EOL] public void testCloneOfStringArray() { [EOL]     assertTrue(Arrays.deepEquals(new String[] { "string" }, ObjectUtils.clone(new String[] { "string" }))); [EOL] }
@Test [EOL] public void testPossibleCloneOfCloneable() { [EOL]     final CloneableString string = new CloneableString("apache"); [EOL]     final CloneableString stringClone = ObjectUtils.cloneIfPossible(string); [EOL]     assertEquals("apache", stringClone.getValue()); [EOL] }
@Test [EOL] public void testPossibleCloneOfCloneable() { [EOL]     final CloneableString string = new CloneableString("apache"); [EOL]     final CloneableString stringClone = ObjectUtils.cloneIfPossible(string); [EOL]     assertEquals("apache", stringClone.getValue()); [EOL] }
@Test [EOL] public void testPossibleCloneOfCloneable() { [EOL]     final CloneableString string = new CloneableString("apache"); [EOL]     final CloneableString stringClone = ObjectUtils.cloneIfPossible(string); [EOL]     assertEquals("apache", stringClone.getValue()); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testNull() { [EOL]     assertNotNull(ObjectUtils.NULL); [EOL]     assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null); [EOL]     assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL)); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testNotEmptyString1() { [EOL]     Validate.notEmpty("hjl"); [EOL]     try { [EOL]         Validate.notEmpty((String) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated character sequence is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(""); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated character sequence is empty", ex.getMessage()); [EOL]     } [EOL]     final String str = "Hi"; [EOL]     final String testStr = Validate.notEmpty(str); [EOL]     assertSame(str, testStr); [EOL] }
@Test [EOL] public void testNotEmptyString1() { [EOL]     Validate.notEmpty("hjl"); [EOL]     try { [EOL]         Validate.notEmpty((String) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated character sequence is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(""); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated character sequence is empty", ex.getMessage()); [EOL]     } [EOL]     final String str = "Hi"; [EOL]     final String testStr = Validate.notEmpty(str); [EOL]     assertSame(str, testStr); [EOL] }
@Test [EOL] public void testNotEmptyString1() { [EOL]     Validate.notEmpty("hjl"); [EOL]     try { [EOL]         Validate.notEmpty((String) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated character sequence is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(""); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated character sequence is empty", ex.getMessage()); [EOL]     } [EOL]     final String str = "Hi"; [EOL]     final String testStr = Validate.notEmpty(str); [EOL]     assertSame(str, testStr); [EOL] }
@Test [EOL] public void testNotBlankMsgNotBlankStringShouldNotThrow() { [EOL]     final String string = "abc"; [EOL]     Validate.notBlank(string, "Message"); [EOL] }
@Test [EOL] public void testNotBlankMsgNotBlankStringShouldNotThrow() { [EOL]     final String string = "abc"; [EOL]     Validate.notBlank(string, "Message"); [EOL] }
@Test [EOL] public void testNotBlankMsgNotBlankStringShouldNotThrow() { [EOL]     final String string = "abc"; [EOL]     Validate.notBlank(string, "Message"); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] }
@Test [EOL] public void testValidIndex_withMessage_collection() { [EOL]     final Collection<String> coll = new ArrayList<String>(); [EOL]     coll.add(null); [EOL]     coll.add(null); [EOL]     Validate.validIndex(coll, 0, "Broken: "); [EOL]     Validate.validIndex(coll, 1, "Broken: "); [EOL]     try { [EOL]         Validate.validIndex(coll, -1, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(coll, 2, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     final List<String> strColl = Arrays.asList(new String[] { "Hi" }); [EOL]     final List<String> test = Validate.validIndex(strColl, 0, "Message"); [EOL]     assertSame(strColl, test); [EOL] }
@Test [EOL] public void testValidIndex_withMessage_collection() { [EOL]     final Collection<String> coll = new ArrayList<String>(); [EOL]     coll.add(null); [EOL]     coll.add(null); [EOL]     Validate.validIndex(coll, 0, "Broken: "); [EOL]     Validate.validIndex(coll, 1, "Broken: "); [EOL]     try { [EOL]         Validate.validIndex(coll, -1, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(coll, 2, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     final List<String> strColl = Arrays.asList(new String[] { "Hi" }); [EOL]     final List<String> test = Validate.validIndex(strColl, 0, "Message"); [EOL]     assertSame(strColl, test); [EOL] }
@Test [EOL] public void testValidIndex_withMessage_collection() { [EOL]     final Collection<String> coll = new ArrayList<String>(); [EOL]     coll.add(null); [EOL]     coll.add(null); [EOL]     Validate.validIndex(coll, 0, "Broken: "); [EOL]     Validate.validIndex(coll, 1, "Broken: "); [EOL]     try { [EOL]         Validate.validIndex(coll, -1, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(coll, 2, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     final List<String> strColl = Arrays.asList(new String[] { "Hi" }); [EOL]     final List<String> test = Validate.validIndex(strColl, 0, "Message"); [EOL]     assertSame(strColl, test); [EOL] }
@Test [EOL] public void testValidIndex_withMessage_collection() { [EOL]     final Collection<String> coll = new ArrayList<String>(); [EOL]     coll.add(null); [EOL]     coll.add(null); [EOL]     Validate.validIndex(coll, 0, "Broken: "); [EOL]     Validate.validIndex(coll, 1, "Broken: "); [EOL]     try { [EOL]         Validate.validIndex(coll, -1, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(coll, 2, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     final List<String> strColl = Arrays.asList(new String[] { "Hi" }); [EOL]     final List<String> test = Validate.validIndex(strColl, 0, "Message"); [EOL]     assertSame(strColl, test); [EOL] }
@Test [EOL] public void testIsInstanceOf_withMessage() { [EOL]     Validate.isInstanceOf(String.class, "hi", "Error"); [EOL]     Validate.isInstanceOf(Integer.class, 1, "Error"); [EOL]     try { [EOL]         Validate.isInstanceOf(List.class, "hi", "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertTrue(new MutableBoolean(true).booleanValue()); [EOL]     assertFalse(new MutableBoolean(false).booleanValue()); [EOL]     assertTrue(new MutableBoolean(Boolean.TRUE).booleanValue()); [EOL]     assertFalse(new MutableBoolean(Boolean.FALSE).booleanValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertTrue(new MutableBoolean(true).booleanValue()); [EOL]     assertFalse(new MutableBoolean(false).booleanValue()); [EOL]     assertTrue(new MutableBoolean(Boolean.TRUE).booleanValue()); [EOL]     assertFalse(new MutableBoolean(Boolean.FALSE).booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableBoolean mutBoolA = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolB = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolC = new MutableBoolean(true); [EOL]     assertTrue(mutBoolA.equals(mutBoolA)); [EOL]     assertTrue(mutBoolA.equals(mutBoolB)); [EOL]     assertTrue(mutBoolB.equals(mutBoolA)); [EOL]     assertTrue(mutBoolB.equals(mutBoolB)); [EOL]     assertFalse(mutBoolA.equals(mutBoolC)); [EOL]     assertFalse(mutBoolB.equals(mutBoolC)); [EOL]     assertTrue(mutBoolC.equals(mutBoolC)); [EOL]     assertFalse(mutBoolA.equals(null)); [EOL]     assertFalse(mutBoolA.equals(Boolean.FALSE)); [EOL]     assertFalse(mutBoolA.equals("false")); [EOL] }
@Test [EOL] public void testBugzilla38401() { [EOL]     assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL] }
@Test [EOL] public void testBugzilla38401() { [EOL]     assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL] }
@Test [EOL] public void testBugzilla38401() { [EOL]     assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL] }
@Test [EOL] public void testBugzilla38401() { [EOL]     assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL] }
@Test [EOL] public void testBugzilla38401() { [EOL]     assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL] }
@Test [EOL] public void testBugzilla38401() { [EOL]     assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL] }
@Test [EOL] public void testBugzilla38401() { [EOL]     assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL] }
@Test [EOL] public void testBugzilla38401() { [EOL]     assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL] }
@Test [EOL] public void testKeep_StringString() { [EOL]     assertEquals(null, CharSetUtils.keep(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.keep(null, "")); [EOL]     assertEquals("", CharSetUtils.keep("", (String) null)); [EOL]     assertEquals("", CharSetUtils.keep("", "")); [EOL]     assertEquals("", CharSetUtils.keep("", "a-e")); [EOL]     assertEquals("", CharSetUtils.keep("hello", (String) null)); [EOL]     assertEquals("", CharSetUtils.keep("hello", "")); [EOL]     assertEquals("", CharSetUtils.keep("hello", "xyz")); [EOL]     assertEquals("hello", CharSetUtils.keep("hello", "a-z")); [EOL]     assertEquals("hello", CharSetUtils.keep("hello", "oleh")); [EOL]     assertEquals("ell", CharSetUtils.keep("hello", "el")); [EOL] }
@Test [EOL] public void testKeep_StringString() { [EOL]     assertEquals(null, CharSetUtils.keep(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.keep(null, "")); [EOL]     assertEquals("", CharSetUtils.keep("", (String) null)); [EOL]     assertEquals("", CharSetUtils.keep("", "")); [EOL]     assertEquals("", CharSetUtils.keep("", "a-e")); [EOL]     assertEquals("", CharSetUtils.keep("hello", (String) null)); [EOL]     assertEquals("", CharSetUtils.keep("hello", "")); [EOL]     assertEquals("", CharSetUtils.keep("hello", "xyz")); [EOL]     assertEquals("hello", CharSetUtils.keep("hello", "a-z")); [EOL]     assertEquals("hello", CharSetUtils.keep("hello", "oleh")); [EOL]     assertEquals("ell", CharSetUtils.keep("hello", "el")); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new ExceptionUtils()); [EOL]     final Constructor<?>[] cons = ExceptionUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(ExceptionUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(ExceptionUtils.class.getModifiers())); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getCause(null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getCause(nested)); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getCause(jdkNoCause)); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause())); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause())); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getCause(null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getCause(nested)); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getCause(jdkNoCause)); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause())); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause())); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getCause(null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getCause(nested)); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getCause(jdkNoCause)); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause())); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause())); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getCause(null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getCause(nested)); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getCause(jdkNoCause)); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause())); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause())); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getCause(null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getCause(nested)); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getCause(jdkNoCause)); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause())); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause())); [EOL] }
@Test [EOL] public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception { [EOL]     ByteArrayOutputStream out = new ByteArrayOutputStream(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out)); [EOL]     assertEquals(0, out.toString().length()); [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     try { [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out)); [EOL]     String stackTrace = out.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out)); [EOL]     stackTrace = out.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL] }
@Test [EOL] public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception { [EOL]     ByteArrayOutputStream out = new ByteArrayOutputStream(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out)); [EOL]     assertEquals(0, out.toString().length()); [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     try { [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out)); [EOL]     String stackTrace = out.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out)); [EOL]     stackTrace = out.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL] }
@Test [EOL] public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception { [EOL]     ByteArrayOutputStream out = new ByteArrayOutputStream(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out)); [EOL]     assertEquals(0, out.toString().length()); [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     try { [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out)); [EOL]     String stackTrace = out.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out)); [EOL]     stackTrace = out.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL] }
@Test [EOL] public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]     StringWriter writer = new StringWriter(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]     assertEquals(0, writer.getBuffer().length()); [EOL]     writer = new StringWriter(1024); [EOL]     try { [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     writer = new StringWriter(1024); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]     String stackTrace = writer.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]     writer = new StringWriter(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]     stackTrace = writer.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL] }
@Test [EOL] public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]     StringWriter writer = new StringWriter(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]     assertEquals(0, writer.getBuffer().length()); [EOL]     writer = new StringWriter(1024); [EOL]     try { [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     writer = new StringWriter(1024); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]     String stackTrace = writer.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]     writer = new StringWriter(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]     stackTrace = writer.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL] }
@Test [EOL] public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]     StringWriter writer = new StringWriter(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]     assertEquals(0, writer.getBuffer().length()); [EOL]     writer = new StringWriter(1024); [EOL]     try { [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     writer = new StringWriter(1024); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]     String stackTrace = writer.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]     writer = new StringWriter(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]     stackTrace = writer.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testRemoveCommonFrames_ListList() throws Exception { [EOL]     ExceptionUtils.removeCommonFrames(null, null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testRemoveCommonFrames_ListList() throws Exception { [EOL]     ExceptionUtils.removeCommonFrames(null, null); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract((short) 1); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract((short) 1); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract((short) 1); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract((short) 1); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract((short) 1); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract((short) 1); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract((short) 1); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testGetStartTime() { [EOL]     final long beforeStopWatch = System.currentTimeMillis(); [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.getStartTime(); [EOL]         fail("Calling getStartTime on an unstarted StopWatch should throw an exception"); [EOL]     } catch (final IllegalStateException expected) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.getStartTime(); [EOL]         Assert.assertTrue(watch.getStartTime() >= beforeStopWatch); [EOL]     } catch (final IllegalStateException ex) { [EOL]         fail("Start time should be available: " + ex.getMessage()); [EOL]     } [EOL]     watch.reset(); [EOL]     try { [EOL]         watch.getStartTime(); [EOL]         fail("Calling getStartTime on a reset, but unstarted StopWatch should throw an exception"); [EOL]     } catch (final IllegalStateException expected) { [EOL]     } [EOL] }
@Test [EOL] public void testGetStartTime() { [EOL]     final long beforeStopWatch = System.currentTimeMillis(); [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.getStartTime(); [EOL]         fail("Calling getStartTime on an unstarted StopWatch should throw an exception"); [EOL]     } catch (final IllegalStateException expected) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.getStartTime(); [EOL]         Assert.assertTrue(watch.getStartTime() >= beforeStopWatch); [EOL]     } catch (final IllegalStateException ex) { [EOL]         fail("Start time should be available: " + ex.getMessage()); [EOL]     } [EOL]     watch.reset(); [EOL]     try { [EOL]         watch.getStartTime(); [EOL]         fail("Calling getStartTime on a reset, but unstarted StopWatch should throw an exception"); [EOL]     } catch (final IllegalStateException expected) { [EOL]     } [EOL] }
@Test [EOL] public void testGetStartTime() { [EOL]     final long beforeStopWatch = System.currentTimeMillis(); [EOL]     final StopWatch watch = new StopWatch(); [EOL]     try { [EOL]         watch.getStartTime(); [EOL]         fail("Calling getStartTime on an unstarted StopWatch should throw an exception"); [EOL]     } catch (final IllegalStateException expected) { [EOL]     } [EOL]     watch.start(); [EOL]     try { [EOL]         watch.getStartTime(); [EOL]         Assert.assertTrue(watch.getStartTime() >= beforeStopWatch); [EOL]     } catch (final IllegalStateException ex) { [EOL]         fail("Start time should be available: " + ex.getMessage()); [EOL]     } [EOL]     watch.reset(); [EOL]     try { [EOL]         watch.getStartTime(); [EOL]         fail("Calling getStartTime on a reset, but unstarted StopWatch should throw an exception"); [EOL]     } catch (final IllegalStateException expected) { [EOL]     } [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     final char[] obj1 = new char[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final char[] obj2 = new char[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final char[] obj3 = new char[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     final char[] obj1 = new char[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final char[] obj2 = new char[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final char[] obj3 = new char[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     final char[] obj1 = new char[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final char[] obj2 = new char[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final char[] obj3 = new char[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     final char[] obj1 = new char[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final char[] obj2 = new char[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final char[] obj3 = new char[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     final TestObject[] obj1 = new TestObject[2]; [EOL]     obj1[0] = new TestObject(4); [EOL]     obj1[1] = new TestObject(5); [EOL]     final TestObject[] obj2 = new TestObject[2]; [EOL]     obj2[0] = new TestObject(4); [EOL]     obj2[1] = new TestObject(5); [EOL]     final TestObject[] obj3 = new TestObject[3]; [EOL]     obj3[0] = new TestObject(4); [EOL]     obj3[1] = new TestObject(5); [EOL]     obj3[2] = new TestObject(6); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     final TestObject[] obj1 = new TestObject[2]; [EOL]     obj1[0] = new TestObject(4); [EOL]     obj1[1] = new TestObject(5); [EOL]     final TestObject[] obj2 = new TestObject[2]; [EOL]     obj2[0] = new TestObject(4); [EOL]     obj2[1] = new TestObject(5); [EOL]     final TestObject[] obj3 = new TestObject[3]; [EOL]     obj3[0] = new TestObject(4); [EOL]     obj3[1] = new TestObject(5); [EOL]     obj3[2] = new TestObject(6); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     final TestObject[] obj1 = new TestObject[2]; [EOL]     obj1[0] = new TestObject(4); [EOL]     obj1[1] = new TestObject(5); [EOL]     final TestObject[] obj2 = new TestObject[2]; [EOL]     obj2[0] = new TestObject(4); [EOL]     obj2[1] = new TestObject(5); [EOL]     final TestObject[] obj3 = new TestObject[3]; [EOL]     obj3[0] = new TestObject(4); [EOL]     obj3[1] = new TestObject(5); [EOL]     obj3[2] = new TestObject(6); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     final TestObject[] obj1 = new TestObject[2]; [EOL]     obj1[0] = new TestObject(4); [EOL]     obj1[1] = new TestObject(5); [EOL]     final TestObject[] obj2 = new TestObject[2]; [EOL]     obj2[0] = new TestObject(4); [EOL]     obj2[1] = new TestObject(5); [EOL]     final TestObject[] obj3 = new TestObject[3]; [EOL]     obj3[0] = new TestObject(4); [EOL]     obj3[1] = new TestObject(5); [EOL]     obj3[2] = new TestObject(6); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     final TestObject[] obj1 = new TestObject[2]; [EOL]     obj1[0] = new TestObject(4); [EOL]     obj1[1] = new TestObject(5); [EOL]     final TestObject[] obj2 = new TestObject[2]; [EOL]     obj2[0] = new TestObject(4); [EOL]     obj2[1] = new TestObject(5); [EOL]     final TestObject[] obj3 = new TestObject[3]; [EOL]     obj3[0] = new TestObject(4); [EOL]     obj3[1] = new TestObject(5); [EOL]     obj3[2] = new TestObject(6); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     final TestObject[] obj1 = new TestObject[2]; [EOL]     obj1[0] = new TestObject(4); [EOL]     obj1[1] = new TestObject(5); [EOL]     final TestObject[] obj2 = new TestObject[2]; [EOL]     obj2[0] = new TestObject(4); [EOL]     obj2[1] = new TestObject(5); [EOL]     final TestObject[] obj3 = new TestObject[3]; [EOL]     obj3[0] = new TestObject(4); [EOL]     obj3[1] = new TestObject(5); [EOL]     obj3[2] = new TestObject(6); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testCharArray() { [EOL]     final char[] obj1 = new char[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final char[] obj2 = new char[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final char[] obj3 = new char[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testIndexOf_String() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOf("", null)); [EOL]     assertEquals(0, StringUtils.indexOf("", "")); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", "a")); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", "b")); [EOL]     assertEquals(1, StringUtils.indexOf("aabaabaa", "ab")); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", "")); [EOL]     assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b")); [EOL] }
@Test [EOL] public void testIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.indexOf("", "", 0)); [EOL]     assertEquals(0, StringUtils.indexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.indexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.indexOf("abc", "", 0)); [EOL]     assertEquals(0, StringUtils.indexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.indexOf("abc", "", 9)); [EOL]     assertEquals(3, StringUtils.indexOf("abc", "", 3)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(1, StringUtils.indexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", "", 2)); [EOL]     assertEquals(7, StringUtils.indexOf("12345678", "8", 5)); [EOL]     assertEquals(7, StringUtils.indexOf("12345678", "8", 6)); [EOL]     assertEquals(7, StringUtils.indexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.indexOf("12345678", "8", 8)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] }
@Test [EOL] public void testLastIndexOf_String() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "a")); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "")); [EOL]     assertEquals(8, StringUtils.lastIndexOf("aabaabaa", "")); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a")); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b")); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab")); [EOL]     assertEquals(4, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "ab")); [EOL] }
@Test [EOL] public void testContainsAny_StringWithSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000, CharU20000)); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]     assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]     assertFalse(StringUtils.containsAny(CharU20000, CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharU20000)); [EOL] }
@Test [EOL] public void testContainsAny_StringWithSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000, CharU20000)); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]     assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]     assertFalse(StringUtils.containsAny(CharU20000, CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharU20000)); [EOL] }
@Test [EOL] public void testContainsAny_StringWithSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000, CharU20000)); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]     assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]     assertFalse(StringUtils.containsAny(CharU20000, CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharU20000)); [EOL] }
@Test [EOL] public void testContainsAny_StringWithSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000, CharU20000)); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]     assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]     assertFalse(StringUtils.containsAny(CharU20000, CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharU20000)); [EOL] }
@Test [EOL] public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]     assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL] }
@Test [EOL] public void testContainsNone_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { '.' }; [EOL]     final char[] chars3 = { 'c', 'd' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsNone_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { '.' }; [EOL]     final char[] chars3 = { 'c', 'd' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsNone_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { '.' }; [EOL]     final char[] chars3 = { 'c', 'd' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsNone_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { '.' }; [EOL]     final char[] chars3 = { 'c', 'd' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsNone_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { '.' }; [EOL]     final char[] chars3 = { 'c', 'd' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsNone_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { '.' }; [EOL]     final char[] chars3 = { 'c', 'd' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsNone_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { '.' }; [EOL]     final char[] chars3 = { 'c', 'd' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsNone_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { '.' }; [EOL]     final char[] chars3 = { 'c', 'd' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsNone_String() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final String chars1 = "b"; [EOL]     final String chars2 = "."; [EOL]     final String chars3 = "cd"; [EOL]     assertTrue(StringUtils.containsNone(null, (String) null)); [EOL]     assertTrue(StringUtils.containsNone("", (String) null)); [EOL]     assertTrue(StringUtils.containsNone(null, "")); [EOL]     assertTrue(StringUtils.containsNone(str1, "")); [EOL]     assertTrue(StringUtils.containsNone("", "")); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsNone_String() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final String chars1 = "b"; [EOL]     final String chars2 = "."; [EOL]     final String chars3 = "cd"; [EOL]     assertTrue(StringUtils.containsNone(null, (String) null)); [EOL]     assertTrue(StringUtils.containsNone("", (String) null)); [EOL]     assertTrue(StringUtils.containsNone(null, "")); [EOL]     assertTrue(StringUtils.containsNone(str1, "")); [EOL]     assertTrue(StringUtils.containsNone("", "")); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] }
@Test [EOL] public void testSubstring_StringInt() { [EOL]     assertEquals(null, StringUtils.substring(null, 0)); [EOL]     assertEquals("", StringUtils.substring("", 0)); [EOL]     assertEquals("", StringUtils.substring("", 2)); [EOL]     assertEquals("", StringUtils.substring(SENTENCE, 80)); [EOL]     assertEquals(BAZ, StringUtils.substring(SENTENCE, 8)); [EOL]     assertEquals(BAZ, StringUtils.substring(SENTENCE, -3)); [EOL]     assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0)); [EOL]     assertEquals("abc", StringUtils.substring("abc", -4)); [EOL]     assertEquals("abc", StringUtils.substring("abc", -3)); [EOL]     assertEquals("bc", StringUtils.substring("abc", -2)); [EOL]     assertEquals("c", StringUtils.substring("abc", -1)); [EOL]     assertEquals("abc", StringUtils.substring("abc", 0)); [EOL]     assertEquals("bc", StringUtils.substring("abc", 1)); [EOL]     assertEquals("c", StringUtils.substring("abc", 2)); [EOL]     assertEquals("", StringUtils.substring("abc", 3)); [EOL]     assertEquals("", StringUtils.substring("abc", 4)); [EOL] }
@Test [EOL] public void testSubstringBeforeLast_StringString() { [EOL]     assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringBeforeLast(null, null)); [EOL]     assertEquals(null, StringUtils.substringBeforeLast(null, "")); [EOL]     assertEquals(null, StringUtils.substringBeforeLast(null, "XX")); [EOL]     assertEquals("", StringUtils.substringBeforeLast("", null)); [EOL]     assertEquals("", StringUtils.substringBeforeLast("", "")); [EOL]     assertEquals("", StringUtils.substringBeforeLast("", "XX")); [EOL]     assertEquals("foo", StringUtils.substringBeforeLast("foo", null)); [EOL]     assertEquals("foo", StringUtils.substringBeforeLast("foo", "b")); [EOL]     assertEquals("fo", StringUtils.substringBeforeLast("foo", "o")); [EOL]     assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d")); [EOL]     assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d")); [EOL]     assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d")); [EOL]     assertEquals("a", StringUtils.substringBeforeLast("abc", "b")); [EOL]     assertEquals("abc ", StringUtils.substringBeforeLast("abc \n", "\n")); [EOL]     assertEquals("a", StringUtils.substringBeforeLast("a", null)); [EOL]     assertEquals("a", StringUtils.substringBeforeLast("a", "")); [EOL]     assertEquals("", StringUtils.substringBeforeLast("a", "a")); [EOL] }
@Test [EOL] public void testSplit_String() { [EOL]     assertArrayEquals(null, StringUtils.split(null)); [EOL]     assertEquals(0, StringUtils.split("").length); [EOL]     String str = "a b  .c"; [EOL]     String[] res = StringUtils.split(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a "; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[1]); [EOL] }
@Test [EOL] public void testSplit_String() { [EOL]     assertArrayEquals(null, StringUtils.split(null)); [EOL]     assertEquals(0, StringUtils.split("").length); [EOL]     String str = "a b  .c"; [EOL]     String[] res = StringUtils.split(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a "; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[1]); [EOL] }
@Test [EOL] public void testSplit_String() { [EOL]     assertArrayEquals(null, StringUtils.split(null)); [EOL]     assertEquals(0, StringUtils.split("").length); [EOL]     String str = "a b  .c"; [EOL]     String[] res = StringUtils.split(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a "; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[1]); [EOL] }
@Test [EOL] public void testSplit_String() { [EOL]     assertArrayEquals(null, StringUtils.split(null)); [EOL]     assertEquals(0, StringUtils.split("").length); [EOL]     String str = "a b  .c"; [EOL]     String[] res = StringUtils.split(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a "; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[1]); [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBoolean() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".")); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".").length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de", "fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy"); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL]     final String[] splitWithMultipleSeparatorExpectedResults = { "ab", "cd", "ef" }; [EOL]     final String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator("ab:cd::ef", ":"); [EOL]     assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length); [EOL]     for (int i = 0; i < splitWithMultipleSeparatorExpectedResults.length; i++) { [EOL]         assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBoolean() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".")); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".").length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de", "fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy"); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL]     final String[] splitWithMultipleSeparatorExpectedResults = { "ab", "cd", "ef" }; [EOL]     final String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator("ab:cd::ef", ":"); [EOL]     assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length); [EOL]     for (int i = 0; i < splitWithMultipleSeparatorExpectedResults.length; i++) { [EOL]         assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBoolean() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".")); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".").length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de", "fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy"); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL]     final String[] splitWithMultipleSeparatorExpectedResults = { "ab", "cd", "ef" }; [EOL]     final String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator("ab:cd::ef", ":"); [EOL]     assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length); [EOL]     for (int i = 0; i < splitWithMultipleSeparatorExpectedResults.length; i++) { [EOL]         assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBoolean() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".")); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".").length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de", "fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy"); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL]     final String[] splitWithMultipleSeparatorExpectedResults = { "ab", "cd", "ef" }; [EOL]     final String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator("ab:cd::ef", ":"); [EOL]     assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length); [EOL]     for (int i = 0; i < splitWithMultipleSeparatorExpectedResults.length; i++) { [EOL]         assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBoolean() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".")); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".").length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de", "fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy"); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL]     final String[] splitWithMultipleSeparatorExpectedResults = { "ab", "cd", "ef" }; [EOL]     final String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator("ab:cd::ef", ":"); [EOL]     assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length); [EOL]     for (int i = 0; i < splitWithMultipleSeparatorExpectedResults.length; i++) { [EOL]         assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]); [EOL]     } [EOL] }
@Test [EOL] public void testJoin_Objectarray() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null)); [EOL]     assertEquals("", StringUtils.join()); [EOL]     assertEquals("", StringUtils.join((Object) null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST)); [EOL]     assertEquals("abc", StringUtils.join(new String[] { "a", "b", "c" })); [EOL]     assertEquals("a", StringUtils.join(new String[] { null, "a", "" })); [EOL]     assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST)); [EOL]     assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST)); [EOL] }
@Test [EOL] public void testJoin_Objectarray() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null)); [EOL]     assertEquals("", StringUtils.join()); [EOL]     assertEquals("", StringUtils.join((Object) null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST)); [EOL]     assertEquals("abc", StringUtils.join(new String[] { "a", "b", "c" })); [EOL]     assertEquals("a", StringUtils.join(new String[] { null, "a", "" })); [EOL]     assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST)); [EOL]     assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST)); [EOL] }
@Test [EOL] public void testJoin_Objectarray() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null)); [EOL]     assertEquals("", StringUtils.join()); [EOL]     assertEquals("", StringUtils.join((Object) null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST)); [EOL]     assertEquals("abc", StringUtils.join(new String[] { "a", "b", "c" })); [EOL]     assertEquals("a", StringUtils.join(new String[] { null, "a", "" })); [EOL]     assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST)); [EOL]     assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST)); [EOL] }
@Test [EOL] public void testJoin_Objectarray() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null)); [EOL]     assertEquals("", StringUtils.join()); [EOL]     assertEquals("", StringUtils.join((Object) null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST)); [EOL]     assertEquals("abc", StringUtils.join(new String[] { "a", "b", "c" })); [EOL]     assertEquals("a", StringUtils.join(new String[] { null, "a", "" })); [EOL]     assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST)); [EOL]     assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfShorts() { [EOL]     assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfShorts() { [EOL]     assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfShorts() { [EOL]     assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfDoubles() { [EOL]     assertEquals(null, StringUtils.join((double[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfShorts() { [EOL]     assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfDoubles() { [EOL]     assertEquals(null, StringUtils.join((double[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfDoubles() { [EOL]     assertEquals(null, StringUtils.join((double[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testRemoveStart() { [EOL]     assertNull(StringUtils.removeStart(null, null)); [EOL]     assertNull(StringUtils.removeStart(null, "")); [EOL]     assertNull(StringUtils.removeStart(null, "a")); [EOL]     assertEquals(StringUtils.removeStart("", null), ""); [EOL]     assertEquals(StringUtils.removeStart("", ""), ""); [EOL]     assertEquals(StringUtils.removeStart("", "a"), ""); [EOL]     assertEquals(StringUtils.removeStart("www.domain.com", "www."), "domain.com"); [EOL]     assertEquals(StringUtils.removeStart("domain.com", "www."), "domain.com"); [EOL]     assertEquals(StringUtils.removeStart("domain.com", ""), "domain.com"); [EOL]     assertEquals(StringUtils.removeStart("domain.com", null), "domain.com"); [EOL] }
@Test [EOL] public void testRemoveStart() { [EOL]     assertNull(StringUtils.removeStart(null, null)); [EOL]     assertNull(StringUtils.removeStart(null, "")); [EOL]     assertNull(StringUtils.removeStart(null, "a")); [EOL]     assertEquals(StringUtils.removeStart("", null), ""); [EOL]     assertEquals(StringUtils.removeStart("", ""), ""); [EOL]     assertEquals(StringUtils.removeStart("", "a"), ""); [EOL]     assertEquals(StringUtils.removeStart("www.domain.com", "www."), "domain.com"); [EOL]     assertEquals(StringUtils.removeStart("domain.com", "www."), "domain.com"); [EOL]     assertEquals(StringUtils.removeStart("domain.com", ""), "domain.com"); [EOL]     assertEquals(StringUtils.removeStart("domain.com", null), "domain.com"); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testChomp() { [EOL]     final String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n" }, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n" } }; [EOL]     for (final String[] chompCase : chompCases) { [EOL]         final String original = chompCase[0]; [EOL]         final String expectedResult = chompCase[1]; [EOL]         assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); [EOL]     } [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testChomp() { [EOL]     final String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n" }, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n" } }; [EOL]     for (final String[] chompCase : chompCases) { [EOL]         final String original = chompCase[0]; [EOL]         final String expectedResult = chompCase[1]; [EOL]         assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); [EOL]     } [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testChomp() { [EOL]     final String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n" }, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n" } }; [EOL]     for (final String[] chompCase : chompCases) { [EOL]         final String original = chompCase[0]; [EOL]         final String expectedResult = chompCase[1]; [EOL]         assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); [EOL]     } [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testChomp() { [EOL]     final String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n" }, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n" } }; [EOL]     for (final String[] chompCase : chompCases) { [EOL]         final String original = chompCase[0]; [EOL]         final String expectedResult = chompCase[1]; [EOL]         assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); [EOL]     } [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testChomp() { [EOL]     final String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n" }, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n" } }; [EOL]     for (final String[] chompCase : chompCases) { [EOL]         final String original = chompCase[0]; [EOL]         final String expectedResult = chompCase[1]; [EOL]         assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); [EOL]     } [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testChomp() { [EOL]     final String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n" }, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n" } }; [EOL]     for (final String[] chompCase : chompCases) { [EOL]         final String original = chompCase[0]; [EOL]         final String expectedResult = chompCase[1]; [EOL]         assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); [EOL]     } [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testChomp() { [EOL]     final String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n" }, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n" } }; [EOL]     for (final String[] chompCase : chompCases) { [EOL]         final String original = chompCase[0]; [EOL]         final String expectedResult = chompCase[1]; [EOL]         assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); [EOL]     } [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testChomp() { [EOL]     final String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n" }, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n" } }; [EOL]     for (final String[] chompCase : chompCases) { [EOL]         final String original = chompCase[0]; [EOL]         final String expectedResult = chompCase[1]; [EOL]         assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); [EOL]     } [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); [EOL] }
@Test [EOL] public void testRepeat_StringStringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]     assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]     assertEquals("", StringUtils.repeat("", null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]     assertEquals("", StringUtils.repeat("", "", 2)); [EOL]     assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]     assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL] }
@Test [EOL] public void testRepeat_StringStringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]     assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]     assertEquals("", StringUtils.repeat("", null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]     assertEquals("", StringUtils.repeat("", "", 2)); [EOL]     assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]     assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL] }
@Test [EOL] public void testRepeat_StringStringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]     assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]     assertEquals("", StringUtils.repeat("", null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]     assertEquals("", StringUtils.repeat("", "", 2)); [EOL]     assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]     assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL] }
@Test [EOL] public void testRepeat_StringStringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]     assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]     assertEquals("", StringUtils.repeat("", null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]     assertEquals("", StringUtils.repeat("", "", 2)); [EOL]     assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]     assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL] }
@Test [EOL] public void testRepeat_StringStringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]     assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]     assertEquals("", StringUtils.repeat("", null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]     assertEquals("", StringUtils.repeat("", "", 2)); [EOL]     assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]     assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL] }
@Test [EOL] public void testRepeat_StringStringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]     assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]     assertEquals("", StringUtils.repeat("", null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]     assertEquals("", StringUtils.repeat("", "", 2)); [EOL]     assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]     assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL] }
@Test [EOL] public void testRepeat_StringStringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]     assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]     assertEquals("", StringUtils.repeat("", null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]     assertEquals("", StringUtils.repeat("", "", 2)); [EOL]     assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]     assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL] }
@Test [EOL] public void testRepeat_StringStringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]     assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]     assertEquals("", StringUtils.repeat("", null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]     assertEquals("", StringUtils.repeat("", "", 2)); [EOL]     assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]     assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL] }
@Test [EOL] public void testSwapCase_String() { [EOL]     assertEquals(null, StringUtils.swapCase(null)); [EOL]     assertEquals("", StringUtils.swapCase("")); [EOL]     assertEquals("  ", StringUtils.swapCase("  ")); [EOL]     assertEquals("i", WordUtils.swapCase("I")); [EOL]     assertEquals("I", WordUtils.swapCase("i")); [EOL]     assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123")); [EOL]     assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123")); [EOL]     assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123")); [EOL]     assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123")); [EOL]     final String test = "This String contains a TitleCase character: \u01C8"; [EOL]     final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]     assertEquals(expect, WordUtils.swapCase(test)); [EOL] }
@Test [EOL] public void testIsAlphaspace() { [EOL]     assertFalse(StringUtils.isAlphaSpace(null)); [EOL]     assertTrue(StringUtils.isAlphaSpace("")); [EOL]     assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphaSpace("a")); [EOL]     assertTrue(StringUtils.isAlphaSpace("A")); [EOL]     assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphaSpace("ham kso")); [EOL]     assertFalse(StringUtils.isAlphaSpace("1")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphaSpace("_")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphaspace() { [EOL]     assertFalse(StringUtils.isAlphaSpace(null)); [EOL]     assertTrue(StringUtils.isAlphaSpace("")); [EOL]     assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphaSpace("a")); [EOL]     assertTrue(StringUtils.isAlphaSpace("A")); [EOL]     assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphaSpace("ham kso")); [EOL]     assertFalse(StringUtils.isAlphaSpace("1")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphaSpace("_")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphaspace() { [EOL]     assertFalse(StringUtils.isAlphaSpace(null)); [EOL]     assertTrue(StringUtils.isAlphaSpace("")); [EOL]     assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphaSpace("a")); [EOL]     assertTrue(StringUtils.isAlphaSpace("A")); [EOL]     assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphaSpace("ham kso")); [EOL]     assertFalse(StringUtils.isAlphaSpace("1")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphaSpace("_")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphaspace() { [EOL]     assertFalse(StringUtils.isAlphaSpace(null)); [EOL]     assertTrue(StringUtils.isAlphaSpace("")); [EOL]     assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphaSpace("a")); [EOL]     assertTrue(StringUtils.isAlphaSpace("A")); [EOL]     assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphaSpace("ham kso")); [EOL]     assertFalse(StringUtils.isAlphaSpace("1")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphaSpace("_")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphaspace() { [EOL]     assertFalse(StringUtils.isAlphaSpace(null)); [EOL]     assertTrue(StringUtils.isAlphaSpace("")); [EOL]     assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphaSpace("a")); [EOL]     assertTrue(StringUtils.isAlphaSpace("A")); [EOL]     assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphaSpace("ham kso")); [EOL]     assertFalse(StringUtils.isAlphaSpace("1")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphaSpace("_")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphaspace() { [EOL]     assertFalse(StringUtils.isAlphaSpace(null)); [EOL]     assertTrue(StringUtils.isAlphaSpace("")); [EOL]     assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphaSpace("a")); [EOL]     assertTrue(StringUtils.isAlphaSpace("A")); [EOL]     assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphaSpace("ham kso")); [EOL]     assertFalse(StringUtils.isAlphaSpace("1")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphaSpace("_")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlphaspace() { [EOL]     assertFalse(StringUtils.isAlphaSpace(null)); [EOL]     assertTrue(StringUtils.isAlphaSpace("")); [EOL]     assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphaSpace("a")); [EOL]     assertTrue(StringUtils.isAlphaSpace("A")); [EOL]     assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphaSpace("ham kso")); [EOL]     assertFalse(StringUtils.isAlphaSpace("1")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphaSpace("_")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testDefaultIfBlank_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(null, "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank("", "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(" ", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultIfBlank("abc", "NULL")); [EOL]     assertNull(StringUtils.defaultIfBlank("", null)); [EOL]     final String s = StringUtils.defaultIfBlank("abc", "NULL"); [EOL]     assertEquals("abc", s); [EOL] }
@Test [EOL] public void testDefaultIfBlank_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(null, "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank("", "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(" ", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultIfBlank("abc", "NULL")); [EOL]     assertNull(StringUtils.defaultIfBlank("", null)); [EOL]     final String s = StringUtils.defaultIfBlank("abc", "NULL"); [EOL]     assertEquals("abc", s); [EOL] }
@Test [EOL] public void testDefaultIfBlank_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(null, "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank("", "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(" ", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultIfBlank("abc", "NULL")); [EOL]     assertNull(StringUtils.defaultIfBlank("", null)); [EOL]     final String s = StringUtils.defaultIfBlank("abc", "NULL"); [EOL]     assertEquals("abc", s); [EOL] }
@Test [EOL] public void testDefaultIfBlank_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(null, "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank("", "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(" ", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultIfBlank("abc", "NULL")); [EOL]     assertNull(StringUtils.defaultIfBlank("", null)); [EOL]     final String s = StringUtils.defaultIfBlank("abc", "NULL"); [EOL]     assertEquals("abc", s); [EOL] }
@Test [EOL] public void testDefaultIfBlank_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(null, "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank("", "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(" ", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultIfBlank("abc", "NULL")); [EOL]     assertNull(StringUtils.defaultIfBlank("", null)); [EOL]     final String s = StringUtils.defaultIfBlank("abc", "NULL"); [EOL]     assertEquals("abc", s); [EOL] }
@Test [EOL] public void testDifferenceAt_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]     assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]     assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifferenceAt_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]     assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]     assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifferenceAt_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]     assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]     assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifferenceAt_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]     assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]     assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifferenceAt_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]     assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]     assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifferenceAt_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]     assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]     assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifferenceAt_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]     assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]     assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifferenceAt_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]     assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]     assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testGetCommonPrefix_StringArray() { [EOL]     assertEquals("", StringUtils.getCommonPrefix((String[]) null)); [EOL]     assertEquals("", StringUtils.getCommonPrefix()); [EOL]     assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]     assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]     assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]     assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]     assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]     assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]     assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]     assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]     assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL] }
@Test [EOL] public void testGetLevenshteinDistance_StringString() { [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("", "a")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog")); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo")); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetLevenshteinDistance_StringString() { [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("", "a")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog")); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo")); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetLevenshteinDistance_StringString() { [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("", "a")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog")); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo")); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetLevenshteinDistance_StringString() { [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("", "a")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog")); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo")); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetLevenshteinDistance_StringString() { [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("", "a")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog")); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo")); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetLevenshteinDistance_StringString() { [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("", "a")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog")); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo")); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testStartsWithIgnoreCase() { [EOL]     assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); [EOL]     assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); [EOL] }
@Test [EOL] public void testStartsWithIgnoreCase() { [EOL]     assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); [EOL]     assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); [EOL] }
@Test [EOL] public void testStartsWithIgnoreCase() { [EOL]     assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); [EOL]     assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); [EOL] }
@Test [EOL] public void testStartsWithIgnoreCase() { [EOL]     assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); [EOL]     assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); [EOL] }
@Test [EOL] public void testStartsWithIgnoreCase() { [EOL]     assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); [EOL]     assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); [EOL] }
@Test [EOL] public void testStartsWithIgnoreCase() { [EOL]     assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); [EOL]     assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); [EOL] }
@Test [EOL] public void testStartsWithIgnoreCase() { [EOL]     assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); [EOL]     assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); [EOL] }
@Test [EOL] public void testStartsWithIgnoreCase() { [EOL]     assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); [EOL]     assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); [EOL]     assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); [EOL]     assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); [EOL]     assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); [EOL]     assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); [EOL]     assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); [EOL]     assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); [EOL]     assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); [EOL]     assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); [EOL]     assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); [EOL]     assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); [EOL]     assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); [EOL]     assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); [EOL]     assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); [EOL]     assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); [EOL]     assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); [EOL]     assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); [EOL]     assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); [EOL]     assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); [EOL]     assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); [EOL]     assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); [EOL]     assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); [EOL]     assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); [EOL]     assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); [EOL]     assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); [EOL]     assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); [EOL]     assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); [EOL]     assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); [EOL]     assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); [EOL]     assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); [EOL]     assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); [EOL]     assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); [EOL]     assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); [EOL]     assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); [EOL]     assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); [EOL]     assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); [EOL]     assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); [EOL]     assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); [EOL]     assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); [EOL]     assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); [EOL]     assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); [EOL]     assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); [EOL]     assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); [EOL]     assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); [EOL]     assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); [EOL]     assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); [EOL]     assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); [EOL]     assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); [EOL]     assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); [EOL]     assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); [EOL]     assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); [EOL]     assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); [EOL]     assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); [EOL]     assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); [EOL]     assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); [EOL]     assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); [EOL]     assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); [EOL]     assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); [EOL]     assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); [EOL]     assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); [EOL]     assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); [EOL]     assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); [EOL]     assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); [EOL]     assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); [EOL]     assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); [EOL]     assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); [EOL]     assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); [EOL]     assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); [EOL]     assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); [EOL]     assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); [EOL]     assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); [EOL]     assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); [EOL]     assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); [EOL]     assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); [EOL]     assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); [EOL]     assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); [EOL]     assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); [EOL]     assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); [EOL]     assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); [EOL]     assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); [EOL]     assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); [EOL]     assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); [EOL]     assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); [EOL]     assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); [EOL]     assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); [EOL]     assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); [EOL]     assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); [EOL]     assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); [EOL]     assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); [EOL] }
@Test [EOL] public void testToString() throws UnsupportedEncodingException { [EOL]     final String expectedString = "The quick brown fox jumped over the lazy dog."; [EOL]     String encoding = SystemUtils.FILE_ENCODING; [EOL]     byte[] expectedBytes = expectedString.getBytes(encoding); [EOL]     assertArrayEquals(expectedBytes, expectedString.getBytes()); [EOL]     assertEquals(expectedString, StringUtils.toString(expectedBytes, null)); [EOL]     assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding)); [EOL]     encoding = "UTF-16"; [EOL]     expectedBytes = expectedString.getBytes(encoding); [EOL]     assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding)); [EOL] }
@Test [EOL] public void testToString() throws UnsupportedEncodingException { [EOL]     final String expectedString = "The quick brown fox jumped over the lazy dog."; [EOL]     String encoding = SystemUtils.FILE_ENCODING; [EOL]     byte[] expectedBytes = expectedString.getBytes(encoding); [EOL]     assertArrayEquals(expectedBytes, expectedString.getBytes()); [EOL]     assertEquals(expectedString, StringUtils.toString(expectedBytes, null)); [EOL]     assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding)); [EOL]     encoding = "UTF-16"; [EOL]     expectedBytes = expectedString.getBytes(encoding); [EOL]     assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding)); [EOL] }
@Test [EOL] public void testNanInfinite() { [EOL]     MutableDouble mutNum = new MutableDouble(Double.NaN); [EOL]     assertTrue(mutNum.isNaN()); [EOL]     mutNum = new MutableDouble(Double.POSITIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL]     mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL] }
@Test [EOL] public void testNanInfinite() { [EOL]     MutableDouble mutNum = new MutableDouble(Double.NaN); [EOL]     assertTrue(mutNum.isNaN()); [EOL]     mutNum = new MutableDouble(Double.POSITIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL]     mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL] }
@Test [EOL] public void testNanInfinite() { [EOL]     MutableDouble mutNum = new MutableDouble(Double.NaN); [EOL]     assertTrue(mutNum.isNaN()); [EOL]     mutNum = new MutableDouble(Double.POSITIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL]     mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL] }
@Test [EOL] public void testNanInfinite() { [EOL]     MutableDouble mutNum = new MutableDouble(Double.NaN); [EOL]     assertTrue(mutNum.isNaN()); [EOL]     mutNum = new MutableDouble(Double.POSITIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL]     mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL] }
@Test [EOL] public void testNanInfinite() { [EOL]     MutableDouble mutNum = new MutableDouble(Double.NaN); [EOL]     assertTrue(mutNum.isNaN()); [EOL]     mutNum = new MutableDouble(Double.POSITIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL]     mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     assertEquals(0, mutNum.compareTo(new MutableDouble(0d))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableDouble(1d))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     assertEquals(0, mutNum.compareTo(new MutableDouble(0d))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableDouble(1d))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     assertEquals(0, mutNum.compareTo(new MutableDouble(0d))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableDouble(1d))); [EOL] }
@Test [EOL] public void testSimpleReflectionObjectCycle() throws Exception { [EOL]     final SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(); [EOL]     simple.o = simple; [EOL]     assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString()); [EOL] }
@Test [EOL] public void testSimpleReflectionObjectCycle() throws Exception { [EOL]     final SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(); [EOL]     simple.o = simple; [EOL]     assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] array = new short[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testLongArrayArray() { [EOL]     long[][] array = new long[][] { { 1, 2 }, null, { 5 } }; [EOL]     assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArrayArray() { [EOL]     long[][] array = new long[][] { { 1, 2 }, null, { 5 } }; [EOL]     assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     Object[] array = new Object[] { null, base, new int[] { 3, 6 } }; [EOL]     assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] array = new short[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     short[] array = new short[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testBooleanArray() { [EOL]     boolean[] array = new boolean[] { true, false, false }; [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Q. Public"; [EOL]     p.age = 45; [EOL]     p.smoker = true; [EOL]     final String pBaseStr = "ToStringStyleTest.Person"; [EOL]     assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testSetSizeEndText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSizeEndText(null); [EOL]     assertEquals("", style.getSizeEndText()); [EOL] }
@Test [EOL] public void testSetSizeEndText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSizeEndText(null); [EOL]     assertEquals("", style.getSizeEndText()); [EOL] }
@Test [EOL] public void testSetSummaryObjectStartText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSummaryObjectStartText(null); [EOL]     assertEquals("", style.getSummaryObjectStartText()); [EOL] }
@Test [EOL] public void testSetSummaryObjectStartText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSummaryObjectStartText(null); [EOL]     assertEquals("", style.getSummaryObjectStartText()); [EOL] }
@Test [EOL] public void testSetSummaryObjectStartText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSummaryObjectStartText(null); [EOL]     assertEquals("", style.getSummaryObjectStartText()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] }
@Test [EOL] public void testEscapeJava() throws IOException { [EOL]     assertEquals(null, StringEscapeUtils.escapeJava(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEscapeJava("empty string", "", ""); [EOL]     assertEscapeJava(FOO, FOO); [EOL]     assertEscapeJava("tab", "\\t", "\t"); [EOL]     assertEscapeJava("backslash", "\\\\", "\\"); [EOL]     assertEscapeJava("single quote should not be escaped", "'", "'"); [EOL]     assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r"); [EOL]     assertEscapeJava("\\u1234", "\u1234"); [EOL]     assertEscapeJava("\\u0234", "\u0234"); [EOL]     assertEscapeJava("\\u00EF", "\u00ef"); [EOL]     assertEscapeJava("\\u0001", "\u0001"); [EOL]     assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd"); [EOL]     assertEscapeJava("He didn't say, \\\"stop!\\\"", "He didn't say, \"stop!\""); [EOL]     assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0", "This space is non-breaking:\u00a0"); [EOL]     assertEscapeJava("\\uABCD\\u1234\\u012C", "\uABCD\u1234\u012C"); [EOL] }
@Test [EOL] public void testEscapeJava() throws IOException { [EOL]     assertEquals(null, StringEscapeUtils.escapeJava(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEscapeJava("empty string", "", ""); [EOL]     assertEscapeJava(FOO, FOO); [EOL]     assertEscapeJava("tab", "\\t", "\t"); [EOL]     assertEscapeJava("backslash", "\\\\", "\\"); [EOL]     assertEscapeJava("single quote should not be escaped", "'", "'"); [EOL]     assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r"); [EOL]     assertEscapeJava("\\u1234", "\u1234"); [EOL]     assertEscapeJava("\\u0234", "\u0234"); [EOL]     assertEscapeJava("\\u00EF", "\u00ef"); [EOL]     assertEscapeJava("\\u0001", "\u0001"); [EOL]     assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd"); [EOL]     assertEscapeJava("He didn't say, \\\"stop!\\\"", "He didn't say, \"stop!\""); [EOL]     assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0", "This space is non-breaking:\u00a0"); [EOL]     assertEscapeJava("\\uABCD\\u1234\\u012C", "\uABCD\u1234\u012C"); [EOL] }
@Test [EOL] public void testEscapeJava() throws IOException { [EOL]     assertEquals(null, StringEscapeUtils.escapeJava(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEscapeJava("empty string", "", ""); [EOL]     assertEscapeJava(FOO, FOO); [EOL]     assertEscapeJava("tab", "\\t", "\t"); [EOL]     assertEscapeJava("backslash", "\\\\", "\\"); [EOL]     assertEscapeJava("single quote should not be escaped", "'", "'"); [EOL]     assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r"); [EOL]     assertEscapeJava("\\u1234", "\u1234"); [EOL]     assertEscapeJava("\\u0234", "\u0234"); [EOL]     assertEscapeJava("\\u00EF", "\u00ef"); [EOL]     assertEscapeJava("\\u0001", "\u0001"); [EOL]     assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd"); [EOL]     assertEscapeJava("He didn't say, \\\"stop!\\\"", "He didn't say, \"stop!\""); [EOL]     assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0", "This space is non-breaking:\u00a0"); [EOL]     assertEscapeJava("\\uABCD\\u1234\\u012C", "\uABCD\u1234\u012C"); [EOL] }
@Test [EOL] public void testEscapeJava() throws IOException { [EOL]     assertEquals(null, StringEscapeUtils.escapeJava(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEscapeJava("empty string", "", ""); [EOL]     assertEscapeJava(FOO, FOO); [EOL]     assertEscapeJava("tab", "\\t", "\t"); [EOL]     assertEscapeJava("backslash", "\\\\", "\\"); [EOL]     assertEscapeJava("single quote should not be escaped", "'", "'"); [EOL]     assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r"); [EOL]     assertEscapeJava("\\u1234", "\u1234"); [EOL]     assertEscapeJava("\\u0234", "\u0234"); [EOL]     assertEscapeJava("\\u00EF", "\u00ef"); [EOL]     assertEscapeJava("\\u0001", "\u0001"); [EOL]     assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd"); [EOL]     assertEscapeJava("He didn't say, \\\"stop!\\\"", "He didn't say, \"stop!\""); [EOL]     assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0", "This space is non-breaking:\u00a0"); [EOL]     assertEscapeJava("\\uABCD\\u1234\\u012C", "\uABCD\u1234\u012C"); [EOL] }
@Test [EOL] public void testEscapeJava() throws IOException { [EOL]     assertEquals(null, StringEscapeUtils.escapeJava(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEscapeJava("empty string", "", ""); [EOL]     assertEscapeJava(FOO, FOO); [EOL]     assertEscapeJava("tab", "\\t", "\t"); [EOL]     assertEscapeJava("backslash", "\\\\", "\\"); [EOL]     assertEscapeJava("single quote should not be escaped", "'", "'"); [EOL]     assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r"); [EOL]     assertEscapeJava("\\u1234", "\u1234"); [EOL]     assertEscapeJava("\\u0234", "\u0234"); [EOL]     assertEscapeJava("\\u00EF", "\u00ef"); [EOL]     assertEscapeJava("\\u0001", "\u0001"); [EOL]     assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd"); [EOL]     assertEscapeJava("He didn't say, \\\"stop!\\\"", "He didn't say, \"stop!\""); [EOL]     assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0", "This space is non-breaking:\u00a0"); [EOL]     assertEscapeJava("\\uABCD\\u1234\\u012C", "\uABCD\u1234\u012C"); [EOL] }
@Test [EOL] public void testEscapeJava() throws IOException { [EOL]     assertEquals(null, StringEscapeUtils.escapeJava(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEscapeJava("empty string", "", ""); [EOL]     assertEscapeJava(FOO, FOO); [EOL]     assertEscapeJava("tab", "\\t", "\t"); [EOL]     assertEscapeJava("backslash", "\\\\", "\\"); [EOL]     assertEscapeJava("single quote should not be escaped", "'", "'"); [EOL]     assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r"); [EOL]     assertEscapeJava("\\u1234", "\u1234"); [EOL]     assertEscapeJava("\\u0234", "\u0234"); [EOL]     assertEscapeJava("\\u00EF", "\u00ef"); [EOL]     assertEscapeJava("\\u0001", "\u0001"); [EOL]     assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd"); [EOL]     assertEscapeJava("He didn't say, \\\"stop!\\\"", "He didn't say, \"stop!\""); [EOL]     assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0", "This space is non-breaking:\u00a0"); [EOL]     assertEscapeJava("\\uABCD\\u1234\\u012C", "\uABCD\u1234\u012C"); [EOL] }
@Test [EOL] public void testEscapeJava() throws IOException { [EOL]     assertEquals(null, StringEscapeUtils.escapeJava(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JAVA.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEscapeJava("empty string", "", ""); [EOL]     assertEscapeJava(FOO, FOO); [EOL]     assertEscapeJava("tab", "\\t", "\t"); [EOL]     assertEscapeJava("backslash", "\\\\", "\\"); [EOL]     assertEscapeJava("single quote should not be escaped", "'", "'"); [EOL]     assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r"); [EOL]     assertEscapeJava("\\u1234", "\u1234"); [EOL]     assertEscapeJava("\\u0234", "\u0234"); [EOL]     assertEscapeJava("\\u00EF", "\u00ef"); [EOL]     assertEscapeJava("\\u0001", "\u0001"); [EOL]     assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd"); [EOL]     assertEscapeJava("He didn't say, \\\"stop!\\\"", "He didn't say, \"stop!\""); [EOL]     assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0", "This space is non-breaking:\u00a0"); [EOL]     assertEscapeJava("\\uABCD\\u1234\\u012C", "\uABCD\u1234\u012C"); [EOL] }
@Test [EOL] public void testHexDigitToInt() { [EOL]     assertEquals(0, Conversion.hexDigitToInt('0')); [EOL]     assertEquals(1, Conversion.hexDigitToInt('1')); [EOL]     assertEquals(2, Conversion.hexDigitToInt('2')); [EOL]     assertEquals(3, Conversion.hexDigitToInt('3')); [EOL]     assertEquals(4, Conversion.hexDigitToInt('4')); [EOL]     assertEquals(5, Conversion.hexDigitToInt('5')); [EOL]     assertEquals(6, Conversion.hexDigitToInt('6')); [EOL]     assertEquals(7, Conversion.hexDigitToInt('7')); [EOL]     assertEquals(8, Conversion.hexDigitToInt('8')); [EOL]     assertEquals(9, Conversion.hexDigitToInt('9')); [EOL]     assertEquals(10, Conversion.hexDigitToInt('A')); [EOL]     assertEquals(10, Conversion.hexDigitToInt('a')); [EOL]     assertEquals(11, Conversion.hexDigitToInt('B')); [EOL]     assertEquals(11, Conversion.hexDigitToInt('b')); [EOL]     assertEquals(12, Conversion.hexDigitToInt('C')); [EOL]     assertEquals(12, Conversion.hexDigitToInt('c')); [EOL]     assertEquals(13, Conversion.hexDigitToInt('D')); [EOL]     assertEquals(13, Conversion.hexDigitToInt('d')); [EOL]     assertEquals(14, Conversion.hexDigitToInt('E')); [EOL]     assertEquals(14, Conversion.hexDigitToInt('e')); [EOL]     assertEquals(15, Conversion.hexDigitToInt('F')); [EOL]     assertEquals(15, Conversion.hexDigitToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryBeMsb0ToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false })); [EOL]     try { [EOL]         Conversion.binaryBeMsb0ToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryBeMsb0ToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false })); [EOL]     try { [EOL]         Conversion.binaryBeMsb0ToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryBeMsb0ToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false })); [EOL]     try { [EOL]         Conversion.binaryBeMsb0ToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryBeMsb0ToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false })); [EOL]     try { [EOL]         Conversion.binaryBeMsb0ToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryBeMsb0ToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false })); [EOL]     try { [EOL]         Conversion.binaryBeMsb0ToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryBeMsb0ToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false })); [EOL]     try { [EOL]         Conversion.binaryBeMsb0ToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHexDigit() { [EOL]     assertEquals('0', Conversion.intToHexDigit(0)); [EOL]     assertEquals('1', Conversion.intToHexDigit(1)); [EOL]     assertEquals('2', Conversion.intToHexDigit(2)); [EOL]     assertEquals('3', Conversion.intToHexDigit(3)); [EOL]     assertEquals('4', Conversion.intToHexDigit(4)); [EOL]     assertEquals('5', Conversion.intToHexDigit(5)); [EOL]     assertEquals('6', Conversion.intToHexDigit(6)); [EOL]     assertEquals('7', Conversion.intToHexDigit(7)); [EOL]     assertEquals('8', Conversion.intToHexDigit(8)); [EOL]     assertEquals('9', Conversion.intToHexDigit(9)); [EOL]     assertEquals('a', Conversion.intToHexDigit(10)); [EOL]     assertEquals('b', Conversion.intToHexDigit(11)); [EOL]     assertEquals('c', Conversion.intToHexDigit(12)); [EOL]     assertEquals('d', Conversion.intToHexDigit(13)); [EOL]     assertEquals('e', Conversion.intToHexDigit(14)); [EOL]     assertEquals('f', Conversion.intToHexDigit(15)); [EOL]     try { [EOL]         Conversion.intToHexDigit(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testByteArrayToShort() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals((short) 0x0000, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 0)); [EOL]     assertEquals((short) 0x00CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 1)); [EOL]     assertEquals((short) 0xF1CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0xF0F1, Conversion.byteArrayToShort(src, 1, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0x1234, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 0, 0)); [EOL]     assertEquals((short) 0xCD34, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 8, 1)); [EOL] }
@Test [EOL] public void testByteArrayToShort() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals((short) 0x0000, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 0)); [EOL]     assertEquals((short) 0x00CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 1)); [EOL]     assertEquals((short) 0xF1CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0xF0F1, Conversion.byteArrayToShort(src, 1, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0x1234, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 0, 0)); [EOL]     assertEquals((short) 0xCD34, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 8, 1)); [EOL] }
@Test [EOL] public void testByteArrayToShort() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals((short) 0x0000, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 0)); [EOL]     assertEquals((short) 0x00CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 1)); [EOL]     assertEquals((short) 0xF1CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0xF0F1, Conversion.byteArrayToShort(src, 1, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0x1234, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 0, 0)); [EOL]     assertEquals((short) 0xCD34, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 8, 1)); [EOL] }
@Test [EOL] public void testByteArrayToShort() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals((short) 0x0000, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 0)); [EOL]     assertEquals((short) 0x00CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 1)); [EOL]     assertEquals((short) 0xF1CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0xF0F1, Conversion.byteArrayToShort(src, 1, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0x1234, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 0, 0)); [EOL]     assertEquals((short) 0xCD34, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 8, 1)); [EOL] }
@Test [EOL] public void testByteArrayToShort() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals((short) 0x0000, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 0)); [EOL]     assertEquals((short) 0x00CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 1)); [EOL]     assertEquals((short) 0xF1CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0xF0F1, Conversion.byteArrayToShort(src, 1, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0x1234, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 0, 0)); [EOL]     assertEquals((short) 0xCD34, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 8, 1)); [EOL] }
@Test [EOL] public void testHexToByte() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0)); [EOL]     assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1)); [EOL]     assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0)); [EOL]     assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1)); [EOL] }
@Test [EOL] public void testHexToByte() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0)); [EOL]     assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1)); [EOL]     assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0)); [EOL]     assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1)); [EOL] }
@Test [EOL] public void testHexToByte() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0)); [EOL]     assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1)); [EOL]     assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0)); [EOL]     assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1)); [EOL] }
@Test [EOL] public void testHexToByte() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0)); [EOL]     assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1)); [EOL]     assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0)); [EOL]     assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1)); [EOL] }
@Test [EOL] public void testHexToByte() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0)); [EOL]     assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1)); [EOL]     assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0)); [EOL]     assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1)); [EOL] }
@Test [EOL] public void testBinaryToLong() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]     assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567876BCDEF0L, Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); [EOL] }
@Test [EOL] public void testBinaryToLong() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]     assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567876BCDEF0L, Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); [EOL] }
@Test [EOL] public void testBinaryToLong() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]     assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567876BCDEF0L, Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); [EOL] }
@Test [EOL] public void testBinaryToLong() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]     assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567876BCDEF0L, Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); [EOL] }
@Test [EOL] public void testBinaryToInt() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]     assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]     assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]     assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]     assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4)); [EOL]     assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4)); [EOL] }
@Test [EOL] public void testBinaryToInt() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]     assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]     assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]     assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]     assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4)); [EOL]     assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4)); [EOL] }
@Test [EOL] public void testBinaryToInt() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]     assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]     assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]     assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]     assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4)); [EOL]     assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4)); [EOL] }
@Test [EOL] public void testIntToHex() { [EOL]     assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); [EOL]     assertEquals("ffffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]     assertEquals("3fffffffffffffffffffffff", Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("feffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]     assertEquals("fedcffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]     assertEquals("fedcba0fffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 7)); [EOL]     assertEquals("fedcba09ffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 8)); [EOL]     assertEquals("fff3ffffffffffffffffffff", Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]     assertEquals("ffffefffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]     assertEquals("ffffedcfffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]     assertEquals("ffffedcba0ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 7)); [EOL]     assertEquals("ffffedcba09fffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 8)); [EOL]     assertEquals("7fffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("bfffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("fffdb97512ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 3, "ffffffffffffffffffffffff", 3, 8)); [EOL]     assertEquals("fffedcba09ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 4, "ffffffffffffffffffffffff", 3, 7)); [EOL]     assertEquals("fedcba09", Conversion.intToHex(0x90ABCDEF, 0, "", 0, 8)); [EOL]     try { [EOL]         Conversion.intToHex(0x90ABCDEF, 0, "", 1, 8); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntToHex() { [EOL]     assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); [EOL]     assertEquals("ffffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]     assertEquals("3fffffffffffffffffffffff", Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("feffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]     assertEquals("fedcffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]     assertEquals("fedcba0fffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 7)); [EOL]     assertEquals("fedcba09ffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 8)); [EOL]     assertEquals("fff3ffffffffffffffffffff", Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]     assertEquals("ffffefffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]     assertEquals("ffffedcfffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]     assertEquals("ffffedcba0ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 7)); [EOL]     assertEquals("ffffedcba09fffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 8)); [EOL]     assertEquals("7fffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("bfffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("fffdb97512ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 3, "ffffffffffffffffffffffff", 3, 8)); [EOL]     assertEquals("fffedcba09ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 4, "ffffffffffffffffffffffff", 3, 7)); [EOL]     assertEquals("fedcba09", Conversion.intToHex(0x90ABCDEF, 0, "", 0, 8)); [EOL]     try { [EOL]         Conversion.intToHex(0x90ABCDEF, 0, "", 1, 8); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testLongToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62)); [EOL] }
@Test [EOL] public void testLongToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62)); [EOL] }
@Test [EOL] public void testByteToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.byteToBinary((byte) 0xEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 7)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, true, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 8)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, true, false, true, false, false, true, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 8)); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true, false, false, true, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 1, new boolean[13], 0, 7)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 0, 6)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, false, true, false, false, true, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 3, 6)); [EOL] }
@Test [EOL] public void testByteToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.byteToBinary((byte) 0xEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 7)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, true, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 8)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, true, false, true, false, false, true, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 8)); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true, false, false, true, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 1, new boolean[13], 0, 7)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 0, 6)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, false, true, false, false, true, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 3, 6)); [EOL] }
@Test [EOL] public void testByteToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.byteToBinary((byte) 0xEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 7)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, true, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 8)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, true, false, true, false, false, true, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 8)); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true, false, false, true, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 1, new boolean[13], 0, 7)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 0, 6)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, false, true, false, false, true, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 3, 6)); [EOL] }
@Test [EOL] public void testEscapeJson() { [EOL]     assertEquals(null, StringEscapeUtils.escapeJson(null)); [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JSON.translate(null, null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringEscapeUtils.ESCAPE_JSON.translate("", null); [EOL]         fail(); [EOL]     } catch (final IOException ex) { [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("He didn't say, \\\"stop!\\\"", StringEscapeUtils.escapeJson("He didn't say, \"stop!\"")); [EOL]     String expected = "\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\\\/"; [EOL]     String input = "\"foo\" isn't \"bar\". specials: \b\r\n\f\t\\/"; [EOL]     assertEquals(expected, StringEscapeUtils.escapeJson(input)); [EOL] }
@Test [EOL] public void testUnescapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.unescapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.unescapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.unescapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml4("\uDBFF\uDFFD")); [EOL] }
